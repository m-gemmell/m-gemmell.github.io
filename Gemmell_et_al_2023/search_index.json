[["01-Intro.html", "Optimised human stool sample collection for multi-omic microbiota analysis R code Chapter 1 Introduction", " Optimised human stool sample collection for multi-omic microbiota analysis R code Matthew R. Gemmell 2023-05-21 Chapter 1 Introduction A project to analyse the 16S bacterial profiles and to help determine storage protocols. The dataset consist of 74 samples (out of 174) left after removal of poor quality and low read samples, and rarefaction size of 20k. The samples were stored using different buffers. below is the number of samples by buffer method: Ethanol: 12 No buffer: 16 PSP buffer: 16 RNAlater: 30 Samples were extracted from 6 patients. These patients had the following number of samples: 1 = 16 2 = 17 3 = 19 4 = 4 5 = 9 6 = 9 "],["02-Phyloseqize.html", "Chapter 2 Importing and preocessing data 2.1 qiime2R import 2.2 Preprocess data 2.3 Lipid data", " Chapter 2 Importing and preocessing data 2.1 qiime2R import #Load qiime2R library library(qiime2R) library(phyloseq) library(tidyverse) #Convert QIIME2 artifacts into phyloseq object physeq&lt;-qza_to_phyloseq( features=&quot;./data/table.nocontrol.minfreq4628.qza&quot;, tree=&quot;./data/rooted-tree.qza&quot;, taxonomy=&quot;./data/taxonomy.qza&quot;, metadata = &quot;./data/qiime2_metadata.nocontrols.v4.tsv&quot; ) #Change genera &quot;human&quot; to Rikenellacae tax_table(physeq)[,&quot;Genus&quot;] &lt;- gsub(tax_table(physeq)[,&quot;Genus&quot;], pattern = &quot;human&quot;, replacement = NA) tax_table(physeq)[,&quot;Species&quot;] &lt;- gsub(tax_table(physeq)[,&quot;Species&quot;], pattern = &quot;gut metagenome&quot;, replacement = NA) #save physeq object save(physeq, file = &quot;./data/physeq&quot;) 2.2 Preprocess data #libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #load in phyloseq object load(&quot;./data/physeq&quot;) #subset samples to only keep rnalater samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Change names of RNA later samples sample_name_vec &lt;- unlist(as.vector(sample_data(physeq)[,1])) sample_name_vec_corrected &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;,sample_name_vec) sample_data(physeq)[,1] &lt;- sample_name_vec_corrected #In metadata add column with buffer and storage combined sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- paste0(unlist(sample_data(physeq)[,&quot;Bufferused&quot;]), &quot;_&quot;, unlist(sample_data(physeq)[,&quot;Storageconditions&quot;])) save(physeq, file = &quot;./data/preprocess_physeq&quot;) # # preprocess #### #transform samples to relabund physeq_relabund &lt;- transform_sample_counts(physeq, function(x) x / sum(x)) #num ASVs b4 removal of low ASVs = 3965 # nrow(otu_table(physeq_relabund)) #first remove ASV with relabund equal to 0 physeq_relabund &lt;- filter_taxa(physeq_relabund, function(x) sum(x) &gt; 0, TRUE) #current num ASVs = 3626 # nrow(otu_table(physeq_relabund)) #remove ASVs with a mean less than 1e-5 (relabund) physeq_relabund &lt;- filter_taxa(physeq_relabund, function(x) mean(x) &gt; 1e-5, TRUE) #current num ASVs = 1406 # nrow(otu_table(physeq_relabund)) #Let us see how much relabund we lost #colSums(otu_table(physeq_relabund)) #all samples have greater than 0.98 relabund remaining so it looks good #In metadata add column with buffer and storage combined sample_data(physeq_relabund)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- paste0(unlist(sample_data(physeq_relabund)[,&quot;Bufferused&quot;]), &quot;_&quot;, unlist(sample_data(physeq_relabund)[,&quot;Storageconditions&quot;])) #save physeq object save(physeq_relabund, file = &quot;./data/physeq_relabund&quot;) 2.3 Lipid data #libraries library(&quot;phyloseq&quot;) #Read in data df &lt;- read.csv(file = &quot;data/Pilot SCFA data - MG.csv&quot;, check.names = FALSE, row.names = 1) #Sample names sample_names &lt;- colnames(df) #compounds compound_names &lt;- row.names(df[6:14,]) #First create OTU matrix otu_df &lt;- df[6:14,] num_otu_df &lt;- data.frame(apply(otu_df, 2, function(x) as.numeric(as.character(x)))) otu_mat &lt;- data.matrix(num_otu_df) rownames(otu_mat) &lt;- paste0(&quot;OTU&quot;, 1:nrow(otu_mat)) colnames(otu_mat) &lt;- paste0(&quot;Sample&quot;, 1:ncol(otu_mat)) #Tax matrix tax_mat &lt;- otu_mat[,1:2] tax_mat[,1] &lt;- compound_names tax_mat[,2] &lt;- compound_names colnames(tax_mat) &lt;- c(&quot;Compound&quot;,&quot;X&quot;) #Sample_data_frame metadf &lt;- data.frame(lapply(df[1:5,], as.character), stringsAsFactors=FALSE) row.names(metadf) &lt;- row.names(df[1:5,]) metadf[&quot;Sample_name&quot;,] &lt;- colnames(df) #Change buffer labels metadf[2,] &lt;- gsub(pattern = &quot;None&quot;, replacement = &quot;No buffer&quot;, metadf[2,]) metadf[2,] &lt;- gsub(pattern = &quot;70% EtOH&quot;, replacement = &quot;Etanol&quot;, metadf[2,]) metadf[2,] &lt;- gsub(pattern = &quot;RNA later&quot;, replacement = &quot;RNAlater&quot;, metadf[2,]) colnames(metadf) &lt;- colnames(otu_mat) t_metadf &lt;- data.frame(t(metadf), stringsAsFactors=FALSE) t_metadf[t_metadf$Storage.time == 0,&quot;Temp&quot;] &lt;- &quot;Baseline&quot; t_metadf[,&quot;Buffer.type.Temp&quot;] &lt;- paste(t_metadf[,&quot;Buffer.type&quot;],t_metadf[,&quot;Temp&quot;],sep=&quot;|&quot;) #Temp and time column t_metadf[,&quot;Temp.Storage.time&quot;] &lt;- paste(t_metadf[,&quot;Temp&quot;],t_metadf[,&quot;Storage.time&quot;],sep=&quot;|&quot;) #Change Baseline|0 to Baseline t_metadf[,&quot;Temp.Storage.time&quot;] &lt;- gsub(pattern = &quot;Baseline\\\\|0&quot;, replacement = &quot;Baseline&quot;, x = t_metadf[,&quot;Temp.Storage.time&quot;]) #Order of temp t_metadf[,&quot;Temp&quot;] &lt;- factor(t_metadf[,&quot;Temp&quot;], levels = c(&quot;Baseline&quot;, &quot;RT&quot;, &quot;Fridge&quot;)) #Sample column t_metadf$`Sample name` &lt;- t_metadf$Sample_name #Create phyloseq object OTU &lt;- otu_table(otu_mat, taxa_are_rows = TRUE) TAX &lt;- tax_table(tax_mat) sampledata &lt;- sample_data(data.frame(t_metadf, stringsAsFactors=FALSE)) physeq &lt;- phyloseq(OTU,TAX,sampledata) #remove samples with no otu numbers physeq = subset_samples(physeq, Sample_name != &quot;6Q&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6R&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6S&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6T&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6P&quot;) #save physeq object save(physeq, file = &quot;data/lipid_physeq_object&quot;) "],["03-Figure_3.html", "Chapter 3 Figure 3 3.1 Libraries 3.2 Figure 3A 3.3 Figure 3B 3.4 Figure 3C", " Chapter 3 Figure 3 3.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #library(&quot;plotly&quot;) library(&quot;tidyverse&quot;) library(&quot;ggforce&quot;) library(&quot;ggh4x&quot;) 3.2 Figure 3A #Load in data load(&quot;./data/preprocess_physeq&quot;) #Transform samples to even sampling depth physeq &lt;- transform_sample_counts(physeq, function(x) 30000 * x/sum(x)) #Save object save(physeq, file = &quot;./data/preproces_physeq_even_depth30k&quot;) #load in phyloseq object load(&quot;./data/preproces_physeq_even_depth30k&quot;) #Produce Unweighted unifrac oridnation ord &lt;- ordinate(physeq, &quot;PCoA&quot;, &quot;wunifrac&quot;) #Create plot p &lt;- plot_ordination(physeq, ord, color=&quot;Patientnumber&quot;) #Save plot ggsave(plot = p, &quot;./figures/weighted_unifrac_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 80, width = 100, dpi = 300) 3.3 Figure 3B #Load in relative abundance phyloseq load(&quot;./data/physeq_relabund&quot;) #Aggregate taxa to order physeq_order_relabund &lt;- aggregate_taxa(physeq_relabund, &#39;Order&#39;) #Remove Appearing square brackets again tax_table(physeq_order_relabund)[,] &lt;- gsub(pattern = &quot;\\\\[&quot; , replacement = &quot;&quot;, tax_table(physeq_order_relabund)[,]) tax_table(physeq_order_relabund)[,] &lt;- gsub(pattern = &quot;\\\\]&quot; , replacement = &quot;&quot;, tax_table(physeq_order_relabund)[,]) row.names(tax_table(physeq_order_relabund)) &lt;- gsub(pattern = &quot;\\\\[&quot; , replacement = &quot;&quot;, row.names(tax_table(physeq_order_relabund))) row.names(tax_table(physeq_order_relabund)) &lt;- gsub(pattern = &quot;\\\\]&quot; , replacement = &quot;&quot;, row.names(tax_table(physeq_order_relabund))) order_taxa_df &lt;- as.data.frame(tax_table(physeq_order_relabund)) #Produce plot p &lt;- plot_bar(physeq_order_relabund, x = &quot;Sample_name&quot;, fill = &quot;Order&quot;)+ geom_bar(aes(color=Order, fill=Order), stat=&quot;identity&quot;, position=&quot;stack&quot;) + facet_nested_wrap(~Patientnumber+Bufferused, nrow = 2, scales = &quot;free_x&quot;) + theme(legend.position=&quot;bottom&quot;, axis.text.x = element_text( angle = -45, vjust = 0.5, hjust=0.1), plot.margin = margin(0,5,0,0, &quot;mm&quot;), panel.spacing.x=unit(0.2, &quot;lines&quot;)) + labs(x= &quot;Sample name&quot;, y = &quot;relative abundance&quot;) + guides(fill=guide_legend(ncol=8)) #Save plot ggsave(plot = p,filename = &quot;./figures/order_relabund_facet_buffer.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 200, width = 300, dpi=300) ###Percentage of Bacteroides and Firmicutes #Load in relative abundance phyloseq load(&quot;./data/physeq_relabund&quot;) #Aggregate taxa to order physeq_phylum_relabund &lt;- aggregate_taxa(physeq_relabund, &#39;Phylum&#39;) #Extract abundance table df &lt;- abundances(physeq_phylum_relabund) #Create vector of relabund of bact and Firm added Bac_firm_vec &lt;- df[&quot;Bacteroidetes&quot;,] + df[&quot;Firmicutes&quot;,] samples &lt;- names(Bac_firm_vec[Bac_firm_vec &lt; 0.5]) metadf &lt;- as.data.frame(meta(physeq_phylum_relabund)) meta_samples &lt;- metadf[metadf$Sample_name %in% samples,] 3.4 Figure 3C #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #Produce plot p &lt;- plot_richness(physeq, x = &quot;Bufferused&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + theme(legend.position=&quot;none&quot;, axis.text.x = element_text( angle = -45, vjust = 0.5, hjust=0.1)) + labs(x= &quot;Buffer used&quot;, y = &quot;Measure&quot;) #Save plot ggsave(plot = p, filename = &quot;./figures/alpha_diversity_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 80, width = 200) "],["04-Figure_4_biomarker.html", "Chapter 4 Figure 4 4.1 Libraries 4.2 Genus", " Chapter 4 Figure 4 Biomarker detection with MaAsLin2 4.1 Libraries library(&quot;phyloseq&quot;) library(&quot;Maaslin2&quot;) library(&quot;microbiome&quot;) library(&quot;DT&quot;) library(&quot;ggh4x&quot;) 4.2 Genus 4.2.1 Preprocess table and convert to genus table #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Create #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #transform to relabund physeq_relabund &lt;- abundances(physeq, &quot;compositional&quot;) # Get data into maaslin format #### #First need df of relabund df_data &lt;- t(as.data.frame(otu_table(physeq_relabund, taxa_are_rows=TRUE))) #next metadata #the nonsense is so it becomes a normal df #rather than a weird phyloseq object within a df df_metadata &lt;- as.data.frame(t(t(as.data.frame(sample_data(physeq))))) #keep only columns of interest df_metadata &lt;- df_metadata[,c(2,5,10,11,12,13)] #convert some columns to numeric df_metadata$Storagetemp &lt;- as.numeric(df_metadata$Storagetemp) df_metadata$DaysstoredpriortoDNAextraction &lt;- as.numeric(df_metadata$DaysstoredpriortoDNAextraction) df_metadata$DNAconcng_ul &lt;- as.numeric(df_metadata$DNAconcng_ul) #remvo phyloseq object rm(physeq) rm(physeq_relabund) #Edit metadata df_metadata$Bufferused_and_Storageconditions &lt;- paste0(df_metadata$Bufferused, &quot;_&quot;, df_metadata$Storageconditions) #Remove unwanted metadata columns df_metadata &lt;- df_metadata[,c(1,5,7)] #Convert all columns to factors columns df_metadata[] &lt;- lapply( df_metadata, factor) #Save objects save(df_data, file = &quot;./data/maaslin_genus_df&quot;) save(df_metadata, file = &quot;./data/maaslin_genus_metadata&quot;) 4.2.2 MaAsLin2 on genera #Remove Days stored info df_metadata &lt;- df_metadata[,c(1,3)] #fit data fit_data &lt;- Maaslin2::Maaslin2(input_data = df_data, input_metadata = df_metadata, output = &quot;standard_maaslin2_genus&quot;, #Random sample used for subject/patients random_effects = &quot;Patientnumber&quot;, reference = c(&quot;Bufferused_and_Storageconditions&quot;, &quot;No buffer_-80&quot;) ) #Create heatmap of significant results #Read in data df &lt;- read.csv( file = &quot;./standard_maaslin2_genus/significant_results.tsv&quot;, sep = &quot;\\t&quot;, check.names=FALSE) #Create (-log(qval)*sign(coeff)) column for value df$val &lt;- (-log(df$qval)*sign(df$coef)) #Create min and max val lo &lt;- floor(min(df$val)) up &lt;- ceiling(max(df$val)) mid &lt;- 0 #Create rounded value for text df$val_round &lt;- round(df$val, digits = 2) #heatmap heatmap_media &lt;- ggplot(df, aes(x = value, y = feature, fill = val)) + #Produce ggplot as tile/heatmap style plot ggplot2::geom_tile(colour = &quot;black&quot;) + #Customise colour gradient ggplot2::scale_fill_gradient2(low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, na.value = &quot;white&quot;, midpoint = mid, limit = c(lo,up)) + #Add the values as text in the cells ggplot2::geom_text(aes(value, feature, label = val_round), colour = &quot;black&quot;, size = 4) + #Remove the x and y labels (NULL) and add a title ggplot2::labs(x = NULL, y = NULL, title = &quot;Features with significant assoications (-log(qval)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) ggsave(filename = &quot;./figures/maaslin2_heatmap_genus.png&quot;, plot = heatmap_media, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, height = 200, width = 300) "],["05-Figure_5.html", "Chapter 5 Figure 5 5.1 Preprocess data 5.2 Colour blindy friendly palette 5.3 A Heatmap 5.4 B and C Beta diversity", " Chapter 5 Figure 5 ##libraries library(&quot;ggplot2&quot;) library(&quot;phyloseq&quot;) library(&quot;tidyverse&quot;) library(&quot;dplyr&quot;) library(&quot;vegan&quot;) library(&quot;reshape2&quot;) library(&quot;ggplot2&quot;) library(&quot;ggh4x&quot;) 5.1 Preprocess data #Load phyloseq load(file = &quot;data/lipid_physeq_object&quot;) #Set to even sampling depth #Set to even sampling depth (1000) physeq_1k = transform_sample_counts(physeq, function(x) 1000 * x/sum(x)) #save physeq object save(physeq_1k, file = &quot;./data/lipid_physeq_1k_object&quot;) 5.2 Colour blindy friendly palette cbbPalette &lt;- c(&quot;#000000&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;, &quot;#F0E442&quot;, &quot;#0072B2&quot;, &quot;#D55E00&quot;, &quot;#CC79A7&quot;) theme_set(theme_bw()) scale_colour_discrete &lt;- function(palname=cbbPalette){ scale_colour_manual(values = palname) } scale_fill_discrete &lt;- function(palname=cbbPalette){ scale_fill_manual(values=palname) } 5.3 A Heatmap #Choose order for temp #sample_data(physeq_1k)[,&quot;Temp&quot;] &lt;- factor(sample_data(physeq_1k)[,&quot;Temp&quot;], levels = c(&quot;Baseline&quot;, &quot;RT&quot;, &quot;Fridge&quot;)) #Heatmap heatmap_facet &lt;- plot_heatmap(physeq_1k, sample.label = &quot;Sample_name&quot;, taxa.label = &quot;Compound&quot;) + facet_nested( ~ Buffer.type + Storage.time + Temp , scales = &quot;free_x&quot; ) + theme(panel.spacing.x=unit(0, &quot;lines&quot;)) + theme(axis.text.x = element_text(size=6)) ggsave(plot = heatmap_facet, filename = &quot;figures/lipid_heatmap.png&quot;, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, width = 300, height = 100) 5.4 B and C Beta diversity #NMDs bray curtis physeq_1k_ord_nmds_bray &lt;- ordinate(physeq_1k, &quot;NMDS&quot;, &quot;bray&quot;) #NMDS_bray facetted by Buffer.type.Temp, shape by sample NMDS_bray_facet &lt;- plot_ordination(physeq_1k, physeq_1k_ord_nmds_bray, color = &quot;Sample.number&quot;, shape = &quot;Temp&quot;) + geom_point(size=3) + facet_wrap( ~ Buffer.type, nrow = 1) + theme(legend.position=&quot;bottom&quot;) + labs(color = &quot;Patient number&quot;) ggsave(NMDS_bray_facet, filename = &quot;./figures/Lipids_NMDs_bray_curtis_facet_colour_by_sample.png&quot;, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, width = 300, height = 100) #NMDS_bray facetted by Buffer.type.Temp NMDS_bray_facet &lt;- plot_ordination(physeq_1k, physeq_1k_ord_nmds_bray, color = &quot;Storage.time&quot;, shape = &quot;Temp&quot;) + geom_point(size=3) + facet_wrap( ~ Buffer.type, nrow = 1) + theme(legend.position=&quot;bottom&quot;)+ labs(color = &quot;Storage time&quot;) ggsave(NMDS_bray_facet, filename = &quot;./figures/lipids_NMDs_bray_curtis_facet.png&quot;, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, width = 300, height = 100) "],["06-Figure_6.html", "Chapter 6 Figure 6 6.1 Libraries 6.2 Preprocess genus table 6.3 All buffers", " Chapter 6 Figure 6 Cross correlation of 16S and lipid profiles 6.1 Libraries library(microbiome) library(phyloseq) library(dplyr) library(reshape2) library(DT) 6.2 Preprocess genus table #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Subset samples to remove samples with NA lipid info physeq &lt;- subset_samples(physeq, !(Formate.MM. == &quot;NA&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #Extract genus table to a df genus_df &lt;- as.matrix(otu_table(physeq)) #transpose genus_df_t &lt;- as.matrix(t(genus_df)) #log10 the values genus_df_t_log10 &lt;- log10(genus_df_t) #extract lipid table lipid_mat &lt;- as.matrix(meta(physeq)[,grepl(&quot;.MM.&quot;,colnames(meta(physeq)))]) #remove .MM. from colnames colnames(lipid_mat) &lt;- gsub(pattern = &quot;.MM.&quot;, replacement = &quot;&quot;, colnames(lipid_mat)) #Remove &quot;_b&quot; from sample names row.names(lipid_mat) &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;, row.names(lipid_mat)) row.names(genus_df_t_log10) &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;, row.names(genus_df_t_log10)) #Save object save(genus_df_t_log10, file = &quot;./data/16s_and_lipid_genus_physeq&quot;) save(lipid_mat, file = &quot;./data/lipid_matrix&quot;) 6.3 All buffers 6.3.1 Correlation #load in phyloseq object load(&quot;./data/16s_and_lipid_genus_physeq&quot;) load(&quot;./data/lipid_matrix&quot;) #Correlation correlation.table &lt;- associate( genus_df_t_log10, lipid_mat, method = &quot;spearman&quot;, mode = &quot;table&quot;, p.adj.threshold = 0.05, n.signif = 1) #Add column names colnames(correlation.table)[1:2] &lt;- c(&quot;Genus&quot;,&quot;Lipid&quot;) #Write table with significant hits to file write.table(correlation.table[correlation.table$p.adj &lt; 0.05,], file = &quot;./data/Genus_lipid_sig_correlation.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Display table with significant hits below datatable(correlation.table[correlation.table$p.adj &lt; 0.05,], options = list(pageLength = 50) ) 6.3.2 Heatmap theme_set(theme_bw(20)) df &lt;- correlation.table p &lt;- ggplot(df, aes(Genus, Lipid, group=Lipid)) p &lt;- p + geom_tile(aes(fill = Correlation)) p &lt;- p + geom_text(aes(label = round(df$Correlation, 1)), size = 5) p &lt;- p + scale_fill_gradientn(&quot;Correlation&quot;, breaks = seq(from = -1, to = 1, by = 0.25), colours = c(&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;), limits = c(-1, 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5), legend.text=element_text(size=10)) + labs(x = &quot;&quot;, y = &quot;&quot;) ggsave(plot = p, filename = &quot;./figures/Genus_lipid_corr_heatmap.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 200, width = 400, dpi = 300) "],["07-Supp_fig_1.html", "Chapter 7 Supp figure 1", " Chapter 7 Supp figure 1 Create rarefaction plot #libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) library(&quot;vegan&quot;) library(microViz) #Load phyloseq load(&quot;./data/physeq&quot;) load(&quot;./data/physeq_relabund&quot;) #Get ASVs and samples kept in the processed relabund table samples &lt;- colnames(otu_table(physeq_relabund)) ASVs_to_keep &lt;- row.names(otu_table(physeq_relabund)) ASVs &lt;- row.names(tax_table(physeq)) ASVs_to_remove &lt;- setdiff(ASVs, ASVs_to_keep) subset_physeq &lt;- microbiome::remove_taxa(x = physeq, ASVs_to_remove) subset_physeq_2 &lt;- phyloseq::prune_samples(samples, subset_physeq) nrow(sample_data(subset_physeq_2)) save(subset_physeq_2, file = &quot;./data/physeq_for_rarefaction&quot;) load(file=&quot;./data/physeq_for_rarefaction&quot;) asv_abund_df &lt;- as.data.frame(t(phyloseq::otu_table(subset_physeq_2))) png(filename = &quot;./figures/rarefaction_plot.png&quot;, res = 300, units = &quot;mm&quot;, height = 200, width = 300) rarecurve(x = asv_abund_df, step=100, lwd=1, ylab=&quot;ASVs&quot;, label=F, xlim=c(0, 100000)) dev.off() "],["08-Supp_fig_2.html", "Chapter 8 Supp figure 2 8.1 Libraries 8.2 Weighted unifrac plots with relative abundance", " Chapter 8 Supp figure 2 Beta diversity plots of samples using the preprocessed relative abundance values. 8.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) 8.2 Weighted unifrac plots with relative abundance Create the ordination data ## Warning in matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE, : data length [2799] is not a sub-multiple ## or multiple of the number of rows [1400] 8.2.1 Figure A: Buffer used faceted by patient p &lt;- plot_ordination(physeq_relabund, ord, color=&quot;Bufferused&quot;) + geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;) ggsave(plot = p, &quot;./figures/weighted_unifrac_Bufferused_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.2 Figure B: Storage temperature p &lt;- plot_ordination(physeq_relabund, ord, color=&quot;Storagetemp&quot;)+ geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;) ggsave(plot = p, &quot;./figures/weighted_unifrac_Storagetemp_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.3 Figure C: Storage conditions p &lt;- plot_ordination(physeq_relabund, ord, color=&quot;Storageconditions&quot;) + geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;) ggsave(plot = p, &quot;./figures/weighted_unifrac_Storageconditions_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.4 Figure D: Buffer and storage condition faceted by patient p &lt;- plot_ordination(physeq_relabund, ord, color=&quot;Storageconditions&quot;, shape = &quot;Bufferused&quot;)+ geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;) ggsave(plot = p, &quot;./figures/weighted_unifrac_Bufferused_and_Storageconditions_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.5 Statistical test #Will use Unifrac() &amp; adonis() function from vegan package library(vegan) #RVAideMemoire package for pairwise permanovas #pairwise.perm.manova() function #https://www.rdocumentation.org/packages/RVAideMemoire/versions/0.9-81-2/topics/pairwise.perm.manova #install.packages(&#39;RVAideMemoire&#39;) library(RVAideMemoire) #Carry out PERMANOVA test #Resource using for help #https://microbiome.github.io/tutorials/PERMANOVA.html #https://mibwurrepo.github.io/Microbial-bioinformatics-introductory-course-Material-2018/beta-diversity-metrics.html #Extract metadata meta &lt;- meta(physeq_relabund) #adonis doesn&#39;t have weighted unifrac distance so need to calculate it unifrac.dist &lt;- UniFrac(physeq_relabund, weighted = TRUE,normalized = TRUE, parallel = FALSE,fast = TRUE) #PERMANOVA tests #Fig 3A stats patient_permanova &lt;- adonis(unifrac.dist ~ Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(patient_permanova$aov.tab), file = &quot;./data/patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #buffer stats buffer_permanova &lt;- adonis(unifrac.dist ~ Bufferused , data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(buffer_permanova$aov.tab), file = &quot;./data/buffer_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2A stats buffer_patient_permanova &lt;- adonis(unifrac.dist ~ Bufferused + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(buffer_patient_permanova$aov.tab), file = &quot;./data/buffer_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2b stats temp_patient_permanova &lt;- adonis(unifrac.dist ~ Storagetemp + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(temp_patient_permanova$aov.tab), file = &quot;./data/temp_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2c stats condition_patient_permanova &lt;- adonis(unifrac.dist ~ Storageconditions + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(condition_patient_permanova$aov.tab), file = &quot;./data/condition_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2d stats buffer_condition_patient_permanova &lt;- adonis(unifrac.dist ~ Bufferused + Storageconditions + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(buffer_condition_patient_permanova$aov.tab), file = &quot;./data/buffer_condition_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Pairwise permanovas #Patients patient_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Patientnumber, nperm = 999) write.table(as.data.frame(patient_pair_permanova$p.value), file = &quot;./data/patient_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Buffers buffer_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Bufferused, nperm = 999) write.table(as.data.frame(buffer_pair_permanova$p.value), file = &quot;./data/buffer_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Buffer &amp; patients meta$Bufferused_and_Patientnumber &lt;- paste0(meta$Bufferused,&quot;_&quot;,meta$Patientnumber) buffer_patient_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Bufferused_and_Patientnumber, nperm = 999) write.table(as.data.frame(buffer_patient_pair_permanova$p.value), file = &quot;./data/buffer_patient_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Temp &amp; patients meta$Storagetemp_and_Patientnumber &lt;- paste0(meta$Storagetemp,&quot;_&quot;,meta$Patientnumber) temp_patient_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Storagetemp_and_Patientnumber, nperm = 999) write.table(as.data.frame(temp_patient_pair_permanova$p.value), file = &quot;./data/temp_patient_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Condition &amp; patients meta$Storageconditions_and_Patientnumber &lt;- paste0(meta$Storagetemp,&quot;_&quot;,meta$Storageconditions) cond_patient_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Storageconditions_and_Patientnumber, nperm = 999) write.table(as.data.frame(cond_patient_pair_permanova$p.value), file = &quot;./data/cond_patient_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) "],["09-Supp_fig_3.html", "Chapter 9 Supp figure 3 9.1 Libraries 9.2 Alpha diveristy plots", " Chapter 9 Supp figure 3 Alpha diversity plots of samples using the preprocessed unrarified abundance values. 9.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) library(&quot;ggforce&quot;) 9.2 Alpha diveristy plots 9.2.1 S3A: Storage conditions p &lt;- plot_richness(physeq, x = &quot;Storageconditions&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Storageconditions.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 150) 9.2.2 S3B: Patient number p &lt;- plot_richness(physeq, x = &quot;Patientnumber&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 150) 9.2.3 S3C: Storage temp p &lt;- plot_richness(physeq, x = &quot;Storagetemp&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Storagetemp.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 150) 9.2.4 S3D: Buffer and storage p &lt;- plot_richness(physeq, x = &quot;Bufferused_and_Storageconditions&quot;, color=&quot;Bufferused_and_Storageconditions&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + theme(legend.position=&quot;none&quot;) # geom_point(size = 3) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Bufferused_and_Storageconditions.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 150, width = 450) "],["10-Supp_fig_4.html", "Chapter 10 Supp figure 4 10.1 Barchart of Genera biomarkers 10.2 MaAsLin2 on genera Day 1 vs Day 3", " Chapter 10 Supp figure 4 10.1 Barchart of Genera biomarkers #Read in sig table (p-value &lt;0.05) df &lt;- read.csv( file = &quot;./standard_maaslin2_genus/significant_results.tsv&quot;, sep = &quot;\\t&quot;, check.names=FALSE) #Get all unique genera genera_biomarkers &lt;- unique(df$feature) #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Remove unwanted [] in genus names #tax_table(physeq)[,&quot;Genus&quot;] &lt;- gsub(pattern = &quot;\\\\[&quot; , replacement = &quot;&quot;, tax_table(physeq)[,&quot;Genus&quot;]) #tax_table(physeq)[,&quot;Genus&quot;] &lt;- gsub(pattern = &quot;\\\\]&quot; , replacement = &quot;&quot;, tax_table(physeq)[,&quot;Genus&quot;]) #Remove all info above genus #This is so the aggregate works below tax_table(physeq)[,&quot;Phylum&quot;] &lt;- NA tax_table(physeq)[,&quot;Class&quot;] &lt;- NA tax_table(physeq)[,&quot;Order&quot;] &lt;- NA tax_table(physeq)[,&quot;Family&quot;] &lt;- NA #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #Convert taxa names (row names) to genus row.names(tax_table(physeq)) &lt;- tax_table(physeq)[,&quot;Genus&quot;] #transform to relabund physeq_relabund &lt;- microbiome::transform(physeq, &quot;compositional&quot;) #Filter physeq to only contain biomarker genera #Select non biomarker genera biomarker_genera_physeq &lt;- prune_taxa(sort(genera_biomarkers),physeq_relabund) #Attempt to create a better colour palette #https://carbondesignsystem.com/data-visualization/color-palettes/ col_pal &lt;- c(&quot;#6929c4&quot;, &quot;#1192e8&quot;, &quot;#005d5d&quot;, &quot;#9f1853&quot;,&quot;#fa4d56&quot;, &quot;#570408&quot;, &quot;#198038&quot;, &quot;#002d9c&quot;, &quot;#ee538b&quot;,&quot;#b28600&quot;, &quot;#009d9a&quot;, &quot;#012749&quot;, &quot;#8a3800&quot;, &quot;#a56eff&quot;, &quot;#8a3ffc&quot;, &quot;#33b1ff&quot;, &quot;#007d79&quot;, &quot;#ff7eb6&quot;, &quot;#fa4d56&quot;, &quot;#fff1f1&quot;, &quot;#6fdc8c&quot;, &quot;#4589ff&quot;, &quot;#d12771&quot;, &quot;#d2a106&quot;, &quot;#08bdba&quot;, &quot;#bae6ff&quot;, &quot;#ba4e00&quot;, &quot;#d4bbff&quot;) #Bar plots #Facet by Bufferused and storage condition p &lt;- plot_bar(biomarker_genera_physeq, x = &quot;Sample_name&quot;, fill = &quot;Genus&quot;)+ geom_bar(aes(color=Genus, fill=Genus), stat=&quot;identity&quot;, position=&quot;stack&quot;, colour=&quot;grey&quot;) + facet_nested_wrap( ~ Bufferused + Storageconditions , scales = &quot;free_x&quot;, nrow = 2 ) + scale_fill_manual(values = col_pal) + theme(panel.spacing.x=unit(0.1, &quot;lines&quot;)) + theme(legend.position=&quot;bottom&quot;) + guides(fill=guide_legend(nrow=3,byrow=TRUE)) ggsave(plot = p, filename = &quot;./figures/genus_biomarkers_relabund_facet_buffer_n_storage.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 200, width = 400) 10.2 MaAsLin2 on genera Day 1 vs Day 3 #Remove Days stored info df_metadata &lt;- df_metadata[,c(1,2)] #fit data fit_data &lt;- Maaslin2::Maaslin2(input_data = df_data, input_metadata = df_metadata, output = &quot;maaslin2_genus_days_stored&quot;, #Random sample used for subject/patients random_effects = &quot;Patientnumber&quot;, reference = c(&quot;DaysstoredpriortoDNAextraction&quot;, &quot;1&quot;) ) No associations were detected "],["11-Supp_fig_5.html", "Chapter 11 Supp figure 5 11.1 Intra patient variability", " Chapter 11 Supp figure 5 11.1 Intra patient variability #Packages library(microbiome) library(dplyr) library(tidyverse) #Read in data load(&quot;./data/molecule_physeq_object&quot;) physeq_no_etoh &lt;- subset_samples(physeq, Buffer.type != &quot;70% EtOH&quot;) #Set to even sampling depth (1000) physeq_1k = transform_sample_counts(physeq_no_etoh, function(x) 1000 * x/sum(x)) # betas &lt;- list() groups &lt;- as.character(unique(meta(physeq_1k)$Sample.number)) for (g in groups) { #Pick samples for this group g_physeq &lt;- subset_samples(physeq_1k, Sample.number == g) #Get median abundances of the samples reference &lt;- apply(abundances(g_physeq), 1, median) #Divergence of samples b &lt;- divergence(g_physeq, reference, method = &quot;bray&quot;) betas[[g]] &lt;- b } # boxplot df &lt;- as.data.frame(unlist(betas)) s&lt;- rownames(df) si&lt;- as.data.frame(s) si&lt;- separate(si, s, into = c(&#39;Patient&#39;,&#39;sample&#39;), sep = &quot;.Sample&quot;) df1&lt;- bind_cols(df, si) p&lt;- ggplot(df1, aes(x = Patient, y = `unlist(betas)`))+ geom_boxplot() + ylab(&#39;&#39;) + xlab(&#39;Patientnumber&#39;) + ylab(&quot;Jaccard distance&quot;) ggsave(plot = p, &quot;./figures/lipid_intra_patient_variance.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 150, width = 200) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
