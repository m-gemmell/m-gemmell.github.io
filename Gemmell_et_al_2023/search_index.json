[["01-Intro.html", "Optimised human stool sample collection for multi-omic microbiota analysis R code Chapter 1 Introduction", " Optimised human stool sample collection for multi-omic microbiota analysis R code Matthew R. Gemmell 2024-07-12 Chapter 1 Introduction A project to analyse the 16S bacterial profiles and to help determine storage protocols. The dataset consist of 74 samples (out of 174) left after removal of poor quality and low read samples, and rarefaction size of 20k. The samples were stored using different buffers. below is the number of samples by buffer method: Ethanol: 12 No buffer: 16 PSP buffer: 16 RNAlater: 30 Samples were extracted from 6 patients. These patients had the following number of samples: 1 = 16 2 = 17 3 = 19 4 = 4 5 = 9 6 = 9 "],["02-Phyloseqize.html", "Chapter 2 Importing and preocessing data 2.1 qiime2R import 2.2 Preprocess data 2.3 Lipid data", " Chapter 2 Importing and preocessing data 2.1 qiime2R import #Load qiime2R library library(qiime2R) library(phyloseq) library(tidyverse) #Convert QIIME2 artifacts into phyloseq object physeq&lt;-qza_to_phyloseq( features=&quot;./data/table.nocontrol.minfreq4628.qza&quot;, tree=&quot;./data/rooted-tree.qza&quot;, taxonomy=&quot;./data/taxonomy.qza&quot;, metadata = &quot;./data/qiime2_metadata.nocontrols.v4.tsv&quot; ) #Some oRikenellaceae are given the genera human and the species gut metagenome #Change genera &quot;human&quot; to NA #change species &quot;gut metagenome&quot; to NA tax_table(physeq)[,&quot;Genus&quot;] &lt;- gsub(tax_table(physeq)[,&quot;Genus&quot;], pattern = &quot;human&quot;, replacement = NA) tax_table(physeq)[,&quot;Species&quot;] &lt;- gsub(tax_table(physeq)[,&quot;Species&quot;], pattern = &quot;gut metagenome&quot;, replacement = NA) #save physeq object save(physeq, file = &quot;./data/physeq&quot;) 2.2 Preprocess data #libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #load in phyloseq object load(&quot;./data/physeq&quot;) #subset samples to only keep rnalater samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Change names of RNA later samples sample_name_vec &lt;- unlist(as.vector(sample_data(physeq)[,1])) sample_name_vec_corrected &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;,sample_name_vec) sample_data(physeq)[,1] &lt;- sample_name_vec_corrected #In metadata add column with buffer and storage combined sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- paste0(unlist(sample_data(physeq)[,&quot;Bufferused&quot;]), &quot;_&quot;, unlist(sample_data(physeq)[,&quot;Storageconditions&quot;])) save(physeq, file = &quot;./data/preprocess_physeq&quot;) # # preprocess #### #transform samples to relabund physeq_relabund &lt;- transform_sample_counts(physeq, function(x) x / sum(x)) #num ASVs b4 removal of low ASVs = 3965 # nrow(otu_table(physeq_relabund)) #first remove ASV with relabund equal to 0 physeq_relabund &lt;- filter_taxa(physeq_relabund, function(x) sum(x) &gt; 0, TRUE) #current num ASVs = 3626 # nrow(otu_table(physeq_relabund)) #remove ASVs with a mean less than 1e-5 (relabund) physeq_relabund &lt;- filter_taxa(physeq_relabund, function(x) mean(x) &gt; 1e-5, TRUE) #current num ASVs = 1406 # nrow(otu_table(physeq_relabund)) #Let us see how much relabund we lost #colSums(otu_table(physeq_relabund)) #all samples have greater than 0.98 relabund remaining so it looks good #In metadata add column with buffer and storage combined sample_data(physeq_relabund)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- paste0(unlist(sample_data(physeq_relabund)[,&quot;Bufferused&quot;]), &quot;_&quot;, unlist(sample_data(physeq_relabund)[,&quot;Storageconditions&quot;])) #save physeq object save(physeq_relabund, file = &quot;./data/physeq_relabund&quot;) 2.3 Lipid data #libraries library(&quot;phyloseq&quot;) #Read in data df &lt;- read.csv(file = &quot;data/Pilot SCFA data - MG.csv&quot;, check.names = FALSE, row.names = 1) #Sample names sample_names &lt;- colnames(df) #compounds compound_names &lt;- row.names(df[6:14,]) #First create OTU matrix otu_df &lt;- df[6:14,] num_otu_df &lt;- data.frame(apply(otu_df, 2, function(x) as.numeric(as.character(x)))) otu_mat &lt;- data.matrix(num_otu_df) rownames(otu_mat) &lt;- paste0(&quot;OTU&quot;, 1:nrow(otu_mat)) colnames(otu_mat) &lt;- paste0(&quot;Sample&quot;, 1:ncol(otu_mat)) #Tax matrix tax_mat &lt;- otu_mat[,1:2] tax_mat[,1] &lt;- compound_names tax_mat[,2] &lt;- compound_names colnames(tax_mat) &lt;- c(&quot;Compound&quot;,&quot;X&quot;) #Sample_data_frame metadf &lt;- data.frame(lapply(df[1:5,], as.character), stringsAsFactors=FALSE) row.names(metadf) &lt;- row.names(df[1:5,]) metadf[&quot;Sample_name&quot;,] &lt;- colnames(df) #Change buffer labels metadf[2,] &lt;- gsub(pattern = &quot;None&quot;, replacement = &quot;No buffer&quot;, metadf[2,]) metadf[2,] &lt;- gsub(pattern = &quot;70% EtOH&quot;, replacement = &quot;Ethanol&quot;, metadf[2,]) metadf[2,] &lt;- gsub(pattern = &quot;RNA later&quot;, replacement = &quot;RNAlater&quot;, metadf[2,]) colnames(metadf) &lt;- colnames(otu_mat) t_metadf &lt;- data.frame(t(metadf), stringsAsFactors=FALSE) t_metadf[t_metadf$Storage.time == 0,&quot;Temp&quot;] &lt;- &quot;Baseline&quot; t_metadf[,&quot;Buffer.type.Temp&quot;] &lt;- paste(t_metadf[,&quot;Buffer.type&quot;],t_metadf[,&quot;Temp&quot;],sep=&quot;|&quot;) #Temp and time column t_metadf[,&quot;Temp.Storage.time&quot;] &lt;- paste(t_metadf[,&quot;Temp&quot;],t_metadf[,&quot;Storage.time&quot;],sep=&quot;|&quot;) #Change Baseline|0 to Baseline t_metadf[,&quot;Temp.Storage.time&quot;] &lt;- gsub(pattern = &quot;Baseline\\\\|0&quot;, replacement = &quot;Baseline&quot;, x = t_metadf[,&quot;Temp.Storage.time&quot;]) #Order of temp t_metadf[,&quot;Temp&quot;] &lt;- factor(t_metadf[,&quot;Temp&quot;], levels = c(&quot;Baseline&quot;, &quot;RT&quot;, &quot;Fridge&quot;)) #Sample column t_metadf$`Sample name` &lt;- t_metadf$Sample_name #Create phyloseq object OTU &lt;- otu_table(otu_mat, taxa_are_rows = TRUE) TAX &lt;- tax_table(tax_mat) sampledata &lt;- sample_data(data.frame(t_metadf, stringsAsFactors=FALSE)) physeq &lt;- phyloseq(OTU,TAX,sampledata) #remove samples with no otu numbers physeq = subset_samples(physeq, Sample_name != &quot;6Q&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6R&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6S&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6T&quot;) physeq = subset_samples(physeq, Sample_name != &quot;6P&quot;) #save physeq object save(physeq, file = &quot;data/lipid_physeq_object&quot;) "],["03-Figure_3.html", "Chapter 3 Figure 3 3.1 Libraries 3.2 Figure 3A 3.3 Figure 3B 3.4 Figure 3C", " Chapter 3 Figure 3 Gut microbiota composition in study subjects. (A) Principal component analysis of stool microbiota composition based on DADA2 produced ASVs. (B) Relative abundance at the order level derived from 16S rRNA gene sequences within each sample. Bar charts are faceted by participant (1–6) and buffer used metadata information. (C) Diversity (observed species, chao1 and Shannon) of the microbiota of stool samples stratified by storage buffer (ethanol, no buffer, PSP buffer, RNAlater). 3.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #library(&quot;plotly&quot;) library(&quot;tidyverse&quot;) library(&quot;ggforce&quot;) library(&quot;ggh4x&quot;) library(&quot;patchwork&quot;) 3.2 Figure 3A #Load in data load(&quot;./data/preprocess_physeq&quot;) #Transform samples to even sampling depth physeq &lt;- transform_sample_counts(physeq, function(x) 30000 * x/sum(x)) #Save object save(physeq, file = &quot;./data/preproces_physeq_even_depth30k&quot;) #load in phyloseq object load(&quot;./data/preproces_physeq_even_depth30k&quot;) #Produce Weighted unifrac oridnation ord &lt;- ordinate(physeq, &quot;PCoA&quot;, &quot;wunifrac&quot;) #Use Paul Tol colour blind palette tol_pal &lt;- c(&quot;#4477AA&quot;,&quot;#66CCEE&quot;,&quot;#228833&quot;,&quot;#CCBB44&quot;,&quot;#EE6677&quot;,&quot;#AA3377&quot;) #Create plot p &lt;- plot_ordination(physeq, ord, color=&quot;Patientnumber&quot;) + scale_color_manual(values=tol_pal)+ #Change legend title to Participant number labs(colour=&quot;Participant\\nnumber&quot;) #Save plot ggsave(plot = p, &quot;./figures/weighted_unifrac_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 80, width = 100, dpi = 300) 3.3 Figure 3B #Load in relative abundance phyloseq load(&quot;./data/physeq_relabund&quot;) #Aggregate taxa to order physeq_order_relabund &lt;- aggregate_taxa(physeq_relabund, &#39;Order&#39;) #Remove Appearing square brackets again tax_table(physeq_order_relabund)[,] &lt;- gsub(pattern = &quot;\\\\[&quot; , replacement = &quot;&quot;, tax_table(physeq_order_relabund)[,]) tax_table(physeq_order_relabund)[,] &lt;- gsub(pattern = &quot;\\\\]&quot; , replacement = &quot;&quot;, tax_table(physeq_order_relabund)[,]) row.names(tax_table(physeq_order_relabund)) &lt;- gsub(pattern = &quot;\\\\[&quot; , replacement = &quot;&quot;, row.names(tax_table(physeq_order_relabund))) row.names(tax_table(physeq_order_relabund)) &lt;- gsub(pattern = &quot;\\\\]&quot; , replacement = &quot;&quot;, row.names(tax_table(physeq_order_relabund))) order_taxa_df &lt;- as.data.frame(tax_table(physeq_order_relabund)) #Produce plot p &lt;- plot_bar(physeq_order_relabund, x = &quot;Sample_name&quot;, fill = &quot;Order&quot;)+ geom_bar(aes(color=Order, fill=Order), stat=&quot;identity&quot;, position=&quot;stack&quot;) + facet_nested_wrap(~Patientnumber+Bufferused, nrow = 2, scales = &quot;free_x&quot;) + theme(legend.position=&quot;bottom&quot;, axis.text.x = element_text( angle = -45, vjust = 0.5, hjust=0.1), plot.margin = margin(0,5,0,0, &quot;mm&quot;), panel.spacing.x=unit(0.2, &quot;lines&quot;)) + labs(x= &quot;Sample name&quot;, y = &quot;relative abundance&quot;) + guides(fill=guide_legend(ncol=8)) #Save plot ggsave(plot = p,filename = &quot;./figures/order_relabund_facet_buffer.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 200, width = 300, dpi=300) 3.3.1 Percentage of Bacteroides and Firmicutes #Load in relative abundance phyloseq load(&quot;./data/physeq_relabund&quot;) #Aggregate taxa to order physeq_phylum_relabund &lt;- aggregate_taxa(physeq_relabund, &#39;Phylum&#39;) #Extract abundance table df &lt;- abundances(physeq_phylum_relabund) #Create vector of relabund of bact and Firm added Bac_firm_vec &lt;- df[&quot;Bacteroidetes&quot;,] + df[&quot;Firmicutes&quot;,] samples &lt;- names(Bac_firm_vec[Bac_firm_vec &lt; 0.5]) metadf &lt;- as.data.frame(meta(physeq_phylum_relabund)) meta_samples &lt;- metadf[metadf$Sample_name %in% samples,] 3.4 Figure 3C #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #Produce plot p &lt;- plot_richness(physeq, x = &quot;Bufferused&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + theme(legend.position=&quot;none&quot;, axis.text.x = element_text( angle = -45, vjust = 0.5, hjust=0.1)) + labs(x= &quot;Buffer used&quot;, y = &quot;Measure&quot;) #Save plot ggsave(plot = p, filename = &quot;./figures/alpha_diversity_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 80, width = 200) "],["04-Figure_4.html", "Chapter 4 Figure 4 4.1 Libraries 4.2 Genus", " Chapter 4 Figure 4 Biomarkers heatmap. Heatmap showing the genera (y-axis) with significant associations discovered by Maaslin2. Comparisons were carried out using the type of buffer used and the storage conditions metadata information (x-axis). Storage condition included Temperature (Fridge:4oC or RT:20oC) and Days stored before being frozen at -80oC (1D: One day, 3D: Three days), Baseline samples were immediately frozen at -80oC. The no buffer at Baseline:–80oC group was used as the reference. Participant numbers were used for random effects for the model. Values on heatmap are (-log(qval)*sign(coeff)). 4.1 Libraries library(&quot;phyloseq&quot;) library(&quot;Maaslin2&quot;) library(&quot;microbiome&quot;) library(&quot;ggh4x&quot;) 4.2 Genus 4.2.1 Preprocess table and convert to genus table #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) sample_data(physeq) #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Create #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #transform to relabund physeq_relabund &lt;- abundances(physeq, &quot;compositional&quot;) # Get data into maaslin format #### #First need df of relabund df_data &lt;- t(as.data.frame(otu_table(physeq_relabund, taxa_are_rows=TRUE))) #next metadata #the nonsense is so it becomes a normal df #rather than a weird phyloseq object within a df df_metadata &lt;- as.data.frame(t(t(as.data.frame(sample_data(physeq))))) #keep only columns of interest df_metadata &lt;- df_metadata[,c(2,5,10,11,12,13)] #convert some columns to numeric df_metadata$Storagetemp &lt;- as.numeric(df_metadata$Storagetemp) df_metadata$DaysstoredpriortoDNAextraction &lt;- as.numeric(df_metadata$DaysstoredpriortoDNAextraction) df_metadata$DNAconcng_ul &lt;- as.numeric(df_metadata$DNAconcng_ul) #remvo phyloseq object rm(physeq) rm(physeq_relabund) #Edit metadata df_metadata$Bufferused_and_Storageconditions &lt;- paste0(df_metadata$Bufferused, &quot;_&quot;, df_metadata$Storageconditions) #Remove unwanted metadata columns df_metadata &lt;- df_metadata[,c(1,5,7)] #Convert all columns to factors columns df_metadata[] &lt;- lapply( df_metadata, factor) #Save objects save(df_data, file = &quot;./data/maaslin_genus_df&quot;) save(df_metadata, file = &quot;./data/maaslin_genus_metadata&quot;) 4.2.2 MaAsLin2 on genera #Remove Days stored info df_metadata &lt;- df_metadata[,c(1,3)] #fit data fit_data &lt;- Maaslin2::Maaslin2(input_data = df_data, input_metadata = df_metadata, output = &quot;standard_maaslin2_genus&quot;, #Random sample used for subject/patients random_effects = &quot;Patientnumber&quot;, reference = c(&quot;Bufferused_and_Storageconditions&quot;, &quot;No buffer_-80&quot;) ) #Create heatmap of significant results #Read in data df &lt;- read.csv( file = &quot;./standard_maaslin2_genus/significant_results.tsv&quot;, sep = &quot;\\t&quot;, check.names=FALSE) #Create (-log(qval)*sign(coeff)) column for value df$val &lt;- (-log(df$qval)*sign(df$coef)) #Create min and max val lo &lt;- floor(min(df$val)) up &lt;- ceiling(max(df$val)) mid &lt;- 0 #Change -80 to Baseline df$value &lt;- gsub(pattern = &quot;_-80&quot;, replacement = &quot;_Baseline&quot;, df$value) #Create rounded value for text df$val_round &lt;- round(df$val, digits = 2) #heatmap heatmap_media &lt;- ggplot(df, aes(x = value, y = feature, fill = val)) + #Produce ggplot as tile/heatmap style plot ggplot2::geom_tile(colour = &quot;black&quot;) + #Customise colour gradient ggplot2::scale_fill_gradient2(low = &quot;blue&quot;, high = &quot;red&quot;, mid = &quot;white&quot;, na.value = &quot;white&quot;, midpoint = mid, limit = c(lo,up)) + #Add the values as text in the cells ggplot2::geom_text(aes(value, feature, label = val_round), colour = &quot;black&quot;, size = 4) + #Remove the x and y labels (NULL) and add a title ggplot2::labs(x = NULL, y = NULL, title = &quot;Features with significant associations (-log(qval))&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) ggsave(filename = &quot;./figures/maaslin2_heatmap_genus.png&quot;, plot = heatmap_media, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, height = 200, width = 300) "],["05-Figure_5.html", "Chapter 5 Figure 5 5.1 libraries 5.2 Preprocess data 5.3 Colour blindy friendly palettes 5.4 A Heatmap 5.5 B &amp; C 5.6 Without ethanol", " Chapter 5 Figure 5 GC-MS derived SCFA profiles in study samples. (A) Relative abundance of SCFAs in study samples faceted based on the type of buffer used (Ethanol, No buffer, PSP buffer, or RNAlater). (B) Bray-Curtis based principal component analysis (PCoA) of stool SCFA composition (set to even sampling depth of 1000) stratified by participant and storage temperature (Baseline:–80oC, Fridge:4oC or RT:20oC). Bottom plots are zoomed in sections to display clustering without outliers. (C) Bray-Curtis based PCoA excluding ethanol samples of stool SCFA composition (set to even sampling depth of 1000) stratified by storage time and temperature (Baseline:–80oC, Fridge:4oC or RT:20oC). 5.1 libraries library(&quot;ggplot2&quot;) library(&quot;phyloseq&quot;) library(&quot;tidyverse&quot;) library(&quot;dplyr&quot;) library(&quot;vegan&quot;) library(&quot;reshape2&quot;) library(&quot;ggplot2&quot;) library(&quot;ggh4x&quot;) library(&quot;patchwork&quot;) library(&quot;ggforce&quot;) library(&quot;ggpubr&quot;) 5.2 Preprocess data #Load phyloseq load(file = &quot;data/lipid_physeq_object&quot;) #Set to even sampling depth #Set to even sampling depth (1000) physeq_1k = transform_sample_counts(physeq, function(x) 1000 * x/sum(x)) #save physeq object save(physeq_1k, file = &quot;./data/lipid_physeq_1k_object&quot;) 5.3 Colour blindy friendly palettes tol_pal &lt;- c(&quot;#4477AA&quot;,&quot;#66CCEE&quot;,&quot;#228833&quot;,&quot;#CCBB44&quot;,&quot;#EE6677&quot;,&quot;#AA3377&quot;) 5.4 A Heatmap #Choose order for temp #sample_data(physeq_1k)[,&quot;Temp&quot;] &lt;- factor(sample_data(physeq_1k)[,&quot;Temp&quot;], levels = c(&quot;Baseline&quot;, &quot;RT&quot;, &quot;Fridge&quot;)) #Make relative abundance physeq physeq_relabund &lt;- microbiome::transform(physeq, &quot;compositional&quot;) #Heatmap heatmap_facet &lt;- plot_heatmap(physeq_relabund, sample.label = &quot;Sample_name&quot;, taxa.label = &quot;Compound&quot;) + facet_nested( ~ Buffer.type + Storage.time + Temp , scales = &quot;free_x&quot;) + theme(panel.spacing.x=unit(0, &quot;lines&quot;)) + theme(axis.text.x = element_text(size=6)) ggsave(plot = heatmap_facet, filename = &quot;figures/lipid_heatmap.png&quot;, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, width = 300, height = 100) 5.5 B &amp; C #PCoA bray curtis ordination physeq_1k_ord_pcoa_bray &lt;- ordinate(physeq_1k, &quot;PCoA&quot;, &quot;bray&quot;) 5.5.1 B PCoA plot All sample PCoA to show clustering by buffer #NMDS_bray facetted by Buffer.type.Temp, shape by sample NMDS_bray_facet &lt;- plot_ordination(physeq_1k, physeq_1k_ord_pcoa_bray, color = &quot;Buffer.type&quot;) + scale_color_manual(values=tol_pal) + labs(colour=&quot;Bufferused&quot;) + theme(legend.position=&quot;bottom&quot;) + guides(color = guide_legend(nrow=2)) + facet_zoom(xlim = c(-0.18,-0.10), ylim=c(-0.125,0.2), horizontal = FALSE) ggsave(NMDS_bray_facet, filename = &quot;./figures/Lipids_PCoA_bray_curtis_colour_by_buffer.png&quot;, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, width = 100, height = 200) 5.5.2 C PCoA plot Plot without ethanol 5.6 Without ethanol #subset physeq to remove ethanol physeq_1k_no_ethanol &lt;- phyloseq::subset_samples(physeq_1k, Buffer.type %in% c(&quot;No buffer&quot;,&quot;PSP&quot;,&quot;RNAlater&quot;)) #NMDs bray curtis physeq_1k_ord_pcoa_bray_no_ethanol &lt;- ordinate(physeq_1k_no_ethanol, &quot;PCoA&quot;, &quot;bray&quot;) No ethanol colour by participant and shape by buffer #NMDS_bray facetted by Buffer.type.Temp, shape by sample NMDS_bray_facet &lt;- plot_ordination(physeq_1k_no_ethanol, physeq_1k_ord_pcoa_bray_no_ethanol, color = &quot;Sample.number&quot;, shape = &quot;Buffer.type&quot;) + geom_point(size=3) + scale_color_manual(values=tol_pal) + labs(colour=&quot;Participant number&quot;, shape=&quot;Bufferused&quot;) + theme(legend.position=&quot;bottom&quot;) ggsave(NMDS_bray_facet, filename = &quot;./figures/Lipids_PCoA_bray_curtis_colour_by_participant_shape_by_buffer_no_ethanol.png&quot;, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, width = 200, height = 200) "],["06-Figure_6.html", "Chapter 6 Figure 6 6.1 Libraries 6.2 Preprocess tables 6.3 All buffers", " Chapter 6 Figure 6 Correlation of bacterial genera with SCFA metabolites. Spearman’s correlation was carried out on all the samples with matching ASV (≥4,528 reads) and SCFA data. Relative abundance values of SCFAs and genera were used for correlation. Only genera with significant correlations are displayed (adjusted p-value (fdr) &lt;0.05), all correlation values between the SCFAs and these genera are displayed. The y-axis represents the SCFA metabolites. The x-axis represents the genera of bacteria (based on 16S rRNA gene sequences). Red and blue indicate positive and negative correlation, respectively. Created with assistance of tutorial: https://microbiome.github.io/tutorials/Heatmap.html 6.1 Libraries library(microbiome) library(phyloseq) library(dplyr) library(reshape2) library(DT) library(funrar) 6.2 Preprocess tables #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Subset samples to remove samples with NA lipid info physeq &lt;- subset_samples(physeq, !(Formate.MM. == &quot;NA&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #COnvert to relative abundance physeq_relabund &lt;- microbiome::transform(physeq, &quot;compositional&quot;) #Extract genus table to a df genus_df &lt;- as.matrix(otu_table(physeq_relabund)) #transpose genus_df_t &lt;- as.matrix(t(genus_df)) #log10 the values #genus_df_t_log10 &lt;- log10(genus_df_t) #extract lipid table lipid_mat &lt;- as.matrix(meta(physeq)[,grepl(&quot;.MM.&quot;,colnames(meta(physeq)))]) #remove .MM. from colnames colnames(lipid_mat) &lt;- gsub(pattern = &quot;.MM.&quot;, replacement = &quot;&quot;, colnames(lipid_mat)) #Remove &quot;_b&quot; from sample names row.names(lipid_mat) &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;, row.names(lipid_mat)) row.names(genus_df_t) &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;, row.names(genus_df_t)) #Convert to relative abundance values lipid_mat_relabund &lt;- make_relative(lipid_mat) #Save object save(genus_df_t, file = &quot;./data/16s_and_lipid_genus_physeq&quot;) save(lipid_mat_relabund, file = &quot;./data/lipid_relabund_matrix&quot;) 6.3 All buffers 6.3.1 Correlation #load in phyloseq object load(&quot;./data/16s_and_lipid_genus_physeq&quot;) load(&quot;./data/lipid_relabund_matrix&quot;) #Correlation correlation.table &lt;- associate( genus_df_t, lipid_mat_relabund, method = &quot;spearman&quot;, mode = &quot;table&quot;, p.adj.threshold = 0.05, n.signif = 1) #Add column names colnames(correlation.table)[1:2] &lt;- c(&quot;Genus&quot;,&quot;Lipid&quot;) #Write table with significant hits to file write.table(correlation.table[correlation.table$p.adj &lt; 0.05,], file = &quot;./data/Genus_lipid_sig_correlation.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Create wide table of sig correlations long_df &lt;- correlation.table[correlation.table$p.adj &lt; 0.05,] #Remove p.adj value long_df &lt;- long_df[,-4] #long to wide wide_df &lt;- dcast(long_df, Genus ~ Lipid, value.var = &quot;Correlation&quot;) #Write to file write.table(wide_df, file = &quot;./data/Genus_lipid_sig_correlation_wide.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) 6.3.2 Heatmap theme_set(theme_bw(20)) df &lt;- correlation.table p &lt;- ggplot(df, aes(Genus, Lipid, group=Lipid)) p &lt;- p + geom_tile(aes(fill = Correlation)) p &lt;- p + geom_text(aes(label = round(df$Correlation, 1)), size = 5) p &lt;- p + scale_fill_gradientn(&quot;Correlation&quot;, breaks = seq(from = -1, to = 1, by = 0.25), colours = c(&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;), limits = c(-1, 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5), legend.text=element_text(size=10)) + labs(x = &quot;&quot;, y = &quot;&quot;) + coord_flip() ggsave(plot = p, filename = &quot;./figures/Genus_lipid_corr_heatmap.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 400, width = 300, dpi = 300) "],["07-Supp_fig_1.html", "Chapter 7 Supp figure 1 7.1 Libraries 7.2 Rarefactipon plot", " Chapter 7 Supp figure 1 Rarefaction curves based on ASVs observed. This only contains samples and ASVs that were retained after all filtering. 7.1 Libraries #libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) library(&quot;vegan&quot;) library(microViz) 7.2 Rarefactipon plot Create rarefaction plot #Load phyloseq load(&quot;./data/physeq&quot;) load(&quot;./data/physeq_relabund&quot;) #Get ASVs and samples kept in the processed relabund table samples &lt;- colnames(otu_table(physeq_relabund)) ASVs_to_keep &lt;- row.names(otu_table(physeq_relabund)) ASVs &lt;- row.names(tax_table(physeq)) ASVs_to_remove &lt;- setdiff(ASVs, ASVs_to_keep) subset_physeq &lt;- microbiome::remove_taxa(x = physeq, ASVs_to_remove) subset_physeq_2 &lt;- phyloseq::prune_samples(samples, subset_physeq) nrow(sample_data(subset_physeq_2)) save(subset_physeq_2, file = &quot;./data/physeq_for_rarefaction&quot;) load(file=&quot;./data/physeq_for_rarefaction&quot;) asv_abund_df &lt;- as.data.frame(t(phyloseq::otu_table(subset_physeq_2))) png(filename = &quot;./figures/rarefaction_plot.png&quot;, res = 300, units = &quot;mm&quot;, height = 200, width = 300) rarecurve(x = asv_abund_df, step=100, lwd=1, ylab=&quot;ASVs&quot;, label=F, xlim=c(0, 100000)) dev.off() "],["08-Supp_fig_2.html", "Chapter 8 Supp figure 2 8.1 Libraries 8.2 Weighted unifrac plots with relative abundance", " Chapter 8 Supp figure 2 Principal component analysis (PCoA) of stool microbiota composition presented per participant (1–6). Data was stratified based on (A) buffer used, (B) storage temperature, (C) storage condition, and (D) dual stratification by buffer used and storage condition. Analysis was undertaken using species-level classification data after ASV-based analysis. 8.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) 8.2 Weighted unifrac plots with relative abundance Create the ordination data ## Warning in matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE, : data length [7917] ## is not a sub-multiple or multiple of the number of rows [3959] 8.2.1 Figure A: Buffer used faceted by patient p &lt;- plot_ordination(physeq, ord, color=&quot;Bufferused&quot;) + geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;)+ scale_color_manual(values=tol_pal) ggsave(plot = p, &quot;./figures/weighted_unifrac_Bufferused_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.2 Figure B: Storage temperature p &lt;- plot_ordination(physeq, ord, color=&quot;Storagetempcategory&quot;)+ geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;) + labs(color=&#39;Storagetemp&#39;) + scale_color_manual(values=tol_pal) ggsave(plot = p, &quot;./figures/weighted_unifrac_Storagetemp_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.3 Figure C: Storage conditions p &lt;- plot_ordination(physeq, ord, color=&quot;Storageconditions&quot;) + geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;)+ scale_color_manual(values=tol_pal) ggsave(plot = p, &quot;./figures/weighted_unifrac_Storageconditions_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) 8.2.4 Figure D: Buffer and storage condition faceted by patient p &lt;- plot_ordination(physeq, ord, color=&quot;Storageconditions&quot;, shape = &quot;Bufferused&quot;)+ geom_point(size=3) + facet_wrap(~Patientnumber, nrow = 1, scales = &quot;free&quot;) + theme(legend.position=&quot;bottom&quot;)+ scale_color_manual(values=tol_pal) ggsave(plot = p, &quot;./figures/weighted_unifrac_Bufferused_and_Storageconditions_facet_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 400) "],["09-Supp_fig_3.html", "Chapter 9 Supp figure 3 9.1 Libraries 9.2 16S composition", " Chapter 9 Supp figure 3 Violin plots testing the effect of metadata categories on the 16S beta diversity (Weighted unifrac) paired distances between samples. (A) Displays distances within effect groups (Bufferused, Participant number, Storagedays, and Storagetemp). Paired distances between samples which only differed by the specified effect on the x-axis are included. (B) Displays paired distances between the specified buffer comparisons. Only paired distances between samples with identical Participant number, Storagedays, and Storagetemp are included. 9.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #library(&quot;plotly&quot;) library(&quot;tidyverse&quot;) library(&quot;ggforce&quot;) library(&quot;ggh4x&quot;) library(&quot;patchwork&quot;) library(&quot;rbiom&quot;) 9.2 16S composition Carrying out inter distance divergence We want one boxplot showing difference caused by different factors Temp Buffer Participant Storage days For Temp we get all identical paired samples that only differ by temp to get those paired distances. We then produce a boxplot from this. We can then compare this bxoplot to the buffer one, participant one, and storage days one in one plot with boxes. 9.2.1 Table of all paired distances #Load rarefied data created for figure 2A load(&quot;./data/preproces_physeq_even_depth30k&quot;) #Calculate weighted Unifrac values wunifrac_df &lt;- as.matrix(rbiom::unifrac(biom = microbiome::abundances(physeq), weighted=TRUE, tree = phyloseq::phy_tree(physeq))) #Convert doubled distance values and same comparisons to NAs #Loop through columns starting at the 2nd r &lt;- 1 for (r in 1:nrow(wunifrac_df)) { wunifrac_df[r,r:ncol(wunifrac_df)] &lt;- NA } #Get a metdata dataframe with: # Sample name, Temp, Buffer, Paricipant, and storage days metadf &lt;- as.data.frame(sample_data(physeq)) columns_of_interest &lt;- c(&quot;Sample_name&quot;, &quot;Patientnumber&quot;,&quot;Bufferused&quot;, &quot;Storagetemp&quot;,&quot;DaysstoredpriortoDNAextraction&quot;) metadf &lt;- metadf[,columns_of_interest] #Change some of the metadata values metadf$Storagetemp &lt;- gsub(x = metadf$Storagetemp, pattern = &quot;-80&quot; , replacement = &quot;Baseline&quot;) metadf$Storagetemp &lt;- gsub(x = metadf$Storagetemp, pattern = &quot;4&quot; , replacement = &quot;Fridge&quot;) metadf$Storagetemp &lt;- gsub(x = metadf$Storagetemp, pattern = &quot;20&quot; , replacement = &quot;RT&quot;) metadf$DaysstoredpriortoDNAextraction &lt;- gsub(x = metadf$DaysstoredpriortoDNAextraction, pattern = &quot;1&quot; , replacement = &quot;1D&quot;) metadf$DaysstoredpriortoDNAextraction &lt;- gsub(x = metadf$DaysstoredpriortoDNAextraction, pattern = &quot;3&quot; , replacement = &quot;3D&quot;) metadf[metadf$Storagetemp == &quot;Baseline&quot;,&quot;DaysstoredpriortoDNAextraction&quot;] &lt;- &quot;Baseline&quot; #Combine metadata and distance matrix #Ensure the row order is the same #identical(row.names(metadf), row.names(wunifrac_df)) #rbind wunifrac_metadata_df &lt;- cbind(metadf, wunifrac_df) #Convert to long wunifrac_long_df &lt;- tidyr::pivot_longer(data = wunifrac_metadata_df, #longify the distance values by using the #col names of the distance df cols = colnames(wunifrac_df), names_to = &quot;Sample_name_comp&quot;, values_to = &quot;dist&quot;) #Change sample names of comp_samples names to remove _.* wunifrac_long_df$Sample_name_comp &lt;- gsub(x = wunifrac_long_df$Sample_name_comp, pattern = &quot;_.*&quot;, replacement = &quot;&quot;) #Remove rows where dist is NA #Identical sample comparisons and duplicated sample comparisons wunifrac_long_df &lt;- na.omit(wunifrac_long_df) #Remove rows where the samples are identical wunifrac_long_df &lt;- wunifrac_long_df[wunifrac_long_df$Sample_name != wunifrac_long_df$Sample_name_comp,] #Add metadata for comparison sample wunifrac_long_df$Patientnumber_comp &lt;- as.vector(unlist(metadf[wunifrac_long_df$Sample_name_comp,&quot;Patientnumber&quot;])) wunifrac_long_df$Bufferused_comp &lt;- as.vector(unlist(metadf[wunifrac_long_df$Sample_name_comp,&quot;Bufferused&quot;])) wunifrac_long_df$Storagetemp_comp &lt;- as.vector(unlist(metadf[wunifrac_long_df$Sample_name_comp,&quot;Storagetemp&quot;])) wunifrac_long_df$DaysstoredpriortoDNAextraction_comp &lt;- as.vector(unlist(metadf[wunifrac_long_df$Sample_name_comp,&quot;DaysstoredpriortoDNAextraction&quot;])) #Move dist to end row wunifrac_long_df$wunifrac &lt;- wunifrac_long_df$dist wunifrac_long_df &lt;- subset(wunifrac_long_df, select = -dist) #Remove unneeded objects rm(physeq, wunifrac_metadata_df) 9.2.2 Extract the paired distances We will end up with a data frame with the following columns Distance (wunifrac) Effect (temp, buffer, etc.) Comparison (e.g. Baseline_RT) Sample pair (A1_B1) #Create an empty dataframe first dist_df_long &lt;- as.data.frame(matrix(data = NA, ncol = 4, nrow = 0)) colnames(dist_df_long) &lt;- c(&quot;wunifrac&quot;, &quot;effect&quot;, &quot;comparison&quot;,&quot;sample_pair&quot;) #First for participant participant_df &lt;- wunifrac_long_df #create new columns of combined buffer, temp, and days for ease participant_df$buffer_temp_days &lt;- paste0(participant_df$Bufferused, &quot;_&quot;, participant_df$Storagetemp, &quot;_&quot;, participant_df$DaysstoredpriortoDNAextraction) participant_df$buffer_temp_days_comp &lt;- paste0(participant_df$Bufferused_comp, &quot;_&quot;, participant_df$Storagetemp_comp, &quot;_&quot;, participant_df$DaysstoredpriortoDNAextraction_comp) #Keep only rows where these 2 created rows are identical participant_df &lt;- participant_df[ participant_df$buffer_temp_days == participant_df$buffer_temp_days_comp,] #Add effects column participant_df$effect &lt;- &quot;Participant number&quot; #Add comparison column participant_df$comparison &lt;- paste0(participant_df$Patientnumber, &quot;_&quot;, participant_df$Patientnumber_comp) #Add pairs column participant_df$sample_pair &lt;- paste0(participant_df$Sample_name, &quot;_&quot;, participant_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- participant_df[,c(&quot;wunifrac&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Second is Buffer buffer_df &lt;- wunifrac_long_df #create new columns of combined participant, temp, and days for ease buffer_df$participant_temp_days &lt;- paste0(buffer_df$Patientnumber, &quot;_&quot;, buffer_df$Storagetemp, &quot;_&quot;, buffer_df$DaysstoredpriortoDNAextraction) buffer_df$participant_temp_days_comp &lt;- paste0(buffer_df$Patientnumber_comp, &quot;_&quot;, buffer_df$Storagetemp_comp, &quot;_&quot;, buffer_df$DaysstoredpriortoDNAextraction_comp) #Keep only rows where these 2 created rows are identical buffer_df &lt;- buffer_df[ buffer_df$participant_temp_days == buffer_df$participant_temp_days_comp,] #Add effects column buffer_df$effect &lt;- &quot;Bufferused&quot; #Add comparison column buffer_df$comparison &lt;- paste0(buffer_df$Bufferused, &quot;_&quot;, buffer_df$Bufferused_comp) #Add pairs column buffer_df$sample_pair &lt;- paste0(buffer_df$Sample_name, &quot;_&quot;, buffer_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- buffer_df[,c(&quot;wunifrac&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Third is Storagetemp temp_df &lt;- wunifrac_long_df #create new columns of combined participant, buffer, and days for ease temp_df$participant_buffer_days &lt;- paste0(temp_df$Patientnumber, &quot;_&quot;, temp_df$Bufferused, &quot;_&quot;, temp_df$DaysstoredpriortoDNAextraction) temp_df$participant_buffer_days_comp &lt;- paste0(temp_df$Patientnumber_comp, &quot;_&quot;, temp_df$Bufferused_comp, &quot;_&quot;, temp_df$DaysstoredpriortoDNAextraction_comp) #Keep only rows where these 2 created rows are identical temp_df &lt;- temp_df[ temp_df$participant_buffer_days == temp_df$participant_buffer_days_comp,] #Add effects column temp_df$effect &lt;- &quot;Storagetemp&quot; #Add comparison column temp_df$comparison &lt;- paste0(temp_df$Storagetemp, &quot;_&quot;, temp_df$Storagetemp_comp) #Add pairs column temp_df$sample_pair &lt;- paste0(temp_df$Sample_name, &quot;_&quot;, temp_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- temp_df[,c(&quot;wunifrac&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Fourth is Storagedays days_df &lt;- wunifrac_long_df #create new columns of combined participant, buffer, and temp for ease days_df$participant_buffer_temp &lt;- paste0(days_df$Patientnumber, &quot;_&quot;, days_df$Bufferused, &quot;_&quot;, days_df$Storagetemp) days_df$participant_buffer_days_temp &lt;- paste0(days_df$Patientnumber_comp, &quot;_&quot;, days_df$Bufferused_comp, &quot;_&quot;, days_df$Storagetemp_comp) #Keep only rows where these 2 created rows are identical days_df &lt;- days_df[ days_df$participant_buffer_temp == days_df$participant_buffer_days_temp,] #Add effects column days_df$effect &lt;- &quot;Storagedays&quot; #Add comparison column days_df$comparison &lt;- paste0(days_df$DaysstoredpriortoDNAextraction, &quot;_&quot;, days_df$DaysstoredpriortoDNAextraction_comp) #Add pairs column days_df$sample_pair &lt;- paste0(days_df$Sample_name, &quot;_&quot;, days_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- days_df[,c(&quot;wunifrac&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Remove unwanted objects rm(wunifrac_long_df, participant_df, buffer_df, temp_df, days_df, tmp_dist_df) #Create violin plot alpha_violin &lt;- ggplot(dist_df_long, aes(y = wunifrac, x = effect)) + ggplot2::geom_violin() + ggforce::geom_sina(alpha=0.5) + labs(x = &quot;Effect&quot;, y = &quot;Weighted unifrac distance&quot;) 9.2.3 Buffer deep dive Here we want to look at the differences between the buffers. We want boxplots with the same values as the above one but separated by the comparison e.g. No buffer vs Ethanol No buffer vs PSP etc. #Subset our data to only contian the buffer effect info buffer_dist_df_long &lt;- dist_df_long[dist_df_long$effect == &quot;Bufferused&quot;, ] #Change names and order of levels buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;Ethanol_No buffer&quot;, replacement = &quot;No buffer &amp; Ethanol&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;Ethanol_PSP&quot;, replacement = &quot;Ethanol &amp; PSP&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;Ethanol_RNAlater&quot;, replacement = &quot;Ethanol &amp; RNAlater&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;PSP_No buffer&quot;, replacement = &quot;No buffer &amp; PSP&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;RNAlater_No buffer&quot;, replacement = &quot;No buffer &amp; RNAlater&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;RNAlater_PSP&quot;, replacement = &quot;PSP &amp; RNAlater&quot;, x = buffer_dist_df_long$comparison) #Change to factor and reorder buffer_dist_df_long$comparison &lt;- factor(buffer_dist_df_long$comparison, levels = c(&quot;No buffer &amp; Ethanol&quot;, &quot;No buffer &amp; PSP&quot;, &quot;No buffer &amp; RNAlater&quot;, &quot;Ethanol &amp; PSP&quot;, &quot;Ethanol &amp; RNAlater&quot;, &quot;PSP &amp; RNAlater&quot;)) #Create violin plot buffer_alpha_violin &lt;- ggplot(buffer_dist_df_long, aes(y = wunifrac, x = comparison)) + ggplot2::geom_violin() + ggforce::geom_sina(alpha=0.5) + labs(x = &quot;Bufferused comparison&quot;, y = &quot;Weighted unifrac distance&quot;) 9.2.4 Combined plot Combine the 2 plots into one figure combined_alpha_violin &lt;- alpha_violin / buffer_alpha_violin ggsave(filename = &quot;./figures/16s_beta_intergroup_divergence_violin_plots.png&quot;, plot = combined_alpha_violin, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, height = 250, width = 250) "],["10-Supp_fig_4.html", "Chapter 10 Supp figure 4 10.1 Libraries 10.2 Alpha diveristy plots", " Chapter 10 Supp figure 4 Alpha diversity (observed species, chao1 and Shannon) of the 16S ASV based microbiota data of stool samples stratified by (A) storage condition, (B) patient, (C) storage temperature, (D) dual stratification by buffer used and storage condition, (E) dual stratification by patient number and buffer used, and (F) dual stratification by patient number and storage condition. 10.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) library(&quot;ggforce&quot;) Change some metadata categories #Change -80 to baseline in storage conditions sample_data(physeq)[,&quot;Storageconditions&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storageconditions&quot;])) ) #Storage temp change to categorical names sample_data(physeq)[,&quot;Storagetemp&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storagetemp&quot;])) ) sample_data(physeq)[,&quot;Storagetemp&quot;] &lt;- gsub( pattern = &quot;4&quot;, replacement = &quot;Fridge&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storagetemp&quot;])) ) sample_data(physeq)[,&quot;Storagetemp&quot;] &lt;- gsub( pattern = &quot;20&quot;, replacement = &quot;RT&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storagetemp&quot;])) ) #Bufferused_and_Storageconditions change to categorical names sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;])) ) sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- gsub( pattern = &quot;4&quot;, replacement = &quot;Fridge&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;])) ) sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- gsub( pattern = &quot;20&quot;, replacement = &quot;RT&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;])) ) 10.2 Alpha diveristy plots 10.2.1 A: Storage conditions p &lt;- plot_richness(physeq, x = &quot;Storageconditions&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Storageconditions.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 150) 10.2.2 B: Participant number p &lt;- plot_richness(physeq, x = &quot;Patientnumber&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + xlab(&quot;Participant number&quot;) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_patient.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 150) 10.2.3 C: Storage temp p &lt;- plot_richness(physeq, x = &quot;Storagetemp&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Storagetemp.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 150) 10.2.4 D: Buffer and storage p &lt;- plot_richness(physeq, x = &quot;Bufferused_and_Storageconditions&quot;, color=&quot;Bufferused_and_Storageconditions&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + theme(legend.position=&quot;none&quot;) + xlab(&quot;Bufferused and Storageconditions&quot;) # geom_point(size = 3) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Bufferused_and_Storageconditions.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 150, width = 450) 10.2.5 E: Buffer and participant #Create buffer and participant metadata column sample_data(physeq)[,&quot;Patientnumber_and_Bufferused&quot;] &lt;- paste0(unlist(sample_data(physeq)[,&quot;Patientnumber&quot;]), &quot;_&quot;, unlist(sample_data(physeq)[,&quot;Bufferused&quot;])) #plot p &lt;- plot_richness(physeq, x = &quot;Patientnumber_and_Bufferused&quot;, color=&quot;Patientnumber_and_Bufferused&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + theme(legend.position=&quot;none&quot;) + xlab(&quot;Participant number and Bufferused&quot;) # geom_point(size = 3) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Bufferused_and_Patient_number.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 200) 10.2.6 F: storage condition and participant #Create buffer and participant metadata column sample_data(physeq)[,&quot;Patientnumber_and_Storageconditions&quot;] &lt;- paste0(unlist(sample_data(physeq)[,&quot;Patientnumber&quot;]), &quot;_&quot;, unlist(sample_data(physeq)[,&quot;Storageconditions&quot;])) #plot p &lt;- plot_richness(physeq, x = &quot;Patientnumber_and_Storageconditions&quot;, color=&quot;Patientnumber_and_Storageconditions&quot;, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) + geom_violin() + ggforce::geom_sina(alpha=0.5) + theme(legend.position=&quot;none&quot;) + xlab(&quot;Participant number and Storageconditions&quot;) # geom_point(size = 3) ggsave(plot = p, filename = &quot;./figures/alpha_diversity_Storageconditions_and_Patient_number.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 100, width = 250) "],["11-Supp_fig_5.html", "Chapter 11 Supp figure 5 11.1 Libraries 11.2 Barchart of Genera biomarkers", " Chapter 11 Supp figure 5 Bar charts of the relative abundance of genera were found to be significant biomarkers for buffer used and storage conditions. 11.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #library(&quot;plotly&quot;) library(&quot;tidyverse&quot;) library(&quot;ggforce&quot;) library(&quot;ggh4x&quot;) 11.2 Barchart of Genera biomarkers #Read in sig table (p-value &lt;0.05) df &lt;- read.csv( file = &quot;./standard_maaslin2_genus/significant_results.tsv&quot;, sep = &quot;\\t&quot;, check.names=FALSE) #Get all unique genera genera_biomarkers &lt;- unique(df$feature) #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Remove unwanted [] in genus names #tax_table(physeq)[,&quot;Genus&quot;] &lt;- gsub(pattern = &quot;\\\\[&quot; , replacement = &quot;&quot;, tax_table(physeq)[,&quot;Genus&quot;]) #tax_table(physeq)[,&quot;Genus&quot;] &lt;- gsub(pattern = &quot;\\\\]&quot; , replacement = &quot;&quot;, tax_table(physeq)[,&quot;Genus&quot;]) #Remove all info above genus #This is so the aggregate works below tax_table(physeq)[,&quot;Phylum&quot;] &lt;- NA tax_table(physeq)[,&quot;Class&quot;] &lt;- NA tax_table(physeq)[,&quot;Order&quot;] &lt;- NA tax_table(physeq)[,&quot;Family&quot;] &lt;- NA #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #Convert taxa names (row names) to genus row.names(tax_table(physeq)) &lt;- tax_table(physeq)[,&quot;Genus&quot;] #transform to relabund physeq_relabund &lt;- microbiome::transform(physeq, &quot;compositional&quot;) #Filter physeq to only contain biomarker genera #Select non biomarker genera biomarker_genera_physeq &lt;- prune_taxa(sort(genera_biomarkers),physeq_relabund) #Attempt to create a better colour palette #https://carbondesignsystem.com/data-visualization/color-palettes/ col_pal &lt;- c(&quot;#6929c4&quot;, &quot;#1192e8&quot;, &quot;#005d5d&quot;, &quot;#9f1853&quot;,&quot;#fa4d56&quot;, &quot;#570408&quot;, &quot;#198038&quot;, &quot;#002d9c&quot;, &quot;#ee538b&quot;,&quot;#b28600&quot;, &quot;#009d9a&quot;, &quot;#012749&quot;, &quot;#8a3800&quot;, &quot;#a56eff&quot;, &quot;#8a3ffc&quot;, &quot;#33b1ff&quot;, &quot;#007d79&quot;, &quot;#ff7eb6&quot;, &quot;#fa4d56&quot;, &quot;#fff1f1&quot;, &quot;#6fdc8c&quot;, &quot;#4589ff&quot;, &quot;#d12771&quot;, &quot;#d2a106&quot;, &quot;#08bdba&quot;, &quot;#bae6ff&quot;, &quot;#ba4e00&quot;, &quot;#d4bbff&quot;) #Change -80 to baseline sample_data(biomarker_genera_physeq)[,&quot;Storageconditions&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(biomarker_genera_physeq)[,&quot;Storageconditions&quot;])) ) #Bar plots #Facet by Bufferused and storage condition p &lt;- plot_bar(biomarker_genera_physeq, x = &quot;Sample_name&quot;, fill = &quot;Genus&quot;)+ geom_bar(aes(color=Genus, fill=Genus), stat=&quot;identity&quot;, position=&quot;stack&quot;, colour=&quot;grey&quot;) + facet_nested_wrap( ~ Bufferused + Storageconditions , scales = &quot;free_x&quot;, nrow = 2 ) + scale_fill_manual(values = col_pal) + theme(panel.spacing.x=unit(0.1, &quot;lines&quot;)) + theme(legend.position=&quot;bottom&quot;) + guides(fill=guide_legend(nrow=3,byrow=TRUE)) ggsave(plot = p, filename = &quot;./figures/genus_biomarkers_relabund_facet_buffer_n_storage.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 200, width = 400) "],["12-Supp_fig_6.html", "Chapter 12 Supp figure 6 12.1 Intra group variability", " Chapter 12 Supp figure 6 Bar chart showing the divergence of samples within each participant for the SCFA relative abundance profiles. This is based on the Bray-Curtis dissimilarity metric. 12.1 Intra group variability #Packages library(microbiome) library(dplyr) library(tidyverse) library(patchwork) #Load even sampling depth physeq produced for figure 4 load(file = &quot;./data/lipid_physeq_1k_object&quot;) physeq_no_etoh &lt;- subset_samples(physeq_1k, Buffer.type != &quot;Ethanol&quot;) #Intra participant betas &lt;- list() groups &lt;- as.character(unique(meta(physeq_no_etoh)$Sample.number)) for (g in groups) { #Pick samples for this group g_physeq &lt;- subset_samples(physeq_no_etoh, Sample.number == g) #Get median abundances of the samples reference &lt;- apply(abundances(g_physeq), 1, median) #Divergence of samples b &lt;- divergence(g_physeq, reference, method = &quot;bray&quot;) betas[[g]] &lt;- b } # boxplot df &lt;- as.data.frame(unlist(betas)) s&lt;- rownames(df) si&lt;- as.data.frame(s) si&lt;- separate(si, s, into = c(&#39;Patient&#39;,&#39;sample&#39;), sep = &quot;.Sample&quot;) df1&lt;- bind_cols(df, si) p&lt;- ggplot(df1, aes(x = Patient, y = `unlist(betas)`))+ geom_boxplot() + ylab(&#39;&#39;) + xlab(&#39;Participant number&#39;) + ylab(&quot;Bray-Curtis distance&quot;) #Intra buffer betas &lt;- list() groups &lt;- as.character(unique(meta(physeq_1k)$Buffer.type)) for (g in groups) { #Pick samples for this group g_physeq &lt;- subset_samples(physeq_1k, Buffer.type == g) #Get median abundances of the samples reference &lt;- apply(abundances(g_physeq), 1, median) #Divergence of samples b &lt;- divergence(g_physeq, reference, method = &quot;bray&quot;) betas[[g]] &lt;- b } # boxplot df &lt;- as.data.frame(unlist(betas)) s&lt;- rownames(df) si&lt;- as.data.frame(s) si&lt;- separate(si, s, into = c(&#39;Patient&#39;,&#39;sample&#39;), sep = &quot;.Sample&quot;) df1&lt;- bind_cols(df, si) b&lt;- ggplot(df1, aes(x = Patient, y = `unlist(betas)`))+ geom_boxplot() + ylab(&#39;&#39;) + xlab(&#39;Bufferused&#39;) + ylab(&quot;Bray-Curtis distance&quot;) ggsave(plot = p, &quot;./figures/lipid_intra_patient_variance.png&quot;, device = &quot;png&quot;, units = &quot;mm&quot;, height = 150, width = 200) "],["13-Supp_fig_7.html", "Chapter 13 Supp figure 7 13.1 Libraries 13.2 SCFA analysis 13.3 Combine plots", " Chapter 13 Supp figure 7 Violin plots testing the effect of metadata categories on the SCFA beta diversity (Bray-Curtis) paired distances between samples. This excluded the ethanol samples. (A) Displays distances within effect groups (Bufferused, Participant number, Storagedays, and Storagetemp). Paired distances between samples which only differed by the specified effect on the x-axis are included. (B) Displays paired distances between the specified buffer comparisons. Only paired distances between samples with identical Participant number, Storagedays, and Storagetemp are included. 13.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) library(&quot;ggplot2&quot;) #library(&quot;plotly&quot;) library(&quot;tidyverse&quot;) library(&quot;ggforce&quot;) library(&quot;ggh4x&quot;) library(&quot;patchwork&quot;) library(&quot;rbiom&quot;) 13.2 SCFA analysis 13.2.1 Table of all paired distances #Load even sampling depth physeq produced for figure 4 load(&quot;./data/lipid_physeq_1k_object&quot;) #Remove ethanol samples since they are so different they add too much variance physeq_no_etoh &lt;- subset_samples(physeq_1k, Buffer.type != &quot;Ethanol&quot;) #Might want to remove ethanol samples but we will leave them in for now bray_curtis_df &lt;- as.matrix(vegan::vegdist(x = t(microbiome::abundances(physeq_no_etoh)), method = &quot;bray&quot;)) #Convert doubled distance values and same comparisons to NAs #Loop through columns starting at the 2nd r &lt;- 1 for (r in 1:nrow(bray_curtis_df)) { bray_curtis_df[r,r:ncol(bray_curtis_df)] &lt;- NA } #Extract metadata metadf &lt;- sample_data(physeq_no_etoh) #Change col and row names to sample colnames(bray_curtis_df) &lt;- metadf$Sample.name row.names(bray_curtis_df) &lt;- metadf$Sample.name #Get a metdata dataframe with: # Sample name, Temp, Buffer, Participant, and storage days columns_of_interest &lt;- c(&quot;Sample_name&quot;, &quot;Sample.number&quot;,&quot;Buffer.type&quot;, &quot;Temp.Storage.time&quot;) metadf &lt;- metadf[,columns_of_interest] #Edit #Change Sample.number to Participant number colnames(metadf)[2] &lt;- &quot;Participant number&quot; #Change buffer.type to Bufferused colnames(metadf)[3] &lt;- &quot;Bufferused&quot; #Split temp.storage.time to temp and storage time metadf$Storagetemp &lt;- gsub(pattern = &quot;\\\\|.*&quot;, replacement = &quot;&quot;, metadf$Temp.Storage.time) metadf$Storagedays &lt;- gsub(pattern = &quot;.*\\\\|&quot;, replacement = &quot;&quot;, metadf$Temp.Storage.time) #Change day to D for time metadf$Storagedays &lt;- gsub(pattern = &quot; day&quot;, replacement = &quot;D&quot;, metadf$Storagedays) #Remove temp.storage.time column metadf &lt;- subset(metadf, select = -Temp.Storage.time) #Change metadf rownames to sample names row.names(metadf) &lt;- metadf$Sample_name #Combine metadata and distance matrix #Ensure the row order is the same identical(row.names(metadf), row.names(bray_curtis_df)) #rbind bray_curtis_metadf_df &lt;- cbind(metadf, bray_curtis_df) #Convert to long bray_curtis_long_df &lt;- tidyr::pivot_longer(data = bray_curtis_metadf_df, #longify the distance values by using the #col names of the distance df cols = colnames(bray_curtis_df), names_to = &quot;Sample_name_comp&quot;, values_to = &quot;dist&quot;) # #Change sample names of comp_samples names to remove _.* # wunifrac_long_df$Sample_name_comp &lt;- gsub(x = wunifrac_long_df$Sample_name_comp, # pattern = &quot;_.*&quot;, replacement = &quot;&quot;) #Remove rows where dist is NA #Identical sample comparisons and duplicated sample comparisons bray_curtis_long_df &lt;- na.omit(bray_curtis_long_df) #Remove rows where the samples are identical bray_curtis_long_df &lt;- bray_curtis_long_df[bray_curtis_long_df$Sample_name != bray_curtis_long_df$Sample_name_comp,] #Add metadata for comparison sample bray_curtis_long_df$Participant.number_comp &lt;- as.vector(unlist(metadf[bray_curtis_long_df$Sample_name_comp,&quot;Participant.number&quot;])) bray_curtis_long_df$Bufferused_comp &lt;- as.vector(unlist(metadf[bray_curtis_long_df$Sample_name_comp,&quot;Bufferused&quot;])) bray_curtis_long_df$Storagetemp_comp &lt;- as.vector(unlist(metadf[bray_curtis_long_df$Sample_name_comp,&quot;Storagetemp&quot;])) bray_curtis_long_df$Storagedays_comp &lt;- as.vector(unlist(metadf[bray_curtis_long_df$Sample_name_comp,&quot;Storagedays&quot;])) #Move dist to end row bray_curtis_long_df$bray &lt;- bray_curtis_long_df$dist bray_curtis_long_df &lt;- subset(bray_curtis_long_df, select = -dist) #Remove unneeded objects rm(physeq_1k, bray_curtis_metadf_df) 13.2.2 Extract the paired distances We will end up with a data frame with the following columns Distance (wunifrac) Effect (temp, buffer, etc.) Comparison (e.g. Baseline_RT) Sample pair (A1_B1) #Create an empty dataframe first dist_df_long &lt;- as.data.frame(matrix(data = NA, ncol = 4, nrow = 0)) colnames(dist_df_long) &lt;- c(&quot;bray&quot;, &quot;effect&quot;, &quot;comparison&quot;,&quot;sample_pair&quot;) #First for participant participant_df &lt;- bray_curtis_long_df #create new columns of combined buffer, temp, and days for ease participant_df$buffer_temp_days &lt;- paste0(participant_df$Bufferused, &quot;_&quot;, participant_df$Storagetemp, &quot;_&quot;, participant_df$Storagedays) participant_df$buffer_temp_days_comp &lt;- paste0(participant_df$Bufferused_comp, &quot;_&quot;, participant_df$Storagetemp_comp, &quot;_&quot;, participant_df$Storagedays_comp) #Keep only rows where these 2 created rows are identical participant_df &lt;- participant_df[ participant_df$buffer_temp_days == participant_df$buffer_temp_days_comp,] #Add effects column participant_df$effect &lt;- &quot;Participant number&quot; #Add comparison column participant_df$comparison &lt;- paste0(participant_df$Participant.number, &quot;_&quot;, participant_df$Participant.number_comp) #Add pairs column participant_df$sample_pair &lt;- paste0(participant_df$Sample_name, &quot;_&quot;, participant_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- participant_df[,c(&quot;bray&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Second is Buffer buffer_df &lt;- bray_curtis_long_df #create new columns of combined participant, temp, and days for ease buffer_df$participant_temp_days &lt;- paste0(buffer_df$Participant.number, &quot;_&quot;, buffer_df$Storagetemp, &quot;_&quot;, buffer_df$Storagedays) buffer_df$participant_temp_days_comp &lt;- paste0(buffer_df$Participant.number_comp, &quot;_&quot;, buffer_df$Storagetemp_comp, &quot;_&quot;, buffer_df$Storagedays_comp) #Keep only rows where these 2 created rows are identical buffer_df &lt;- buffer_df[ buffer_df$participant_temp_days == buffer_df$participant_temp_days_comp,] #Add effects column buffer_df$effect &lt;- &quot;Bufferused&quot; #Add comparison column buffer_df$comparison &lt;- paste0(buffer_df$Bufferused, &quot;_&quot;, buffer_df$Bufferused_comp) #Add pairs column buffer_df$sample_pair &lt;- paste0(buffer_df$Sample_name, &quot;_&quot;, buffer_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- buffer_df[,c(&quot;bray&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Third is Storagetemp temp_df &lt;- bray_curtis_long_df #create new columns of combined participant, buffer, and days for ease temp_df$participant_buffer_days &lt;- paste0(temp_df$Participant.number, &quot;_&quot;, temp_df$Bufferused, &quot;_&quot;, temp_df$Storagedays) temp_df$participant_buffer_days_comp &lt;- paste0(temp_df$Participant.number_comp, &quot;_&quot;, temp_df$Bufferused_comp, &quot;_&quot;, temp_df$Storagedays_comp) #Keep only rows where these 2 created rows are identical temp_df &lt;- temp_df[ temp_df$participant_buffer_days == temp_df$participant_buffer_days_comp,] #Add effects column temp_df$effect &lt;- &quot;Storagetemp&quot; #Add comparison column temp_df$comparison &lt;- paste0(temp_df$Storagetemp, &quot;_&quot;, temp_df$Storagetemp_comp) #Add pairs column temp_df$sample_pair &lt;- paste0(temp_df$Sample_name, &quot;_&quot;, temp_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- temp_df[,c(&quot;bray&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Fourth is Storagedays days_df &lt;- bray_curtis_long_df #create new columns of combined participant, buffer, and temp for ease days_df$participant_buffer_temp &lt;- paste0(days_df$Participant.number, &quot;_&quot;, days_df$Bufferused, &quot;_&quot;, days_df$Storagetemp) days_df$participant_buffer_days_temp &lt;- paste0(days_df$Participant.number_comp, &quot;_&quot;, days_df$Bufferused_comp, &quot;_&quot;, days_df$Storagetemp_comp) #Keep only rows where these 2 created rows are identical days_df &lt;- days_df[ days_df$participant_buffer_temp == days_df$participant_buffer_days_temp,] #Add effects column days_df$effect &lt;- &quot;Storagedays&quot; #Add comparison column days_df$comparison &lt;- paste0(days_df$Storagedays, &quot;_&quot;, days_df$Storagedays_comp) #Add pairs column days_df$sample_pair &lt;- paste0(days_df$Sample_name, &quot;_&quot;, days_df$Sample_name_comp) #Create df to add to main df tmp_dist_df &lt;- days_df[,c(&quot;bray&quot;, &quot;effect&quot;, &quot;comparison&quot;, &quot;sample_pair&quot;)] #Add to dist data frame dist_df_long &lt;- rbind(dist_df_long, tmp_dist_df) #Create violin plot alpha_violin &lt;- ggplot(dist_df_long, aes(y = bray, x = effect)) + ggplot2::geom_violin() + ggforce::geom_sina(alpha=0.5) + labs(x = &quot;Effect&quot;, y = &quot;Bray-Curtis distance&quot;) 13.2.3 Buffer deep dive Here we want to look at the differences between the buffers. We want boxplots with the same values as the above one but separated by the comparison e.g. No buffer vs PSP No buffer vs RNAlater etc. #Subset our data to only contian the buffer effect info buffer_dist_df_long &lt;- dist_df_long[dist_df_long$effect == &quot;Bufferused&quot;, ] #Change names and order of levels buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;PSP_No buffer&quot;, replacement = &quot;No buffer &amp; PSP&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;RNAlater_No buffer&quot;, replacement = &quot;No buffer &amp; RNAlater&quot;, x = buffer_dist_df_long$comparison) buffer_dist_df_long$comparison &lt;- gsub(pattern = &quot;RNAlater_PSP&quot;, replacement = &quot;PSP &amp; RNAlater&quot;, x = buffer_dist_df_long$comparison) #Change to factor and reorder buffer_dist_df_long$comparison &lt;- factor(buffer_dist_df_long$comparison, levels = c(&quot;No buffer &amp; PSP&quot;, &quot;No buffer &amp; RNAlater&quot;,&quot;PSP &amp; RNAlater&quot;)) #Create violin plot buffer_alpha_violin &lt;- ggplot(buffer_dist_df_long, aes(y = bray, x = comparison)) + ggplot2::geom_violin() + ggforce::geom_sina(alpha=0.5) + labs(x = &quot;Bufferused comparison&quot;, y = &quot;Bray-Curtis distance&quot;) 13.3 Combine plots Combine the 2 plots into one figure combined_alpha_violin &lt;- alpha_violin / buffer_alpha_violin ggsave(filename = &quot;./figures/SCFA_beta_intergroup_divergence_violin_plots.png&quot;, plot = combined_alpha_violin, device = &quot;png&quot;, dpi = 300, units = &quot;mm&quot;, height = 250, width = 250) "],["14-Supp_table_2.html", "Chapter 14 Supp table 2 14.1 Libraries", " Chapter 14 Supp table 2 Beta diversity plots of samples using the preprocessed rarefied abundance values. 14.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) #Will use Unifrac() &amp; adonis() function from vegan package library(vegan) library(tidyverse) 14.1.1 Statistical test #Carry out PERMANOVA test #Extract metadata meta &lt;- microbiome::meta(physeq) #Create new temp column meta$Storagetempcategory &lt;- meta$Storagetemp meta$Storagetempcategory &lt;- gsub(pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = meta$Storagetempcategory) meta$Storagetempcategory &lt;- gsub(pattern = &quot;4&quot;, replacement = &quot;Fridge&quot;, x = meta$Storagetempcategory) meta$Storagetempcategory &lt;- gsub(pattern = &quot;20&quot;, replacement = &quot;RT&quot;, x = meta$Storagetempcategory) meta$Storageconditions &lt;- paste0(meta$Storagetempcategory,&quot;_&quot;,meta$DaysstoredpriortoDNAextraction,&quot;D&quot;) #adonis doesn&#39;t have weighted unifrac distance so need to calculate it unifrac.dist &lt;- as.matrix(UniFrac(physeq, weighted = TRUE,normalized = TRUE, parallel = FALSE,fast = TRUE)) #Pairwise comparison function paiwise_function &lt;- function(dist_df, meta_df, meta_column) { #Combination cbn &lt;- combn(x = unique(meta_df[,meta_column]), m = 2) #Create empty final data frame with 4 columns # and a number of rows equal to the the number of combinations pairwise_permanova_df &lt;- as.data.frame(matrix(data = NA, nrow = ncol(cbn), ncol = 4)) #Add column names colnames(pairwise_permanova_df) &lt;- c(&quot;X&quot;,&quot;Y&quot;,&quot;p&quot;,&quot;p.adj&quot;) #Loop through the combinations for(i in 1:ncol(cbn)){ #Subset metadf to contain only our samples of interest metadf_subset &lt;- meta[meta[,meta_column]%in% cbn[,i],] #Subset distance matrix samples_subset &lt;- row.names(metadf_subset) dist.subset &lt;- dist_df[samples_subset,samples_subset] #PERMANOVA/ADONIS f &lt;- paste0(&quot;dist.subset~&quot;,meta_column) pairwise_adonis &lt;- vegan::adonis2(formula = formula(f), permutations = 999, data = metadf_subset, by = &quot;margin&quot;) #Add the group names and p-value to the main data frame pairwise_permanova_df[i,1:2] &lt;- cbn[,i] pairwise_permanova_df[i,3] &lt;- pairwise_adonis[1,&quot;Pr(&gt;F)&quot;] } #Add adjusted P-values pairwise_permanova_df$p.adj &lt;- p.adjust(pairwise_permanova_df$p, method = &quot;BH&quot;) #Convert to wide table with adjusted p-values p_adjust_long &lt;- pairwise_permanova_df[,c(1,2,4)] p_adjust_wide &lt;- spread(data = p_adjust_long, Y, p.adj, fill=NA) #Reformat row.names(p_adjust_wide) &lt;- p_adjust_wide[,1] p_adjust_wide &lt;- p_adjust_wide[,-1] return(p_adjust_wide) } #PERMANOVA tests #Patient patient_permanova &lt;- vegan::adonis2(unifrac.dist ~ Patientnumber, data = meta, permutations=999, by = &quot;margin&quot;) #Change a row name row.names(patient_permanova)[1] &lt;- &quot;Participant number&quot; #pairwise patient_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Patientnumber&quot;) #Write out data write.table(&quot;Participant number&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, col.names = FALSE, row.names = FALSE) write.table(patient_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(patient_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(patient_permanova, patient_pairwise) #Buffer buffer_permanova &lt;- vegan::adonis2(unifrac.dist ~ Bufferused , data = meta, permutations=999, by = &quot;margin&quot;) #pairwise buffer_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Bufferused&quot;) #Write out data write.table(&quot;Bufferused&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(buffer_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_permanova, buffer_pairwise) #temp temp_permanova &lt;- vegan::adonis2(unifrac.dist ~ Storagetempcategory, data = meta, permutations=999, by = &quot;margin&quot;) #Change a row name row.names(temp_permanova)[1] &lt;- &quot;Temp&quot; #pairwise temp_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Storagetempcategory&quot;) #Write out data write.table(&quot;Temp&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(temp_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(temp_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(temp_permanova, temp_pairwise) #Storage condition condition_permanova &lt;- vegan::adonis2(unifrac.dist ~ Storageconditions, data = meta, permutations=999, by = &quot;margin&quot;) #pairwise condition_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Storageconditions&quot;) #Write out data write.table(&quot;Storageconditions&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(condition_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(condition_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(condition_permanova, condition_pairwise) #Buffer and participant buffer_patient_permanova &lt;- vegan::adonis2(unifrac.dist ~ Bufferused + Patientnumber, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(buffer_patient_permanova)[1:2] &lt;- c(&quot;Bufferused&quot;,&quot;Participant number&quot;) #pairwise #create new metadata column meta$Bufferused_and_Patientnumber &lt;- paste0(meta$Bufferused,&quot;_&quot;,meta$Patientnumber) buffer_patient_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Bufferused_and_Patientnumber&quot;) #Write out data write.table(&quot;Bufferused and Participant number&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_patient_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(buffer_patient_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_patient_permanova, buffer_patient_pairwise) #Buffer and temp buffer_temp_permanova &lt;- vegan::adonis2(unifrac.dist ~ Bufferused + Storagetempcategory, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(buffer_temp_permanova)[1:2] &lt;- c(&quot;Bufferused&quot;,&quot;Temp&quot;) #pairwise #create new metadata column meta$Bufferused_and_Temp &lt;- paste0(meta$Bufferused,&quot;_&quot;,meta$Storagetempcategory) buffer_temp_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Bufferused_and_Temp&quot;) #Write out data write.table(&quot;Bufferused and Temp&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_temp_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(buffer_temp_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_temp_permanova, buffer_temp_pairwise) #Temp and Participant temp_participant_permanova &lt;- vegan::adonis2(unifrac.dist ~ Storagetempcategory + Patientnumber, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(temp_participant_permanova)[1:2] &lt;- c(&quot;Temp&quot;,&quot;Participant number&quot;) #pairwise #create new metadata column meta$Temp_and_participant &lt;- paste0(meta$Storagetempcategory,&quot;_&quot;,meta$Patientnumber) temp_participant_pairwise &lt;- paiwise_function(unifrac.dist, meta, &quot;Temp_and_participant&quot;) #Write out data write.table(&quot;Temp and Participant number&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(temp_participant_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(temp_participant_pairwise, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(temp_participant_permanova, temp_participant_pairwise) #Storage condition and participant condition_patient_permanova &lt;- vegan::adonis2(unifrac.dist ~ Storageconditions + Patientnumber, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(condition_patient_permanova)[1:2] &lt;- c(&quot;Storageconditions&quot;,&quot;Participant number&quot;) #Write out data write.table(&quot;Storageconditions and Participant number&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(condition_patient_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise PERMANOVA skipped as there would be too few samples per grouping&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(condition_patient_permanova) #Buffer, Storage condition and participant buffer_condition_patient_permanova &lt;- vegan::adonis2(unifrac.dist ~ Bufferused + Storageconditions + Patientnumber, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(buffer_condition_patient_permanova)[1:3] &lt;- c(&quot;Bufferused&quot;, &quot;Storageconditions&quot;,&quot;Participant number&quot;) #Write out data write.table(&quot;Bufferused, Storageconditions and Participant number&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_condition_patient_permanova, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise PERMANOVA skipped as there would be too few samples per grouping&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;&quot;, file = &quot;./data/permanova_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_condition_patient_permanova) #buffer stats buffer_permanova &lt;- adonis(unifrac.dist ~ Bufferused , data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(buffer_permanova$aov.tab), file = &quot;./data/16s_buffer_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2A stats buffer_patient_permanova &lt;- adonis(unifrac.dist ~ Bufferused + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(buffer_patient_permanova$aov.tab), file = &quot;./data/16s_buffer_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2b stats temp_patient_permanova &lt;- adonis(unifrac.dist ~ Storagetemp + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(temp_patient_permanova$aov.tab), file = &quot;./data/16s_temp_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Storage condition condition_patient_permanova &lt;- adonis(unifrac.dist ~ Storageconditions, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(condition_patient_permanova$aov.tab), file = &quot;./data/16s_condition_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2c stats condition_patient_permanova &lt;- adonis(unifrac.dist ~ Storageconditions + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(condition_patient_permanova$aov.tab), file = &quot;./data/16s_condition_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #supp fig 2d stats buffer_condition_patient_permanova &lt;- adonis(unifrac.dist ~ Bufferused + Storageconditions + Patientnumber, data = meta, permutations=999, method=&quot;euclidean&quot;) write.table(as.data.frame(buffer_condition_patient_permanova$aov.tab), file = &quot;./data/16s_buffer_condition_patient_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Pairwise permanovas #Buffers buffer_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Bufferused, nperm = 999) write.table(as.data.frame(buffer_pair_permanova$p.value), file = &quot;./data/16s_buffer_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Buffer &amp; patients meta$Bufferused_and_Patientnumber &lt;- paste0(meta$Bufferused,&quot;_&quot;,meta$Patientnumber) buffer_patient_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Bufferused_and_Patientnumber, nperm = 999) write.table(as.data.frame(buffer_patient_pair_permanova$p.value), file = &quot;./data/16s_buffer_patient_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Temp &amp; patients meta$Storagetemp_and_Patientnumber &lt;- paste0(meta$Storagetempcategory,&quot;_&quot;,meta$Patientnumber) temp_patient_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Storagetemp_and_Patientnumber, nperm = 999) write.table(as.data.frame(temp_patient_pair_permanova$p.value), file = &quot;./data/16s_temp_patient_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) #Condition cond_pair_permanova &lt;- pairwise.perm.manova(resp=unifrac.dist,fact=meta$Storageconditions, nperm = 999) write.table(as.data.frame(cond_pair_permanova$p.value), file = &quot;./data/16s_cond_pair_permanova.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE) "],["15-Supp_table_3.html", "Chapter 15 Supp table 3 15.1 Libraries", " Chapter 15 Supp table 3 Paired Wilcoxon statistical tests of different comparisons based on the observed ASVs, Chao1 (Estimated total number of ASVs), and Shannon metrics of the 16S data based on ASVs. Within each test P-values were adjusted by the Holm-Bonferroni method. 15.1 Libraries library(&quot;phyloseq&quot;) library(&quot;microbiome&quot;) Change some metadata categories #Change -80 to baseline in storage conditions sample_data(physeq)[,&quot;Storageconditions&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storageconditions&quot;])) ) #Storage temp change to categorical names sample_data(physeq)[,&quot;Storagetemp&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storagetemp&quot;])) ) sample_data(physeq)[,&quot;Storagetemp&quot;] &lt;- gsub( pattern = &quot;4&quot;, replacement = &quot;Fridge&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storagetemp&quot;])) ) sample_data(physeq)[,&quot;Storagetemp&quot;] &lt;- gsub( pattern = &quot;20&quot;, replacement = &quot;RT&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Storagetemp&quot;])) ) #Bufferused_and_Storageconditions change to categorical names sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- gsub( pattern = &quot;-80&quot;, replacement = &quot;Baseline&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;])) ) sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- gsub( pattern = &quot;4&quot;, replacement = &quot;Fridge&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;])) ) sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;] &lt;- gsub( pattern = &quot;20&quot;, replacement = &quot;RT&quot;, x = as.vector(unlist(sample_data(physeq)[,&quot;Bufferused_and_Storageconditions&quot;])) ) 15.1.1 Paired wilcox tests #Calculate alpha stats #Produce data frame of all alpha diversity values alpha_df &lt;- phyloseq::estimate_richness(physeq = physeq, measures = c(&quot;Observed&quot;,&quot;Chao1&quot;,&quot;Shannon&quot;)) #Bufferused #Using default P value adjusment method of holm (Holm-Bonferroni method) observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Bufferused) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Bufferused) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Bufferused) #Write out data write.table(&quot;Bufferused&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) #Storageconditions observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Storageconditions) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Storageconditions) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Storageconditions) #Write out data write.table(&quot;Storageconditions&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) #Participant number observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Patientnumber) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Patientnumber) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Patientnumber) #Write out data write.table(&quot;Participant number&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) #Storagetemp observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Storagetemp) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Storagetemp) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Storagetemp) #Write out data write.table(&quot;Storagetemp&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) #Bufferused_and_Storageconditions observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Bufferused_and_Storageconditions) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Bufferused_and_Storageconditions) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Bufferused_and_Storageconditions) #Write out data write.table(&quot;Bufferused and Storageconditions&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) #Bufferused_and_Storageconditions observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Bufferused_and_Storageconditions) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Bufferused_and_Storageconditions) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Bufferused_and_Storageconditions) #Write out data write.table(&quot;Bufferused and Storageconditions&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) #Participant number and Bufferused observed_stats &lt;- pairwise.wilcox.test(alpha_df$Observed, phyloseq::sample_data(physeq)$Patientnumber_and_Bufferused) chao_stats &lt;- pairwise.wilcox.test(alpha_df$Chao1, phyloseq::sample_data(physeq)$Patientnumber_and_Bufferused) shannon_stats &lt;- pairwise.wilcox.test(alpha_df$Shannon, phyloseq::sample_data(physeq)$Patientnumber_and_Bufferused) #Write out data write.table(&quot;Participant number and Bufferused&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;Observed&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(observed_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Chao1&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(chao_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Shannon&quot;, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(shannon_stats$p.value, file = &quot;./data/wilcox_16s.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) "],["16-Supp_table_4.html", "Chapter 16 Supp table 4 16.1 Libraries 16.2 Significant results table", " Chapter 16 Supp table 4 All significant results from maaslin2 biomarker detection of genera. 16.1 Libraries library(&quot;DT&quot;) 16.2 Significant results table Analysis carried out in Fig 4 production "],["17-Supp_table_6.html", "Chapter 17 Supp table 6 17.1 libraries", " Chapter 17 Supp table 6 PERMANOVA statistical tests of different comparisons based on Bray-Curtis distances for the Lipid data. PERMANOVA results, 999 permutations, pairwise tests display holm adjusted p-values. 17.1 libraries library(&quot;phyloseq&quot;) library(&quot;vegan&quot;) 17.1.1 Statisitical tests #load phylosq object load(file = &quot;./data/lipid_physeq_object&quot;) load(file = &quot;./data/lipid_physeq_1k_object&quot;) #Extract metadata meta &lt;- as(sample_data(physeq_1k), &quot;data.frame&quot;) #Change Temp.Storage.time values meta$Temp.Storage.time &lt;- gsub(pattern = &quot;\\\\|&quot;, replacement = &quot;_&quot;, meta$Temp.Storage.time) meta$Temp.Storage.time &lt;- gsub(pattern = &quot; day&quot;, replacement = &quot;D&quot;, meta$Temp.Storage.time) #Update metadata with better names and column names #Calculate bray distance bray.dist &lt;- as.matrix(phyloseq::distance(physeq, method=&quot;bray&quot;)) #Pairwise comparison function paiwise_function &lt;- function(dist_df, meta_df, meta_column) { #Combination cbn &lt;- combn(x = unique(meta_df[,meta_column]), m = 2) #Create empty final data frame with 4 columns # and a number of rows equal to the the number of combinations pairwise_permanova_df &lt;- as.data.frame(matrix(data = NA, nrow = ncol(cbn), ncol = 4)) #Add column names colnames(pairwise_permanova_df) &lt;- c(&quot;X&quot;,&quot;Y&quot;,&quot;p&quot;,&quot;p.adj&quot;) #Loop through the combinations for(i in 1:ncol(cbn)){ #Subset metadf to contain only our samples of interest metadf_subset &lt;- meta[meta[,meta_column]%in% cbn[,i],] #Subset distance matrix samples_subset &lt;- row.names(metadf_subset) dist.subset &lt;- dist_df[samples_subset,samples_subset] #PERMANOVA/ADONIS f &lt;- paste0(&quot;dist.subset~&quot;,meta_column) pairwise_adonis &lt;- vegan::adonis2(formula = formula(f), permutations = 999, data = metadf_subset, by = &quot;margin&quot;) #Add the group names and p-value to the main data frame pairwise_permanova_df[i,1:2] &lt;- cbn[,i] pairwise_permanova_df[i,3] &lt;- pairwise_adonis[1,&quot;Pr(&gt;F)&quot;] } #Add adjusted P-values pairwise_permanova_df$p.adj &lt;- p.adjust(pairwise_permanova_df$p, method = &quot;BH&quot;) #Convert to wide table with adjusted p-values p_adjust_long &lt;- pairwise_permanova_df[,c(1,2,4)] p_adjust_wide &lt;- spread(data = p_adjust_long, Y, p.adj, fill=NA) #Reformat row.names(p_adjust_wide) &lt;- p_adjust_wide[,1] p_adjust_wide &lt;- p_adjust_wide[,-1] return(p_adjust_wide) } #PERMANOVA tests #Patient patient_permanova &lt;- vegan::adonis2(bray.dist ~ Sample.number, data = meta, permutations=999, by = &quot;margin&quot;) #Change a row name row.names(patient_permanova)[1] &lt;- &quot;Participant number&quot; #pairwise patient_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Sample.number&quot;) #Write out data write.table(&quot;Participant number&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, col.names = FALSE, row.names = FALSE) write.table(patient_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(patient_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(patient_permanova, patient_pairwise) #buffer buffer_permanova &lt;- vegan::adonis2(bray.dist ~ Buffer.type , data = meta, permutations=999, by = &quot;margin&quot;) #Change a row name row.names(buffer_permanova)[1] &lt;- &quot;Bufferused&quot; #pairwise buffer_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Buffer.type&quot;) #Write out data write.table(&quot;Bufferused&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(buffer_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_permanova, buffer_pairwise) #temp temp_permanova &lt;- vegan::adonis2(bray.dist ~ Temp, data = meta, permutations=999, by = &quot;margin&quot;) #pairwise temp_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Temp&quot;) #Write out data write.table(&quot;Temp&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(temp_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(temp_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(temp_permanova, temp_pairwise) #Storage condition condition_permanova &lt;- vegan::adonis2(bray.dist ~ Temp.Storage.time, data = meta, permutations=999, by = &quot;margin&quot;) #Change a row name row.names(condition_permanova)[1] &lt;- &quot;Storageconditions&quot; #pairwise condition_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Temp.Storage.time&quot;) #Write out data write.table(&quot;Storageconditions&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(condition_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(condition_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(condition_permanova, condition_pairwise) #Buffer and participant buffer_patient_permanova &lt;- vegan::adonis2(bray.dist ~ Buffer.type + Sample.number, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(buffer_patient_permanova)[1:2] &lt;- c(&quot;Bufferused&quot;,&quot;Participant number&quot;) #pairwise #create new metadata column meta$Bufferused_and_Patientnumber &lt;- paste0(meta$Buffer.type,&quot;_&quot;,meta$Sample.number) buffer_patient_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Bufferused_and_Patientnumber&quot;) #Write out data write.table(&quot;Bufferused and Participant number&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_patient_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(buffer_patient_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_patient_permanova, buffer_patient_pairwise) #Buffer and temp buffer_temp_permanova &lt;- vegan::adonis2(bray.dist ~ Buffer.type + Temp, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(buffer_temp_permanova)[1] &lt;- c(&quot;Bufferused&quot;) #pairwise #create new metadata column meta$Bufferused_and_Temp &lt;- paste0(meta$Buffer.type,&quot;_&quot;,meta$Temp) buffer_temp_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Bufferused_and_Temp&quot;) #Write out data write.table(&quot;Bufferused and Temp&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_temp_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(buffer_temp_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_temp_permanova, buffer_temp_pairwise) #Temp and Participant temp_participant_permanova &lt;- vegan::adonis2(bray.dist ~ Temp + Sample.number, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(temp_participant_permanova)[2] &lt;- c(&quot;Participant number&quot;) #pairwise #create new metadata column meta$Temp_and_participant &lt;- paste0(meta$Temp,&quot;_&quot;,meta$Sample.number) temp_participant_pairwise &lt;- paiwise_function(bray.dist, meta, &quot;Temp_and_participant&quot;) #Write out data write.table(&quot;Temp and Participant number&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(temp_participant_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(temp_participant_pairwise, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(temp_participant_permanova, temp_participant_pairwise) #Storage condition and participant condition_patient_permanova &lt;- vegan::adonis2(bray.dist ~ Temp.Storage.time + Sample.number, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(condition_patient_permanova)[1:2] &lt;- c(&quot;Storageconditions&quot;,&quot;Participant number&quot;) #Write out data write.table(&quot;Storageconditions and Participant number&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(condition_patient_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise PERMANOVA skipped as there would be too few samples per grouping&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(condition_patient_permanova) #Buffer, Storage condition and participant buffer_condition_patient_permanova &lt;- vegan::adonis2(bray.dist ~ Buffer.type + Temp.Storage.time + Sample.number, data = meta, permutations=999, by = &quot;margin&quot;) #Change row names row.names(buffer_condition_patient_permanova)[1:3] &lt;- c(&quot;Bufferused&quot;, &quot;Storageconditions&quot;,&quot;Participant number&quot;) #Write out data write.table(&quot;Bufferused, Storageconditions and Participant number&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append=TRUE,col.names = FALSE, row.names = FALSE) write.table(buffer_condition_patient_permanova, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = NA) write.table(&quot;Pairwise PERMANOVA skipped as there would be too few samples per grouping&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) write.table(&quot;&quot;, file = &quot;./data/permanova_lipid.tsv&quot;, sep = &quot;\\t&quot;, quote=FALSE, append = TRUE, col.names = FALSE, row.names = FALSE) #Remove results remove(buffer_condition_patient_permanova) "],["18-Supp_table_7.html", "Chapter 18 Supp table 7", " Chapter 18 Supp table 7 Spearman correlation values of 16S genera and SCFA abundance profiles. Analysis carried out in Figure 6 chapter #Load data frame library library(DT) #Load data load(&quot;./data/correlation_table.RData&quot;) #Display table with significant hits below datatable(correlation.table[correlation.table$p.adj &lt; 0.05,], options = list(pageLength = 50) ) "],["19-Supp_table_8.html", "Chapter 19 Supp table 8 19.1 Libraries 19.2 Preprocess tables 19.3 No buffer 19.4 RNAlater 19.5 Ethanol 19.6 PSP 19.7 Compare results", " Chapter 19 Supp table 8 Spearman correlation values of 16S genera and SCFA abundance profiles stratified by buffer used. “All” are the results of using all data (no buffer, RNAlater, ethanol, and PSP). All non-zero values are significant results. Similarites table shows the number of similarities by significant correlations where the correlations are both positive or both negative. 19.1 Libraries library(microbiome) library(phyloseq) library(dplyr) library(reshape2) library(DT) library(funrar) 19.2 Preprocess tables #load in phyloseq object load(&quot;./data/preprocess_physeq&quot;) #subset samples to remove rnalater unwashed samples physeq &lt;- subset_samples(physeq, !(RNAlater_washed_status == &quot;unwashed&quot;)) #Subset samples to remove samples with NA lipid info physeq &lt;- subset_samples(physeq, !(Formate.MM. == &quot;NA&quot;)) #Remove anything that is not bacteria physeq &lt;- subset_taxa(physeq, Phylum != &quot;Bacteria&quot;) #Clostridium #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Clostridium&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Ruminococcus #Remove instances of square brackets clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;[Ruminococcus]&quot;), FALSE)) #Remove [] clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- &quot;Ruminococcus&quot; #Get logical vector to know which rows clos_subset_vector &lt;- as.vector(replace((tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), is.na(tax_table(physeq)[,&quot;Genus&quot;] == &quot;Ruminococcus&quot;), FALSE)) #Extract taxa names clos_taxa_names &lt;- taxa_names(physeq)[clos_subset_vector] #Make new genus names for clositriudm clos_new_genus_name &lt;- paste(tax_table(physeq)[clos_taxa_names,&quot;Family&quot;], tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;], sep = &quot;_&quot;) tax_table(physeq)[clos_taxa_names,&quot;Genus&quot;] &lt;- clos_new_genus_name #Convert to genus table physeq &lt;- aggregate_taxa(physeq, &quot;Genus&quot;) #COnvert to relative abundance physeq_relabund &lt;- microbiome::transform(physeq, &quot;compositional&quot;) #Extract genus table to a df genus_df &lt;- as.matrix(otu_table(physeq_relabund)) #transpose genus_df_t &lt;- as.matrix(t(genus_df)) #log10 the values #genus_df_t_log10 &lt;- log10(genus_df_t) #extract lipid table lipid_mat &lt;- as.matrix(meta(physeq)[,grepl(&quot;.MM.&quot;,colnames(meta(physeq)))]) #remove .MM. from colnames colnames(lipid_mat) &lt;- gsub(pattern = &quot;.MM.&quot;, replacement = &quot;&quot;, colnames(lipid_mat)) #Remove &quot;_b&quot; from sample names row.names(lipid_mat) &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;, row.names(lipid_mat)) row.names(genus_df_t) &lt;- gsub(pattern = &quot;_b&quot;, replacement = &quot;&quot;, row.names(genus_df_t)) #Convert to relative abundance values lipid_mat_relabund &lt;- make_relative(lipid_mat) #Sample_data as dataframe metadf &lt;- as.data.frame(sample_data(physeq)) #Save object save(genus_df_t, file = &quot;./data/16s_and_lipid_genus_physeq&quot;) save(lipid_mat_relabund, file = &quot;./data/lipid_relabund_matrix&quot;) 19.3 No buffer 19.3.1 Correlation #load in phyloseq object load(&quot;./data/16s_and_lipid_genus_physeq&quot;) load(&quot;./data/lipid_relabund_matrix&quot;) load(&quot;./data/preprocess_physeq&quot;) metadf &lt;- as.data.frame(sample_data(physeq)) #subset tables sample_names &lt;- unlist(metadf[metadf$Bufferused == &quot;No buffer&quot;,&quot;Sample_name&quot;]) subset_genus_df_t &lt;- genus_df_t[sample_names,] subset_lipid_mat_relabund &lt;- lipid_mat_relabund[sample_names,] #Correlation correlation.table &lt;- associate( subset_genus_df_t, subset_lipid_mat_relabund, method = &quot;spearman&quot;, mode = &quot;table&quot;, p.adj.threshold = 0.05, n.signif = 1) #Add column names colnames(correlation.table)[1:2] &lt;- c(&quot;Genus&quot;,&quot;Lipid&quot;) #Write table with significant hits to file write.table(correlation.table[correlation.table$p.adj &lt; 0.05,], file = &quot;./data/Genus_lipid_sig_correlation_no_buffer.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Display table with significant hits below datatable(correlation.table[correlation.table$p.adj &lt; 0.05,], options = list(pageLength = 50) ) 19.4 RNAlater 19.4.1 Correlation #load in phyloseq object load(&quot;./data/16s_and_lipid_genus_physeq&quot;) load(&quot;./data/lipid_relabund_matrix&quot;) load(&quot;./data/preprocess_physeq&quot;) metadf &lt;- as.data.frame(sample_data(physeq)) #subset tables sample_names &lt;- unlist(metadf[metadf$Bufferused == &quot;Rnalater&quot;,&quot;Sample_name&quot;]) subset_genus_df_t &lt;- genus_df_t[sample_names,] subset_lipid_mat_relabund &lt;- lipid_mat_relabund[sample_names,] #Correlation correlation.table &lt;- associate( subset_genus_df_t, subset_lipid_mat_relabund, method = &quot;spearman&quot;, mode = &quot;table&quot;, p.adj.threshold = 0.05, n.signif = 1) #Add column names colnames(correlation.table)[1:2] &lt;- c(&quot;Genus&quot;,&quot;Lipid&quot;) #Write table with significant hits to file write.table(correlation.table[correlation.table$p.adj &lt; 0.05,], file = &quot;./data/Genus_lipid_sig_correlation_rnalater.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Display table with significant hits below datatable(correlation.table[correlation.table$p.adj &lt; 0.05,], options = list(pageLength = 50) ) 19.5 Ethanol 19.5.1 Correlation #load in phyloseq object load(&quot;./data/16s_and_lipid_genus_physeq&quot;) load(&quot;./data/lipid_relabund_matrix&quot;) load(&quot;./data/preprocess_physeq&quot;) metadf &lt;- as.data.frame(sample_data(physeq)) #subset tables sample_names &lt;- unlist(metadf[metadf$Bufferused == &quot;Ethanol&quot;,&quot;Sample_name&quot;]) subset_genus_df_t &lt;- genus_df_t[sample_names,] subset_lipid_mat_relabund &lt;- lipid_mat_relabund[sample_names,] #Correlation correlation.table &lt;- associate( subset_genus_df_t, subset_lipid_mat_relabund, method = &quot;spearman&quot;, mode = &quot;table&quot;, p.adj.threshold = 0.05, n.signif = 1) #Add column names colnames(correlation.table)[1:2] &lt;- c(&quot;Genus&quot;,&quot;Lipid&quot;) #Write table with significant hits to file write.table(correlation.table[correlation.table$p.adj &lt; 0.05,], file = &quot;./data/Genus_lipid_sig_correlation_ethanol.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Display table with significant hits below datatable(correlation.table[correlation.table$p.adj &lt; 0.05,], options = list(pageLength = 50) ) 19.6 PSP 19.6.1 Correlation #load in phyloseq object load(&quot;./data/16s_and_lipid_genus_physeq&quot;) load(&quot;./data/lipid_relabund_matrix&quot;) load(&quot;./data/preprocess_physeq&quot;) metadf &lt;- as.data.frame(sample_data(physeq)) #subset tables sample_names &lt;- unlist(metadf[metadf$Bufferused == &quot;PSP&quot;,&quot;Sample_name&quot;]) subset_genus_df_t &lt;- genus_df_t[sample_names,] subset_lipid_mat_relabund &lt;- lipid_mat_relabund[sample_names,] #Correlation correlation.table &lt;- associate( subset_genus_df_t, subset_lipid_mat_relabund, method = &quot;spearman&quot;, mode = &quot;table&quot;, p.adj.threshold = 0.05, n.signif = 1) #Add column names colnames(correlation.table)[1:2] &lt;- c(&quot;Genus&quot;,&quot;Lipid&quot;) #Write table with significant hits to file write.table(correlation.table[correlation.table$p.adj &lt; 0.05,], file = &quot;./data/Genus_lipid_sig_correlation_psp.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Display table with significant hits below datatable(correlation.table[correlation.table$p.adj &lt; 0.05,], options = list(pageLength = 50) ) 19.7 Compare results #read in data all_df &lt;- read.csv(&quot;data/Genus_lipid_sig_correlation.csv&quot;) nobuffer_df &lt;- read.csv(&quot;data/Genus_lipid_sig_correlation_no_buffer.csv&quot;) rnalater_df &lt;- read.csv(&quot;data/Genus_lipid_sig_correlation_rnalater.csv&quot;) ethanol_df &lt;- read.csv(&quot;data/Genus_lipid_sig_correlation_ethanol.csv&quot;) psp_df &lt;- read.csv(&quot;data/Genus_lipid_sig_correlation_psp.csv&quot;) #remove p.adj value and add column for comparison all_df &lt;- all_df[,1:3] all_df$comparison &lt;- &quot;All&quot; nobuffer_df &lt;- nobuffer_df[,1:3] nobuffer_df$comparison &lt;- &quot;No buffer&quot; rnalater_df &lt;- rnalater_df[,1:3] rnalater_df$comparison &lt;- &quot;Rnalater&quot; ethanol_df &lt;- ethanol_df[,1:3] ethanol_df$comparison &lt;- &quot;Ethanol&quot; psp_df &lt;- psp_df[,1:3] psp_df$comparison &lt;- &quot;PSP&quot; #COmbine into one long df long_df &lt;- rbind(all_df,nobuffer_df) long_df &lt;- rbind(long_df,rnalater_df) long_df &lt;- rbind(long_df,ethanol_df) long_df &lt;- rbind(long_df,psp_df) #convert to wide wide_df &lt;- dcast(long_df, Genus+Lipid ~ comparison, value.var = &quot;Correlation&quot;) #convert NA to 0 wide_df[is.na(wide_df)] &lt;- 0 #Write table write.table(wide_df, file = &quot;./data/Genus_lipid_sig_correlation_comparisons.csv&quot;, row.names = FALSE, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #compare results comparisons &lt;- c(&quot;All&quot;, &quot;No buffer&quot;, &quot;Rnalater&quot;, &quot;Ethanol&quot;, &quot;PSP&quot;) #Create matrix comp_mat &lt;- matrix(data = NA, nrow = length(comparisons), ncol = length(comparisons), dimnames = list(comparisons,comparisons)) #fill in matrix for (ccol in comparisons) { for (crow in comparisons) { #Counter for similarities similarities &lt;- 0 #loop through rows for (r in 1:nrow(wide_df)) { corcol &lt;- wide_df[r,ccol] corrow &lt;- wide_df[r,crow] #Check if either value is 0, do nothing if the case if (corcol == 0) { similarities &lt;- similarities } else if ( corrow == 0) { similarities &lt;- similarities } else if (sign(corcol) == sign(corrow)) { #Check if both values are positive or if both negative similarities &lt;- similarities + 1 } } comp_mat[ccol,crow] &lt;- similarities } } #write table write.table(comp_mat, file = &quot;./data/Genus_lipid_sig_correlation_comparisons_similarities.csv&quot;, sep = &quot;,&quot;, quote = FALSE, col.names = TRUE) #Display table datatable(comp_mat, options = list(pageLength = 50), rownames = TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
