[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Everyone",
    "section": "",
    "text": "1 Introduction\n\n\n\n\n\n\n\n\n\nThese materials will teach you the fundamentals of R and are intended for beginners. The first section will focus on the basics of R with foundations and objects. Next you will look at how to read in files and write out files from R. This will be followed by getting further practice on the completed materials whilst learning some handy tips and tricks.\nYou will then get to apply your R skills to create plots and carry out some statistics. You will learn how to make four types of plots with R:\n\nLine graphs\nHistograms\nScatterplots\nBoxplots\n\nYou will then be carrying out some basic statistics, don’t worry it won’t be a statistics lesson.\nThe materials will finish with some harder coding where you’ll learn to make loops, use ifs, and create R functions.\nThese materials will involve theory, practice, exercises, and solutions:\n\nThe theory will explain R concepts and terminology. R terminology can be quite confusing but it is important to learn as it makes asking questions online a lot easier.\nPractice will involve code to run whilst reading through the theory. This will allow you to see the output of R and hopefully help you understand how R works.\nExercises will give you a task to carry out based on the knowledge and skills you learned from the theory and practise.\nSolutions for the exercise are after the exercise. Please try the exercise before looking at the solution, however make sure you read the solutions even if you completed the exercise successfully as there is extra information in these sections.\n\nCommands are in the following font and colour and should be run in RStudio (These should not be copied into R from this document):\n\nThis is a command \n\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License."
  },
  {
    "objectID": "02-Foundations.html#operators",
    "href": "02-Foundations.html#operators",
    "title": "2  Foundations of R",
    "section": "2.1 Operators",
    "text": "2.1 Operators\n\n\n\n\n\n\n\n\n\nOperators are symbols in R that allow you to carry out many common tasks. The 3 main types of operators in R are arithmetic, logical, and bitwise. We will ignore logical and bitwise and have a look at some arithmetic operators.\nThe four most commonly used arithmetic operators are:\n\n+ : Addition\n- : Minus\n/ : Divide\n* : Multiply\n\nRun the following commands in your RStudio console.\nNote: Each line below represents one command. Once a command is typed out press enter to run the command.\nNote: The amount of space between the integers/numbers and an operator does not matter. It is a matter of preference and clarity.\n\n2+2\n7-7\n10/5\n3*3\n6+2+4\n8-1-3\n\nR follows the BODMAS rules (Brackets, Orders (powers/roots), Division, Multiplication, Addition, Subtraction). Try out the following commands to demonstrate the usefulness of brackets.\n\n3 + 2 * 2/5\n((3+2) * 2) / 5\n3 - 2*4 + 1\n(3-2) * (4+1)\n3 * 3/2 * 2 - 1\n(3*3) / ((2*2) - 1)\n\nWhen entering commands via the console the results/output is printed to the screen (ignore the [1] at the moment). However, this is no better than a normal calculator currently. R is a lot more powerful as we shall see."
  },
  {
    "objectID": "02-Foundations.html#variables",
    "href": "02-Foundations.html#variables",
    "title": "2  Foundations of R",
    "section": "2.2 Variables",
    "text": "2.2 Variables\n\n\n\n\n\n\n\n\n\nThe output/result of a command can be saved as a variable. Below is the format for creating a variable in R (don’t type this into R).\n\nvariable_name &lt;- variable_object\n\nThere are 3 parts to the above:\n\nThe variable name (variable_name). This is the name of the variable and is what will be used to refer to the variable in future commands. This name can be almost anything. There are some rules on what can be in a name:\n\nMust start with a letter.\nCannot contain spaces.\nCannot start with a number.\nCannot share the same name as a command or function in R.\nThey are case sensitive. The variable name BB is different to the variable name bb which is different again to bB. I find it easiest to keep variable names in lower case.\n\n&lt;- is called the assignment operator. It assigns the variable object to the variable name.\n\nTip you can press ‘ALT’+ ‘-’ after a variable name as a shortcut for the assignment operator.\n\nThe variable object (variable_object). This can be many different objects including the output/results from commands, strings/words, numbers, and many other R data types.\n\nA variable can be thought of as a box. The variable object is held in the box but it can be replaced with any other object. The variable name can then be thought as the label on the box so you can tell which box is which.\nType the below commands into the RStudio console.\nNote. Remember the amount of spaces between operators and integers does not matter. I encourage you to experiment with this spacing so you find what is best for you in terms of ease and clarity.\n\nbakers_dozen &lt;- 13\nkilobyte &lt;- 1024\nI &lt;- 1\nII &lt;- I + 1\nV &lt;- 7 - II\nX &lt;- (II / I) * V\nL &lt;- X * V\n\nIn the above commands the variables are not printed out to the screen, this is as it should be. The variables are appearing in the environment pane (Top right). This is very convenient to see what variables are currently in the environment and to see what they contain.\nTo print the contents of a variable to screen you can type the variable name into the console and press enter. This will print the variable object to the screen. This is not needed for small variable objects, for which you can look at the environment pane, but is useful for larger variable objects."
  },
  {
    "objectID": "02-Foundations.html#functions",
    "href": "02-Foundations.html#functions",
    "title": "2  Foundations of R",
    "section": "2.3 Functions",
    "text": "2.3 Functions\n\n\n\n\n\n\n\n\n\nR Functions allow the user to carry out a specific task. R has many inbuilt functions but you can also create your own. Currently we will look at in built functions.\nThe basic layout of a function is:\n\nfunction_name(objects, options)\n\nThere are 3 main parts to the above:\n\nThe function name (function_name)\nThe object/s to provide to the function.\n\nThis can be numbers, strings, variables we have created etc.\nMost functions require at least one object.\nSome functions can take multiple objects, if multiple objects are provided they must be separated by ,.\n\nFunction options (options). Options can be provided to some functions to alter the way they will work.\n\nSome functions don’t have options.\nMost options have default modes. If the options is not specified the default mode will be used.\nLike objects, when using multiple options they must be separated by ,.\n\n\nTry running the below commands in your Rstudio console.\n\nceiling(3.5)\nfloor(3.5)\nsqrt(9)\nround(3.5555, digits = 2)\nround(3.5555, digits = 3)\nround(3.5555, digits = 0)\ntwo &lt;- sqrt(4)\n\nThe help page of functions can be accessed in 2 main ways:\n\nClick on the function name so your cursor is in it and press F1.\nType ? followed by the function name. Example below:\n\n\n?ceiling"
  },
  {
    "objectID": "02-Foundations.html#directories",
    "href": "02-Foundations.html#directories",
    "title": "2  Foundations of R",
    "section": "2.4 Directories",
    "text": "2.4 Directories\n\n\n\n\n\n\n\n\n\nIt is important to know what directory you are working in and how to change to different directories.\n\n2.4.1 Commands\nBelow are commands you can run in the RStudio console or script editor (use of script editor will be taught soon).\n\nDetermine what directory you are currently in:\n\n\ngetwd()\n\n\nSet working directory. The path of the directory must be in quotes like below. If you do run the below command make sure the path exists in your computer, as I am the sure the example below will not.\n\n\nsetwd(\"/path/of/directory\")\n\n\nList the files in the current directory:\n\n\nlist.files()\n\n\n\n2.4.2 RStudio Interface\nThe RStudio interface can also be used to carry out the above tasks.\nTo see what the current working directory is, you can look at the top bar of the console window. The below shows I am in the “F:/R/CE/CE_R_for_Everyone” directory.\n\n\n\n\n\n\n\n\n\nThere are two main ways to set your working directory.\n\nVia the tool bar:\n\nClick “Session”\nGo to the “Set Working Directory” drop down section\nClick “Choose Directory..”\nUse the pop-up browser to choose a directory\n\nVia the MISC window (bottom right)\n\nClick the Files pane\nNavigate to the directory you would like to set as the working directory\nOn the MISC toolbar click “More”\nOn the drop down click “Set As Working Directory”\n\n\nTo show the current working directory in the Files pane click the arrow on the top bar of the console window. You can then see what files and directories are in your working directory via the Files pane in the MISC window.\n\n\n\n\n\n\n\n\n\nWith this information create a directory you will use for this course. This can be done outside of Rstudio or you can use the Files pane in the MISC window. Once this is created set your working directory to it. With that done we can go onto the next section."
  },
  {
    "objectID": "02-Foundations.html#script-editor",
    "href": "02-Foundations.html#script-editor",
    "title": "2  Foundations of R",
    "section": "2.5 Script editor",
    "text": "2.5 Script editor\n\n\n\n\n\n\n\n\n\nYou can quickly type and run code using the console window. However, to fully utilise Rstudio we will instead use the script editor in the source window. This allows us to reuse and edit code easier and it allows us to save our code so we can come back to it.\nIf you cannot see your script editor, click the multi window button on the top of the source window or console window.\n\n\n\n\n\n\n\n\n\nType the below into the script editor and press “enter”.\n\n2 + 2\n\nPressing enter goes to a new line without running the command, just like other text editors (word, emails etc.).\nOn the new line type the below:\n\n4 - 1\n\n\n2.5.1 Running commands\n\n\n\n\n\n\n\n\n\nYou can run a command that is in the script editor by one of the two following ways:\n\nVia cursor:\n\nMove the cursor to the line you would like to run.\nPress “Ctrl” + “enter” ( “cmd” + “enter” for Mac)\n\nHighlighting:\n\nHighlight the parts you would like and press “Ctrl” + “enter” ( “cmd” + “enter” for Mac)\nYou can highlight a part of a line, a whole line, and even multiple lines.\n\n\nRun the commands you currently have in your script editor.\nThe script editor is unaffected with only the cursor moving if you used the cursor method. What is actually happening is that your commands are being copied to the console window and are being run there.\nI would encourage to primarily use the script editor to write your code. It is brilliant for editing, reusing, and documenting your code.\n\n\n2.5.2 Annotations\n\n\n\n\n\n\n\n\n\nAnnotations can be added to your code in the script editor. If a line starts with a # it will not be run as a command, this line is then an annotation. This is extremely useful to leave information for your future self. It is much harder to go back to old code and figure out what it does if it is just code.\nBe a mate, annotate.\nEdit the contents of your script editor so it looks like the below. Then run all the lines.\nTip: If you have selected the script editor you can use “Ctrl” + “a” to highlight all.\n\n#Command 1\n2 + 2\n#Command 2\n4 - 1\n\n\n\n2.5.3 Saving scripts\n\n\n\n\n\n\n\n\n\nFinally, one of the best aspects of using the script editor is that you can save your scripts. I use this so I can have scripts for specific projects and template scripts for certain tasks I routinely carry out.\n\nTo save a script you can click the floppy disk on the toolbar of the source window.\nTo save as, go to the RStudio toolbar and click “File” &gt; “Save As…”.\n\n\n\n2.5.4 Open a saved script\nYou can open a previously saved script in 2 main ways:\n\nVia the Files pane in the MISC window\n\nNavigate to the directory with the script (you do not need to set the working directory to this directory)\nClick the name of the script you would like to open\n\nVia the Rstudio toolbar\n\nClick “File”\nClick “Open file”\nWith the popup browser navigate to the location of the script and open it\n\n\n\n\n2.5.5 New script\nYou can have multiple scripts open at one time and switch between these scripts with the tabs at the top of the script editor window.\nTo create and open a new script, click on the button on the RStudio toolbar shown below and select “R script”."
  },
  {
    "objectID": "03-Foundations_exercises.html",
    "href": "03-Foundations_exercises.html",
    "title": "3  Foundations of R exercises",
    "section": "",
    "text": "This will be the simplest of the exercises but will be a good opportunity to reinforce what you have learnt. In fact there is no solution section for this as it is unneeded.\nThe first task is to add the below text annotation to the top of your current script.\n\n# Foundations ####\n\nNow save the file as “1-Foundations.R” within the course directory.\nFor the next part you will need to create a new script and save it as “Exercises.R”.\nOn the first line of this script type the following annotation:\n\n# Exercise 1 ####\n\nThe #### creates a code section, these will be explained in a later week. You could also use ---- or ==== at the end of an annotation to create a code section.\nThe next step is the most tedious, unfortunately tedious repetition is one of the best ways to learn.\nPlease fill in the “Exercises.R” script with the commands from the operators and variables section from Chapter 2. Additionally, add in annotations so you can easily tell which sections the commands come from and brief lines on their purposes.\nAnnotations require a balance of enough info but not too much info, you don’t always need a line of annotation for each line of code. However, with some complex code sometimes you will need multiple lines of annotation for one line of code. It is all about how much annotation you and possibly others will need for the code at hand. Knowing this requires experience.\nNext save the script, ensuring it is called “Exercises.R””\nFinally, close your script by clicking the “x”” icon on the tab of the script.\nThat is the end of Foundations of R! If you have any questions please ask and we are more than happy to try to answer."
  },
  {
    "objectID": "04-R_objects.html#code-sections",
    "href": "04-R_objects.html#code-sections",
    "title": "4  R objects",
    "section": "4.1 Code sections",
    "text": "4.1 Code sections\nToday, and for the rest of the course, you will use code sections in your R scripts to separate sections in this book.\nFirst set your working directory to the course directory, create a script, and save it as “2-Objects.R”.\nNext create a code section at the top of this script called “Classes”.\nIn other words have the below at the top of your script:\n\n# Classes ####"
  },
  {
    "objectID": "04-R_objects.html#classes",
    "href": "04-R_objects.html#classes",
    "title": "4  R objects",
    "section": "4.2 Classes",
    "text": "4.2 Classes\nThere are six basic classes in R (Also known as the atomic classes).\nThe four we will learn are:\n\nInteger\nDouble\nString\nLogical\n\nThere are also the classes complex and raw.\n\n4.2.1 Numeric\n\n\n\n\n\n\n\n\n\nNumeric classes come in two types, integer and double. Integers and doubles are almost identical. However, doubles contain decimal point information whilst integers do not.\nMost of the time you will only need to know if your data is numeric and you will not need to worry about doubles or integers. The exception being if you are working with decimals and your decimals are not showing up. This probably means that your object has the integer class.\nType and run the following, using the provided annotation to understand what the commands are doing.\nNote: Remember you can copy and paste old script.\nUse the function class() to show the class of an R object:\n\n#Numeric\n#Class of 2\nclass(2)\n#class of 3.14\nclass(3.14)\n#class of 6\nclass(6)\n\nCreate a variable with the name “pie”” containing the numeric 3.14:\n\n#Creating a variable using the assignment operator\npie &lt;- 3.14\n\nUse the functions as.numeric(), as.integer(), and as.double() to print the variable as a numeric, as an integer, and as a double:\n\n#Printing out previously made variable as numeric, integer, and double\nas.numeric(pie)\nas.integer(pie)\nas.double(pie)\n\nYou can put a function as the variable within a function.\nBelow we will first check the class of the object within the “pie” variable. You will note that the functions we used previously did not permanently change the variable’s object. We can only change a variable if we use the assignment operator.\nThen we will check the class of the object as it is altered by the various as. functions.\n\n#Checking the class of our variable\nclass(pie)\nclass(as.numeric(pie))\nclass(as.integer(pie))\nclass(as.double(pie))\n\nNote: Remember to ask for help if you need it!\nOn a side note, R comes with some inbuilt variables such as pi:\n\n#The R pi is equal to 3.141593\npi\n#assign pi to 3.14\npi &lt;- 3.14\n#print out pi to see you have changed the variable's object\npi\n#in this case if you want the original R pi object back, we can remove the one we made\nrm(pi)\n\nHave you been annotating your scripts?\n\n\n4.2.2 Logical\n\n\n\n\n\n\n\n\n\nLogical values can be TRUE or FALSE.\nThey are primarily used when comparing objects.\nRun the below commands to output Logical values using the various logical operators.\nNote: when ! is used in operators it means “not”. When used, ! always goes at the front of the operator.\n\n#Logical\n# 2 less than 4 \n2 &lt; 4\n# 2 greater than 4\n2 &gt; 4\n# 2 less than or equal to 4\n2 &lt;= 4\n# 2 greater than or equal to 4\n2 &gt;= 4\n# 2 equal to 4\n2 == 4\n# 2 not not equal to 4\n2 != 4\n\nIt is probably not immediately obvious how useful logicals are, but you’ll see their usefulness later in the course.\n\n\n4.2.3 String\n\n\n\n\n\n\n\n\n\nStrings are text and can be modified in R in ways you would normally want to modify text. They are called strings as they are strings of characters. Strings are flanked by quote marks. Double quotes (\"\") are preferred but single quotes can also be used ('').\nType and run the below examples to get some practice with strings.\nA string object can consist of a string containing one character:\n\n#String\none_character_string &lt;- \"A\"\none_character_string\n\nA string object can consist of a string containing multiple characters:\n\nword_string &lt;- \"alphabet\"\nword_string\n\nA string can contain all the different characters and any number of them. The only exception is that if you try to put a double quote in your string it will cause an issue.\n\nlong_string &lt;- \"Strings can be long and contain more than letters. \\\\.(\"\nlong_string\n\nA string doesn’t need letters, it can consist of only numbers. Note the terms string and character can be used interchangeably.\n\nnumber_string &lt;- \"1066\"\nnumber_string\nclass(number_string)\n\nYou can convert a numeric to a string/character.\n\nnumber &lt;- 1066\nnumeric_to_string &lt;- as.character(number)\nnumeric_to_string\nclass(numeric_to_string)\n\nAn appropriate string can be converted to a numeric. This is useful as mathematical operators will not work with strings.\n\n#will get an error as strings and maths don't mix\n\"6\" - 3\n#will work as maths and numerics work\nas.numeric(\"6\") - 4\n#Below will not work as only strings containing numbers can be converted to numeric\nas.numeric(\"not_a_number_12\")\n\nYou can use certain logical operators to compare strings though:\n\n\"character\" == \"character\"\n\"1066\" != \"character\"\n\"numeric\" == \"string\"\n\nThe paste() function is very useful to combine two or more strings into one.\n\npaste(\"The following is a string:\", long_string) \npaste(number_string, \"and the\", word_string)\n#By default paste will put a space (sep = \" \") between each string you provide\n#You can use the sep option to specify your own\npaste(\"However\", \" this is separated by a comma\", sep = \",\")\n#Or you can make it so there is no separator\npaste(\"no separator\",numeric_to_string, sep = \"\")\n#Alternatively you can use paste0()\n#Where there is no separator by default (sep =\"\")\npaste0(\"no separator\",numeric_to_string)"
  },
  {
    "objectID": "04-R_objects.html#code-section-continued",
    "href": "04-R_objects.html#code-section-continued",
    "title": "4  R objects",
    "section": "4.3 Code section continued",
    "text": "4.3 Code section continued\nAfter all that you will have some nice code and annotations in your script editor for the Classes code section.\nMaking a code section is not very useful until you have multiple code sections. To show this create a new code section at the bottom of your script called “Data structures”. This new code section will be used for the next section.\n\n# Data structures ####\n\nWith the new code section created we can now see why code sections are so useful. Go to the text that denotes the first code section (“Classes”). Look between the numbers on the left that signify the line number, and the text. You will see an arrow pointing downwards. You can click that arrow and it will collapse the code section. Click the arrow, now pointing right, and it will expand the code section. This is super useful so you can hide code sections in your script that you don’t currently need to look at.\n\n\n\n\n\n\n\n\n\nWith the “Classes” code section collapsed let us continue to the next section. There will be less annotations in this book as I expect you will make your own now."
  },
  {
    "objectID": "04-R_objects.html#data-structures",
    "href": "04-R_objects.html#data-structures",
    "title": "4  R objects",
    "section": "4.4 Data structures",
    "text": "4.4 Data structures\nData structures describe how data is structured in an object. We will go into 3 main types of data structures.\n\nScalar\nVectors & Lists\nMatrices & Data frames\n\n\n4.4.1 Scalar\n\n\n\n\n\n\n\n\n\nA scalar consists of one value in an object. This can be one string, one numeric, one logical etc. We have only been working with scalars thus far but this is about to change.\n\n\n4.4.2 Vectors & Lists\n\n\n\n\n\n\n\n\n\nA R object can hold multiple values. Many data structures can do this with the simplest being a vector.\nA vector can be created with the c() function. This function will combine the provided objects into a single vector or list.\nVectors and lists are both 1-dimensional data structures. Vectors can only contain one class (homogeneous) whilst lists can contain multiple (heterogeneous). There is more to lists but we will not go into them.\nRun the following commands to produce variables which contain vectors.\n\nnumber_vec &lt;- c(1,2,4,8,16)\nnumber_vec\nnumber_series_vec &lt;- 1:6\nnumber_series_vec\nanimals &lt;- c(\"Whale\",\"Seal\",\"Hedgehog\",\"Mouse\",\"Owl\",\"Squirrel\",\"Vole\",\"Shrew\")\nanimals\n\nElements of a vector can be accessed through their indices:\n\nbirds &lt;- animals[5]\nbirds\naquatic &lt;- animals[1:2]\naquatic\nrodents &lt;- animals[c(4,6,7)]\nrodents\nmammals &lt;- animals[-5]\nmammals\n\nYou can use operators and functions on a vector. When you do each scalar within the vector will be acted upon.\n\nnumber_vec - 1\nnumber_vec * 2\nlog(number_vec)\nlength(rodents)\n\nSome functions are specifically used for vectors:\n\nmean(number_vec)\nsummary(number_vec)\n\nWe can also test the values within vectors:\n\naquatic == \"Whale\"\nnumber_vec &gt; 4\nnumber_vec[number_vec &gt; 4]\n\nThe paste() function can be used to paste string scalars to other string scalars or to string vectors:\n\npaste(\"Animals\", animals)\nbird_or_mammal &lt;- c(\"mammal\",\"mammal\",\"mammal\",\"mammal\",\"bird\",\"mammal\",\"mammal\",\"mammal\")\npaste(animals, bird_or_mammal, sep = \":\")\npaste(animals, \" is a \", bird_or_mammal, sep = \"\")\n\n\n\n4.4.3 Data frames & Matrices\n\n\n\n\n\n\n\n\n\nData frames & matrices are 2-dimensional data structures as they have rows and columns.\nA matrix only contains 1 class (homogeneous). A data frame can contain multiple classes (heterogeneous), but each column can only contain one class.\nMost of the time data frames and matrices can be treated the same. Because of this I generally use data frames and so we will focus on them.\nR comes with a set of pre-loaded data. If you are interested you can use the function data() to see the full list.\nWe will have a quick look at the dataset “mtcars”. This is a data frame containing information on various cars. To look at the data frame in the console window run the below.\n\nmtcars\n\nTo get a better look save the data frame as a variable. The above shows the info in the console window. However we can have a better look at it in RStudio if we save it as a variable in our environment and then click the variable on the Environment pane of the “environment and history” window.\n\ncars_info &lt;- mtcars\n\nNow the variable will be listed in your Environment pane in the “environment and history” window . Click on the name “cars_info” in the Environment pane. A tab in your script editor will open so you can have a good look at the contents of the data frame.\nWhen you are ready, close the “cars_info” tab and remove the variable with the below command.\n\nrm(cars_info)\n\nNow it is time to create our own data frame.\nFirst we will create three variables containing vectors. These will be our three columns.\n\nCrab &lt;- c(10,1,1)\nOystercatcher &lt;- c(5,6,4)\nStarfish &lt;- c(3,3,7)\n\nNow let us create the data frame.\n\n#Using the function data.frame to create a data frame\nbeach_df &lt;- data.frame(Crab,Oystercatcher,Starfish)\n\nLook at the variable “beach_df” (it is useful to use “df” in variable names to signify it is a data frame) and you will see that each vector has become a column. The variable names have become the column names (this is why we used capital letters in the variable names).\nYou can think of data frames in three different ways:\n\nA list of columns\nA list of rows\nA table\n\nLook at the column and row names with two new functions.\n\ncolnames(beach_df)\nrow.names(beach_df)\n\nWe can use the function row.names() and the assignment operator to change the row names to something more useful.\n\nrow.names(beach_df) &lt;- c(\"Formby\",\"West Kirby\",\"Crosby\")\n\nNow look at your “beach_df” data frame to see the difference.\nThat is quite a lot to go through so let us reinforce it all with exercise!"
  },
  {
    "objectID": "05-R_objects_exercises.html#df",
    "href": "05-R_objects_exercises.html#df",
    "title": "5  R objects exercises",
    "section": "5.1 df",
    "text": "5.1 df\nNote: The top row is the column names and the left-most column is the row names.\n\n\n\n\n\n\nOne\nThree\nFive\n\n\n\n\nTwo\n2\n6\n10\n\n\nFour\n4\n12\n20\n\n\nSix\n6\n18\n30"
  },
  {
    "objectID": "05-R_objects_exercises.html#beach_df_2",
    "href": "05-R_objects_exercises.html#beach_df_2",
    "title": "5  R objects exercises",
    "section": "5.2 beach_df_2",
    "text": "5.2 beach_df_2\nNote: The top row is the column names and the left-most column is the row names.\n\n\n\n\n\n\nCrab\nOystercatcher\nSandpiper\nStarfish\n\n\n\n\nFormby\n10\n5\n1\n3\n\n\nWest Kirby\n1\n6\n1\n3\n\n\nCrosby\n1\n4\n2\n7\n\n\nNew Brighton\n4\n4\n3\n4"
  },
  {
    "objectID": "06-R_objects_solutions.html#df-solution",
    "href": "06-R_objects_solutions.html#df-solution",
    "title": "6  R objects solutions",
    "section": "6.1 df solution",
    "text": "6.1 df solution\n\n6.1.1 Step 1\nCreate vectors for columns and row names:\n\nOne &lt;- c(2,4,6)\nThree &lt;- c(6,12,18)\nFive &lt;- c(10,20,30)\nrow_names &lt;- c(\"Two\", \"Four\", \"Six\")\n\n\n\n6.1.2 Step 2a\nCreate the data frame from vectors:\n\ndf &lt;- data.frame(One,Three,Five)\n\nAdd row names:\n\nrow.names(df) &lt;- row_names\n\n\n\n6.1.3 Step 2b\nAlternatively you can define the row names in the data.frame() function as an option:\n\ndf &lt;- data.frame(One,Three,Five, row.names = row_names)"
  },
  {
    "objectID": "06-R_objects_solutions.html#beach_df_2-solution",
    "href": "06-R_objects_solutions.html#beach_df_2-solution",
    "title": "6  R objects solutions",
    "section": "6.2 beach_df_2 solution",
    "text": "6.2 beach_df_2 solution\n\n6.2.1 Step 1\nCreate vectors for columns and row names:\n\nCrab &lt;- c(10,1,1,4)\nOystercatcher &lt;- c(5,6,4,4)\nSandpiper &lt;- c(1,1,2,3)\nStarfish &lt;- c(3,3,7,4)\nrow_names_2 &lt;- c(\"Formby\",\"West Kirby\",\"Crosby\",\"New Brighton\")\n\n\n\n6.2.2 Step 2a\nCreate the data frame from vectors:\n\nbeach_df_2 &lt;- data.frame(Crab,Oystercatcher,Sandpiper,Starfish)\n\nAdd row names:\n\nrow.names(beach_df_2) &lt;- row_names_2\n\n\n\n6.2.3 Step 2b\nAlternatively you can define the row names in the data.frame() function as an option:\n\nbeach_df_2 &lt;- data.frame(Crab,Oystercatcher,Sandpiper,Starfish, row.names = row_names_2)"
  },
  {
    "objectID": "07-Files_and_subsetting_data.html#reading-from-a-file",
    "href": "07-Files_and_subsetting_data.html#reading-from-a-file",
    "title": "7  Files and subsetting data",
    "section": "7.1 Reading from a file",
    "text": "7.1 Reading from a file\n\n\n\n\n\n\n\n\n\nIn chapter 4 we created data frames with R functions. This was useful to help understand how data frames work in R. However, in real life you will most likely not do this very often. Instead you will have data files you need to analyse with R.\nYou can get your data into R by having R read your file.\nPrior to using a file you will need to acquire it. Make a directory/folder called “Chapter_7” within your main directory/folder for this workshop. Download the following file into your “Chapter_7” directory:\n\n\n\n Download Liverpool_beaches.csv\n\n\n\n Next set your working directory to this new directory (Directories). You will stay here for this chapter.\nThe next task to carry out is to read in the file “Liverpool_beaches.csv” . Before reading in the file we can check the contents of the file. This can be carried out by opening it with notepad (or similar text tool) or viewing the file with RStudio.\nTo view the file with RStudio:\n\nUse the Files pane of the MISC window to navigate to the directory containing the file.\nClick on the file name and then click “View File”\nThis will open a tab in the Source window matching the file name\n\nYou will notice that the values are separated by commas as this is a “comma separated value” (.csv) file. Additionally, this is the same data as the “beach_df_2” data frame you created in the chapter 5 exercises.\nNote: Create a new R script file called “3-Files_and_subsetting.r” for this chapter’s scripts.\nThere are various functions to read in files into R. My favourite that I find most consistent is read.csv(). Use this function to read in the file “Liverpool_beaches.csv”:\n\nliv_beaches_df &lt;- read.csv(\"Liverpool_beaches.csv\")\n\nHave a look at the newly created data frame. Is it how you would like it?\nThe row names are empty and the beach names are in the first column. Let us fix this and make it so the beach names are the row names. This can be carried out by including the option row.names = 1 to specify the 1st column will be the row names:\n\nliv_beaches_df &lt;- read.csv(\"Liverpool_beaches.csv\", row.names = 1)\n\nWe now know how to read in a csv file with read.csv. Therefore we will next read in a tab separated file containing the sales figures of fictional clothing stores through the seasons.\nDownload the file “Clothing_stores.tsv” into your “Chapter_7” directory and look at the file contents before reading them in.\n\n\n\n Download Clothing_stores.tsv\n\n\n\n\nNow use read.csv() to read in the file. We’ll set row.names = 1 again but we will also include the option sep = \"\\t\". This option specifies the columns are separated (sep) by tabs (\"\\t\").\n\nclothing_df &lt;- read.csv(\"Clothing_stores.tsv\", row.names = 1, sep = \"\\t\")\n\nLook at the resulting data frame and you will notice the column names have been changed by R. This is annoying but thankfully there is an easy fix. Read in the data again with the inclusion of the parameter check.names = FALSE. This will stop the function read.csv() from ‘checking’ and ‘fixing’ the column names. I always use this option.\n\nclothing_df &lt;- read.csv(\"Clothing_stores.tsv\", row.names = 1, \n                        sep = \"\\t\", check.names = FALSE)\n\nYou may want to open excel files with R. Normally to do this I open the file in excel and save it as a .csv or a tab separated file and read this into R. Alternatively there are R packages that can directly read in excel files. If this is something you would like to do you can look at the following package:\nhttps://readxl.tidyverse.org/\nAn important note is that reading in a file into R will not change the file. You are creating a new R object. Modifying this object will not alter the original file. Later in the materials we will look into how to create new files or overwrite files by writing."
  },
  {
    "objectID": "07-Files_and_subsetting_data.html#subsetting-data",
    "href": "07-Files_and_subsetting_data.html#subsetting-data",
    "title": "7  Files and subsetting data",
    "section": "7.2 Subsetting data",
    "text": "7.2 Subsetting data\n\n\n\n\n\n\n\n\n\nR allows you to specify specific points in R objects. This is one of the primary reasons R is so useful and flexible. With good use of assignment operators this allows for the subsetting of variables.\n\n7.2.1 Vectors\n\n\n\n\n\n\n\n\n\nWe will start with vectors. Before carrying out and subsetting let us create some new vectors. We will use a new function to create these, seq().\nTip: Look at the resulting vectors and, use ?seq() or search online to understand the seq() function better.\n\neven_seq &lt;- seq(from = 0, to = 8, by = 2)\nodd_seq &lt;- seq(from = 1, to = 9, by = 2)\nlong_seq &lt;- seq(from = 10, to = 300, by = 10)\n\nGrand! Now let us subset the vectors with square brackets [].\nVectors are one-dimensional, we therefore provide the square brackets with one number or one range of numbers. The number/s we provide in the square brackets are the index.\nTry out indexing/subsetting the vectors.\n\neven_seq[2]\nodd_seq[1]\nlong_seq[10]\neven_seq[2:3]\nodd_seq[1:4]\nlong_seq[21:24]\nlong_seq[24:21]\neven_seq[c(2,3)]\nodd_seq[c(1,3,2,5)]\nlong_seq[c(1,21,21:24,24:21,1)]\n#As long as the contents within the [] equal numbers they will work\neven_seq[seq(from = 1, to = 3, by = 2)]\neven_seq[seq(from = 0, to = 5, by = 3)]\nlong_seq[seq(from = 1, to = 19, by = 2)]\neven_seq[1*2]\nodd_seq[2/1]\nlong_seq[(1:10)*2]\n\nThe vectors even_seq and odd_seq have the indexes 1,2,3,4, and 5 as they each contain 5 scalars. What if we try to use a higher number to index than is available?\n\neven_seq[6]\neven_seq[c(4,7)]\nodd_seq[3:9]\n\nAs you can see the above all work with no complaints. Any indexes that are out of range will return a NA value. NA stands for ‘Not Available’. We will not go into how NA works in R too much. The most important thing to know about NA is that you will most likely get NA if you use operators or functions with NA. Below are a few examples:\n\n#Will give NA\n1 + NA\n2 - NA\neven_seq[2] * NA\nodd_seq[5] / NA\n#mean() function without NA\nmean(even_seq[2:5])\n#mean() function with NA\nmean(c(1,2,3,4,5,NA))\nmean(even_seq[2:7])\n\nAbove we subsetted vectors by specifying which indexes we want. We can also specify which indexes we don’t want:\n\neven_seq[-2]\nodd_seq[-3:-5]\nlong_seq[c(-1,-2,-6)]\n\nThe rep() function will replicate a scalar/vector a specified amount of times. We will use this function to overwrite our previously created variables with longer versions:\n\n#Replicate vector even_seq 2 times\nrep(x = even_seq, 2)\n#Replicate vector even_seq 4 times and then assign even_seq as the newly created vector\neven_seq &lt;- rep(x = even_seq, 4)\n#More examples\nodd_seq &lt;- rep(x = odd_seq, 4)\nlong_seq &lt;- rep(x = long_seq, 3)\n\nLogical operators can be used as indexes to subset vectors. Having a logical expression (i.e. 1 &gt; 2) as the index will cause all TRUE positions to be included and all FALSE positions to be excluded.\nTip: If it is difficult to deduce what the below commands are doing you can run the part in the square brackets by itself. Remember if you highlight code in the script editor it will only run that part, excluding unhighlighted parts of script in the same line.\n\neven_seq &gt; 3\neven_seq[even_seq  &gt; 2]\nodd_seq[odd_seq &lt;= 1 ]\nlong_seq &lt;- long_seq[long_seq &lt; 50]\n\nWe will quickly look at a new operator, %%. This is the modulus operator, it divides two numbers and gives the remainder of the division.\nWith the modulus operator, logical expressions, and subsetting we can extract even or odd numbers from a vector:\n\n#First some basic modulus examples\n2%%2\n3%%2\n#Create a vector with numbers 0 to 9\nsingle_digit_vec &lt;- 0:9\n#Extract even numbers then odd numbers from the vector\n#We carry this out by determining if numbers are divisible by 2 or not\neven_seq &lt;- single_digit_vec[(single_digit_vec %% 2) == 0 ]\nodd_seq &lt;- single_digit_vec[(single_digit_vec %% 2) != 0]\n#We can determine which numbers in a vector are divisible by any specific number\n#Divisible by 3\n#remember variable names cannot start with numbers\ndivis_3_vec &lt;- single_digit_vec[(single_digit_vec %% 3) == 0]\n#Divisible by 7\ndivis_7_vec &lt;- single_digit_vec[(single_digit_vec %% 7) == 0]\n#Try out other numbers!\n\n\n\n7.2.2 Data frames\n\n\n\n\n\n\n\n\n\nData frames can be subset similar to vectors. As with vectors you can use []. Additionally, $ can be used to subset data frames.\nSquare brackets must be provided indexes for rows and for columns. The structure for this is df[row,column]. It is very useful to remember that R always wants rows first then columns second.\nTo practice subsetting data frames with square brackets we will read in a new file called - Census_2011_L_postcodes_counts.csv]. This contains UK 2011 census information on total residents for postcodes that start with the letter L.\nDownload the following file into your “Chapter_7” directory:\n\n\n\n Download Census_2011_L_postcodes_counts.csv\n\n\n\n The source of the data is: https://www.nomisweb.co.uk/census/2011/postcode_headcounts_and_household_estimates\nRead the downloaded file into R:\n\nL_2011_census_df &lt;- read.csv(\"Census_2011_L_postcodes_counts.csv\",\n                             check.names = FALSE,\n                             row.names = 1)\n\nNow for some subset commands:\n\n#Scalar from the 1st row and 1st column\nL_2011_census_df[1,1]\n#Row names and column names can be used for indexing\n#Scalar from the row called L10 1LD and the column called Area\nL_2011_census_df[\"L10 1LD\",\"Area\"]\n#More examples\nL_2011_census_df[1:10,2]\nL_2011_census_df[1:10,\"District\"]\nL_2011_census_df[3,2:4]\nL_2011_census_df[\"L10 1LD\",2]\nL_2011_census_df[1:10,\"Total\"]\nL_2011_census_df[c(1,3,5,6),c(\"Total\",\"Occupied_Households\")]\n\nDepending on how you subset a data frame you may get a scalar, vector, or data frame. Below describes which you will get based on the subsetting.\n\nScalar:\n\nIndexing to get a single value by choosing one row and one column.\nE.g. L_2011_census_df[1,1]\n\nVector:\n\nIndexing so you get multiple values from one column. This occurs as each column is in essence a vector.\nE.g. L_2011_census_df[1:10,2]\n\nData frame:\n\nIndexing so you get multiple values from a row or multiple rows. Subsetting a data frame like this provides you a data frame.\nE.g. L_2011_census_df[3,2:4] or L_2011_census_df[3:4,2:4]\n\n\nA quick function to subset a data frame is head(). By default it will return the first 6 rows.\n\n#Return first 6 rows\nhead(L_2011_census_df)\n#Return first 10 rows\nhead(L_2011_census_df, 10)\n\nThe data frame is quite large. We will therefore use the head() function and the assignment operator to make the data frame smaller for further examples.\n\nL_2011_census_df &lt;- head(L_2011_census_df, 20)\n\nTo return all the rows of the specified columns you can leave the part before the comma empty. Similarly you can leave the part after the comma empty to return all of the columns of the specified rows. Leave both sides empty and you will get the entire data frame.\n\nL_2011_census_df[,]\nL_2011_census_df[,2]\nL_2011_census_df[3,]\nL_2011_census_df[,\"District\"]\nL_2011_census_df[2:4,]\n\nThe sign $ allows you to indicate which column you would like from the data frame. This is done like so:\n\nL_2011_census_df$Area\nL_2011_census_df$District\nL_2011_census_df$Total\n\nYou will notice that the above commands return vectors. We can therefore subset these vectors with []:\n\nL_2011_census_df$Area[2]\nL_2011_census_df$District[2]\nL_2011_census_df$Total[4:7]\n\nBelow are a selection of useful functions that can be used on vectors.\n\n#Sum the values of a numeric vector\nsum(L_2011_census_df$Total)\n#Mean of the values of a numeric vector\nmean(L_2011_census_df$Total)\n\nThe above functions are useful but limiting if you are working with data frames. Thankfully there are also many functions used specifically for data frames (they can also be used for matrices).\n\n#Sum numeric columns\ncolSums(L_2011_census_df[,3:6])\n#Sum numeric rows\nrowSums(L_2011_census_df[,4:5])\n#Mean of numeric columns\ncolMeans(L_2011_census_df[,3:6])\n#Mean of numeric rows\nrowMeans(L_2011_census_df[,4:5])\n#Summary information for each column\n#This works for string and numeric columns with different outputs\nsummary(L_2011_census_df)\n\nTry out some of the above commands with the entire data frame. Do they give an error? Is so, why?\nBefore we learn how to write data to a file I will introduce one more data frame associated function. t() which stands for transpose:\n\nL_2011_census_df[3:5]\nt(L_2011_census_df[,3:5])\nsummary(t(L_2011_census_df[,3:5]))\n\nTry the above commands without subsetting the data frame. What is happening and why?"
  },
  {
    "objectID": "07-Files_and_subsetting_data.html#writing-to-a-file",
    "href": "07-Files_and_subsetting_data.html#writing-to-a-file",
    "title": "7  Files and subsetting data",
    "section": "7.3 Writing to a file",
    "text": "7.3 Writing to a file\n\n\n\n\n\n\n\n\n\nBefore we write data to a file we will create a new data frame from “L_2011_census_df”.\nFirst I like to create a new variable from our old variable if there are many steps. This means if we make a mistake we can go back and recreate the new variable.\n\nL_2011_census_t_df &lt;- L_2011_census_df\n\nNext step we will create a new column called “Average_per_occupied_households”.\nNOTE: I am including many ways to subset columns as reminders. Normally I wouldn’t have so many different ways in one command.\nNOTE: We are using “_” instead of spaces as R doesn’t particularly like spaces in column names. We will see how to use spaces later.\n\nL_2011_census_t_df$Average_per_occupied_households &lt;- \n  L_2011_census_t_df[,3] / L_2011_census_t_df[,\"Occupied_Households\"]\n\nHave a look at the current data frame. You may notice an Inf value. This appears as when you divide a number by 0 in R you will get Inf. I am not sure how a Post code has 174 residents and 0 Occupied households but it doesn’t matter for us.\nThe final step before writing is to transpose the data frame leaving out the Area and District columns:\n\n#Transpose dataframe\nL_2011_census_t_df &lt;- t(L_2011_census_t_df[,3:7])\n#Check structure\nstr(L_2011_census_t_df)\n#It is not a dataframe\n#Let us therefore convert it to a data frame\nL_2011_census_t_df &lt;- as.data.frame(L_2011_census_t_df)\n#Structure check\nstr(L_2011_census_t_df)\n\nAfter all that let us write the data frame to a file called “Census_info_2011.csv”. When reading from a file I prefer read.csv(), however when writing to a file I prefer write.table(). With this function we will include the option sep=\",\" to have commas as the column separators. We will also include the option col.names=NA to create an empty space above the row names. If this was not included then the first column name would be above the row names.\n\nwrite.table(L_2011_census_t_df, file = \"Census_info_2011.csv\", sep = \",\", col.names=NA)\n\nHave a look at the file contents with RStudio.\nLet us do it one more time with the clothing store info. First let us read in the file again in case you do not have it. Then we will create a total sales column and finally transpose the data frame:\n\n#Read in\nclothing_df &lt;- read.csv(\"Clothing_stores.tsv\", row.names = 1, \n                        sep = \"\\t\", check.names = FALSE)\n#Create total column\n#We are referring to a column name with spaces\n#Therefore we must surround the name with `\n#The button for ` is left of the 1 key and below the esc key\nclothing_df$`Total sales` &lt;- rowSums(clothing_df)\n#Transpose ensuring output is a data frame\nclothing_t_df &lt;- as.data.frame(t(clothing_df))\n\nWrite the data frame to a tab delimited file (.tsv). This time we will make it so the row and column names are not surrounded by quotes:\n\nwrite.table(clothing_t_df, \n            \"Clothing_stores_transposed.tsv\", \n            sep = \"\\t\",  \n            col.names=NA, \n            quote = FALSE)\n\nWith the fundamentals of reading, subsetting data frames, and writing covered it is time to carry out some exercises."
  },
  {
    "objectID": "08-Files_exercises.html#bats",
    "href": "08-Files_exercises.html#bats",
    "title": "8  Files exercises",
    "section": "8.1 Bats",
    "text": "8.1 Bats\n\n\n\n\n\n\n\n\n\nFirst we will look at the file bat_roosts.csv. This contains information on the max number of roosts for different Bat species in different UK regions.\nThe data is from: “Bat Conservation Trust 2020. Roost Count peak counts summary data”. Available from https://www.bats.org.uk/our-work/national-bat-monitoring-programme/reports/nbmp-annual-report\nFor this file carry out the below tasks:\n\nRead in the file “bat_roosts.csv” as a data frame variable called “bat_df”. Ensure the row names contain the Regions (Channel Islands, East Midlands, etc.).\nInspect the variable and ensure there are only numerics within the data frame with all strings only being in column and row names.\nAdd a row to “bat_df” called “UK” that contains the totals for each Species.\nAdd a column to “bat_df” called “All_Bat_Species” that contains the totals for each Region.\nCreate a transposed data frame of “bat_df” called “bat_t_df”.\nWrite the data frame “bat_t_df” to a comma separated file called “bat_roosts_t.csv”. Ensure there are no quotes surrounding the row or column names.\n\nNow that you have carried that out, can you answer the following questions?\n\nWhich region has no roosts?\nWhich Bat species has the highest number of roosts across the UK?\nWhich Bat species has the lowest number of roosts across the UK?"
  },
  {
    "objectID": "08-Files_exercises.html#uk-retail",
    "href": "08-Files_exercises.html#uk-retail",
    "title": "8  Files exercises",
    "section": "8.2 UK retail",
    "text": "8.2 UK retail\n\n\n\n\n\n\n\n\n\nNext we have the file UK_retail.tsv containing UK retail information for each month from September 2017 to September 2020. The values are seasonally adjusted volume sales. The data comes from: https://www.ons.gov.uk/businessindustryandtrade/retailindustry/bulletins/retailsales/september2020.\nCarry out the below tasks:\n\nRead in the file “UK_retail.tsv” as a data frame variable called “uk_retail_df”. Ensure the row names contain the YearMonth info (2017SEP, 2017OCT, etc.).\nCreate a data frame called “uk_retail_2020_df” containing the rows for 2020 from “uk_retail_df”.\nFor each month in 2020 print out the phrase “The Food retail index for &lt;YearMonth&gt; was &lt;Food&gt;”. For example the first phrase will be “The Food retail index for 2020JAN was 101.9”. This can be done with one line of code using the paste() function.\nMake a total row and an average (mean) row for “uk_retail_2020_df”. Ensure you are not including the total in the mean.\nFinally write out the data frame “uk_retail_2020_df” as a tab separated file called “UK_retail_2020.tsv”.\n\nNow that you have carried that out, can you answer the following questions?\n\nWhich retail sectors have a lower average than their February 2020 value?\nWhich retail sector was the highest for 2020?\nWhich sector was the most stable?\n\nGreat! Have a look at the solutions and see how they compare to your code."
  },
  {
    "objectID": "09-Files_solutions.html#bats-solution",
    "href": "09-Files_solutions.html#bats-solution",
    "title": "9  Files solutions",
    "section": "9.1 Bats solution",
    "text": "9.1 Bats solution\n\n\n\n\n\n\n\n\n\nRead in the file as a data frame:\n\nbat_df &lt;- read.csv(\"Chapter_8_files/bat_roosts.csv\", row.names = 1, check.names = FALSE)\n\nAdd a row with column totals:\n\nbat_df[\"UK\",] &lt;- colSums(bat_df) \n\nAdd a column with row totals:\n\nbat_df$All_Bat_Species &lt;- rowSums(bat_df) \n\nCreate transposed data frame:\n\nbat_t_df &lt;- as.data.frame(t(bat_df)) \n\nWrite file:\n\nwrite.table(bat_t_df, \n            file = \"Chapter_8_files/bat_roosts_t.csv\", \n            sep = \",\", quote = FALSE, col.names = NA)"
  },
  {
    "objectID": "09-Files_solutions.html#uk-retail-solution",
    "href": "09-Files_solutions.html#uk-retail-solution",
    "title": "9  Files solutions",
    "section": "9.2 UK retail solution",
    "text": "9.2 UK retail solution\n\n\n\n\n\n\n\n\n\nRead in file:\n\nuk_retail_df &lt;- read.csv(\"Chapter_8_files/UK_retail.tsv\", \n                         sep = \"\\t\", row.names = 1, \n                         check.names = FALSE)\n\nCreate 2020 data frame: Read in file:\n\n#Can index to get the desired columns\nuk_retail_2020_df &lt;- uk_retail_df[29:37,]\n#Alternatively the tail() function can be used\n#It is like head() but will get lowest rows\nuk_retail_2020_df &lt;- tail(uk_retail_df, n = 9)\n\nPrint food index phrases:\n\npaste(\"The Food retail index for\", row.names(uk_retail_2020_df),\n      \"was\", uk_retail_2020_df$Food, \n      sep = \" \")\n\nTotal and mean rows:\n\nuk_retail_2020_df[\"Total\",] &lt;- colSums(uk_retail_2020_df)\nuk_retail_2020_df[\"Average\",] &lt;- colMeans(head(uk_retail_2020_df, n = 9))\n\nWrite out file:\n\nwrite.table(uk_retail_2020_df, \"Chapter_8_files/UK_retail_2020.tsv\", \n            sep = \"\\t\", col.names = NA, quote = FALSE)"
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#r-conventions",
    "href": "10-Handy_tips_and_tricks.html#r-conventions",
    "title": "10  Handy tips & tricks",
    "section": "10.1 R conventions",
    "text": "10.1 R conventions\n\n\n\n\n\n\n\n\n\nR conventions are style guides. You do not need to follow them but they are intended to help make code easier to read. There are lots of different suggestions for different parts of R code. Here we will only look at conventions for object/variable names and wide vs long code formatting.\n\n10.1.1 Variable names\nVariable names have certain rules that must be followed. We covered these in chapter 2 but below is a reminder:\n\nMust start with a letter.\nCannot contain spaces.\nCannot start with a number.\nCannot share the same name as a command or function in R.\nThey are case sensitive. The variable name BB is different to the variable name bb which is different again to bB.\n\nOn top of these rules there are a few naming styles that are recommended. It is very good to choose one naming style and stick with it always. Below are three commonly used naming conventions for R. Look through them and choose your favourite to use.\n\n10.1.1.1 Snake case\n\n\n\n\n\n\n\n\n\nSnake case is my preferred naming convention due to my background. It consists of using lower case letters with underscores (_) between words. Numbers can also be used. Below are some examples of names in snake case.\n\none\ntwo_df\ntwo_2_df\nthree_four_five\nthree_four_five_2_vec\nthis_is_snake_case\n\n\n\n10.1.1.2 Period separated\n\n\n\n\n\n\n\n\n\nPeriod separated is almost identical to snake case. Just swap the underscores (_) with periods (.). Below are some examples of names in period separated.\n\none\ntwo.df\ntwo.2.df\nthree.four.five\nthree.four.five.2.vec\nthis.is.period.separated\n\n\n\n10.1.1.3 Camel case\n\n\n\n\n\n\n\n\n\nCamel case has no symbols to separate words. Instead after the first word every word starts with an upper case. Below are some examples of names in Camel Case.\n\none\ntwoDf\ntwo2Df\nthreeFourFive\nthreeFourFive2Vec\nthisIsCamelCase\n\nThere are exceptions when you will want to break your preferred naming style. One such example is when you are creating vectors to be used as columns for a data frame.\n\n\n10.1.1.4 Wide vs Long coding\nIf a command/function is only on one line then you were using wide coding. This is good with short commands and functions but is not very suitable for longer commands. Below are examples of long commands over one line each.\n\n#Create a data frame called df\ndf &lt;- data.frame(one = c(2,4,6), three = c(6,12,18), five = c(10,20,30), row.names = c(\"Two\", \"Four\", \"Six\"))\n#Create a data frame called beach_df_2\nbeach_df_2 &lt;- data.frame(Crab = c(10,1,1,4), Oystercatcher = c(5,6,4,4), Sandpiper = c(1,1,2,3), Starfish = c(3,3,7,4), row.names = c(\"Formby\",\"West Kirby\",\"Crosby\",\"New Brighton\"))\n\nCompare the above with the below long coding where arguments are separated by new lines.\n\n#Create a data frame called df\ndf &lt;- data.frame(one = c(2,4,6), \n                 three = c(6,12,18), \n                 five = c(10,20,30), \n                 row.names = c(\"Two\", \"Four\", \"Six\"))\n#Create a data frame called beach_df_2\nbeach_df_2 &lt;- data.frame(Crab = c(10,1,1,4), \n                         Oystercatcher = c(5,6,4,4),\n                         Sandpiper = c(1,1,2,3),\n                         Starfish = c(3,3,7,4), \n                         row.names = c(\"Formby\",\"West Kirby\",\"Crosby\",\"New Brighton\"))\n\nHopefully you will agree with me that the long coding is a lot easier and quicker to read.\nIf you are interested in more about R style guide I would recommend looking at the following resource: https://style.tidyverse.org/"
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#rstudio",
    "href": "10-Handy_tips_and_tricks.html#rstudio",
    "title": "10  Handy tips & tricks",
    "section": "10.2 RStudio",
    "text": "10.2 RStudio\nRStudio has many useful features which we have not covered. Let us remedy this and cover a few.\n\n10.2.1 Global options\n\n\n\n\n\n\n\n\n\nTo get to the RStudio Global Options click “Tools” in the RStudio Toolbar, then from the drop down menu click “Global Options..” . You should see something similar to the below:\n\n\n\n\n\n\n\n\n\nHave a look through the “General”, “Code”, and “Appearance” sections. The other sections are more advanced and I would suggest you ignore them currently.\nFeel free to click on options in the “Appearance” section to see what they do. If you do not like your choices you can click the “Cancel” button to negate your recent choices and close the window. If you want to save your changes you can click the “Apply” button.\nAlso change the following for later.\n\nGo to Global options.\nClick on the “Code” section on the left.\nClick on the “Completion” tab at the top.\nEnsure “Show code completion:” is set to “Manually (Tab)”\nClick “Apply” at the bottom followed by “OK”.\n\nThis will be useful for tab completion which we will cover shortly.\n\n\n\n\n\n\n\n\n\n\n\n10.2.2 Sweep buttons\n\n\n\n\n\n\n\n\n\nSweep buttons allow you to sweep away items you no longer want in RStudio. There are two main sweep buttons, one for the Console window and one for the Environment pane.\nThe sweep button for the console window will clear all the text in the console pane. This is useful if you have filled the console with lots of commands and data frames. This sweep button will not actually affect any of your work so do not be afraid to use it. The location of the sweep button is shown below.\n\n\n\n\n\n\n\n\n\nThe sweep button for the Environment pane is a bit more dangerous. This sweep button will clear all the objects from your environment. This will remove all the variables you have created. This is not too bad if you have been using the script editor to do your work as you can rerun all your commands to refill your environment. The location of the sweep button is shown below."
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#multiplication-table",
    "href": "10-Handy_tips_and_tricks.html#multiplication-table",
    "title": "10  Handy tips & tricks",
    "section": "10.3 Multiplication table",
    "text": "10.3 Multiplication table\n\n\n\n\n\n\n\n\n\nHopefully you’ll find the above useful. We will learn some new functions but before that let us create a quick data frame. You are going to make a multiplication table. The data frame will be a 10 by 10 table with numbers one to ten as the row names and the column names. The value in each cell/index will be equal to the row name number multiplied by the column name number.\nBefore looking at the code below can you think of a way to do this?\nThe code below shows a method to create this data frame. I have tried to show you a variety of methods to create the vectors below for demonstration purposes. Look at each command and make sure you understand how they work before continuing. In real life I would use one of these methods rather than many different methods.\nTip: If you double click a word/name in the script editor it will highlight it. You can then start typing to replace the highlighted word.\n\n#Vectors that will become columns\none &lt;- 1:10\ntwo &lt;- one*2\nthree &lt;- one+two\nfour &lt;- seq(from = 4, to = 40, by = 4)\nfive &lt;- (1:10)*5\nsix &lt;- seq(from = 6, by = 6, length.out = 10)\nseven &lt;- one * (rep(x = 7, 10))\nate &lt;- (1:80)[((1:80) %% 8) == 0]\nnine &lt;- one * (rep(x = 9, 10))\nten &lt;- (seq(100,1000,100))/rep(10,10)\n#Vector for row name\nrow_names &lt;- c(\"one\",\"two\",\"three\",\"four\",\"five\",\n               \"six\",\"sefen\",\"ate\",\"nine\",\"ten\")\n#Create data frame\nmultiplication_df &lt;- data.frame(one, two, three,\n                                four, five, six,\n                                seven, ate, nine, ten,\n                                row.names = row_names)\n\nHave a look at the resulting data frame. You may have noticed that two of the row names and one of the column names is incorrect. We’ll use the functions colnames()and row.names() along with indexes and assignment to change these.\n\n#Change the 8th column name (\"ate\") to \"eight\"\ncolnames(multiplication_df)[8] &lt;- \"eight\"\n#Change the 7th and 8th row names (\"sefen\" and \"ate\") to \"seven\" and \"eight\"\nrow.names(multiplication_df)[7:8] &lt;- c(\"seven\",\"eight\")"
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#tab-complete",
    "href": "10-Handy_tips_and_tricks.html#tab-complete",
    "title": "10  Handy tips & tricks",
    "section": "10.4 Tab complete",
    "text": "10.4 Tab complete\n\n\n\n\n\n\n\n\n\nTab completion is a very useful method when coding in any language. It takes some practice to get used to but it increases the speed of coding and drastically reduces typos.\nBefore we continue, the tab key is the key above the “CAPS” key and left of the ‘q’ key. If you would like a demonstration of tab completion please ask!\nThe first way to tab complete is to tab complete file names. First you will need to download the following files into your “Chapter_10-11” directory.\n\n\n\n Download tea_consumption.csv\n\n\n\n\n\n\n\n Download english_speaking_population_of_countries.tsv\n\n\n\n\nNext you will run the command that is below. However, when your cursor is in the double quotes first press tab. This will hopefully show a dropdown of selections. There are two ways to then get to your choice:\n\nUse the up and down arrow keys to move to the file name you want and then press enter to have the file name be autofilled.\nStart typing your file name till it is the top choice of the drop down menu. You can then press enter to autofill the file name.\n\nIn this case tab complete should only show “tea_consumption.csv” as it is the only file in your working directory.\n\ntea_df &lt;- read.csv(\"tea_consumption.csv\", check.names=FALSE)\n\nYou may notice that we only provided the file name and the check.names=FALSE for the read.csv() function. This is because of the format of the input file. In this case we do not want any of the input columns converted into row names. Additionally, the file was comma separated and the default separator to be used for read.csv() is commas. We will come back to this data frame so either keep the variable in your environment or keep the read code handy.\nLet us read in another file using tab complete to autofill the file name again.\n\nenglish_df &lt;- read.csv(\"english_speaking_population_of_countries.tsv\", \n                   sep = \"\\t\", \n                   row.names = 1,\n                   check.names = FALSE)\n\nGreat!\nThe second way to use tab completion is to autofill variable names, function names and options. To autofill a variable or function name you can start typing the name then press tab to get the dropdown menu.\nWhilst in the () of a function you can press tab to get a drop down menu of the option choices and press enter on the highlighted choice to autofill it.\nThis only works if the name currently exists. I.e. you cannot autofill a variable name if the variable is not in your environment.\nContinue using tab complete for the rest of the course. Practice makes perfect.\nIf you really don’t like it you don’t have to use it.\nData from above files:\n\nhttps://en.wikipedia.org/wiki/List_of_countries_by_tea_consumption_per_capita\nhttps://en.wikipedia.org/wiki/List_of_countries_by_English-speaking_population"
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#tea",
    "href": "10-Handy_tips_and_tricks.html#tea",
    "title": "10  Handy tips & tricks",
    "section": "10.5 Tea",
    "text": "10.5 Tea\n\n\n\n\n\n\n\n\n\nWe will have a quick look at the “tea_df”. This data shows the annual consumption of tea per capita with a rank based on the highest to lowest consumers.\nUnfortunately the third column has the annual per capita consumption in kilograms (KG) and pounds (LB) with the two values separated by a “_”. Thankfully we can use the function gsub() to fix this.\ngsub() will look for a specified pattern and replace it with a specified replacement. gsub() is only to be used for strings.\nBefore fixing our data frame I’ll show you some examples of gsub().\n\n#Scalar string with mistake\nsentence &lt;- \"The number 8 is spelt ate\"\n#gsub to print out line with mistake fixed\ngsub(pattern = \"ate\", replacement = \"eight\", sentence)\n#We can assign the scalar with the fix\nsentence &lt;- gsub(pattern = \"ate\", replacement = \"eight\", sentence)\n\n#Vector with unwanted capital As\nletter_vec &lt;- c(\"A\",\"Ab\",\"Abc\",\"Abcd\")\n#Replace pattern A with replacement a\nletter_vec &lt;- gsub(pattern = \"A\", replacement = \"a\", letter_vec)\n\n#Vector with unwanted info after \"_\"\nextra_info_vec &lt;- c(\"A_some\",\"B_nada\",\"C_stuff\",\"D_nill\")\n#Replace the _ and everything after it with nothing\n#We signify this with \".*\" which means any character (.) repeated zero or more times (*)\ngsub(pattern = \"_.*\", replacement = \"\", extra_info_vec)\n\n#What if we use gsub() with numerics?\ngsub(pattern = 5, replacement = 2, 1:20)\n#The output will be strings!\n\n. and * are regular expressions. There are many regular expressions but we will only use .* to represent “all strings”. The best part about this is we can put the .* after a specific character to replace the specific character and everything after it. Alternatively we can put the .* before a specific character to replace the specific character and everything before it.\nLet us carry this out with the “tea_df” so it will hopefully make more sense. We are going to do this so we can make a kilogram column and a pound column.\nNote: Make sure you have the “tea_df” in your environment before proceeding.\n\n#Create a column for lb (pound). We'll copy the KG_LB_annual_per_capita column\ntea_df$lb &lt;- tea_df$KG_LB_annual_per_capita\n#For the lb column we'll replace the \"_\" and everything before it with nothing\ntea_df$lb &lt;- gsub(pattern = \".*_\", replacement = \"\", tea_df$lb)\n\n#Change the column name KG_LB_annual_per_capita to kg\ncolnames(tea_df)[3] &lt;- \"kg\"\n#For the kg column we'll replace the \"_\" and everything after it with nothing\ntea_df$kg &lt;- gsub(pattern = \"_.*\", replacement = \"\", tea_df$kg)\n\n#Since the columns initially contained \"_\" they are string columns\n#Check if this is correct with the str() function\nstr(tea_df)\n#Change the kg and lb columns to numerics\ntea_df$kg &lt;- as.numeric(tea_df$kg)\ntea_df$lb &lt;- as.numeric(tea_df$lb)\n#Check with str() to see if it is now numerics\nstr(tea_df)\n\nIf you are interested in more regular expressions I would recommend looking at the following resources:\n\nhttps://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions\nhttps://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf"
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#english-speakers-across-the-world",
    "href": "10-Handy_tips_and_tricks.html#english-speakers-across-the-world",
    "title": "10  Handy tips & tricks",
    "section": "10.6 English speakers across the world",
    "text": "10.6 English speakers across the world\n\n\n\n\n\n\n\n\n\nNow we will do some processing of the “english_df” data frame. This shows the various number of english speakers with info on the number of those who have English as a first language and those who have it as an additional language. View the data frame to see its contents.\nThere are a lot of NA values. Looking at the values in the data frame try to figure out the two reasons that these NA values are present. Once you have had a thought you can have a look at the below two reasons.\n\nSome countries have zero population of English first speakers and some countries have zero population of people who speak English as an additional language.\nSome countries are missing data on the number of first and additional speakers, e.g.. Ukraine.\n\nWe will fix these issues one by one. First let us change all NAs to the number 0. The below method requires a lot of R knowledge to understand. I admit I do not fully understand it and I googled to find the answer. In this case the important part is that it works and it is a very short command.\n\nenglish_df[is.na(english_df)] &lt;- 0\n\nWe have changed all NAs. However, some of the rows in the 3rd and 4th column don’t equal the 2nd column. We’ll now remove these rows as they have missing data and we don’t want that here.\n\n#1st method with multiple lines for clarity\n#Create a vector of first language + additional language\nenglish_total_vec &lt;- english_df[,3] + english_df[,\"As an additional language\"]\n#Compare the column of total english speakers against the vector we created above\n#This will create a logical vector (TRUE or FALSE)\nenglish_total_logical_vec &lt;- english_df$`Total English speakers` == english_total_vec\n#Now create a new data frame by indexing the english_df rows by the logical vector\n#This will mean all TRUE rows will be kept and all FALSE rows will not be kept\nenglish_complete_datasets_df &lt;- english_df[english_total_logical_vec,]\n#Remove the vectors we do not need any more\nrm(english_total_vec,english_total_logical_vec)\n\n#2nd method is to carry out the above all in one command\nenglish_complete_datasets_df_2 &lt;- \n  english_df[\n    (english_df$`As first language` + english_df$`As an additional language`) ==\n      english_df$`Total English speakers`,\n    ]\n\n#We can compare our two created data frames with the identical() function\nidentical(english_complete_datasets_df,english_complete_datasets_df_2)\n\nI would use the one command method but the multi line method is just as valid. It doesn’t matter if your R code is not as compact as possible. The main things that matter are:\n\nYour code works. When writing your own code make sure you test it with small datasets first so you know it is doing what you think it is doing.\nYour code is well annotated. This will help with the first step and it will help your future self and others who will read your code.\nYou can read and understand your own code (annotation helps). There is little point in code you cannot read. You will most likely need to debug code you write (I know I do). Write code in a way that you know you will be able to read. If this means doing little parts over multiple lines then do it that way.\n\nWe will come back to the data frames “tea_df” and “english_complete_datasets_df” for the exercises. But let us go onto 2 more topics."
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#identical",
    "href": "10-Handy_tips_and_tricks.html#identical",
    "title": "10  Handy tips & tricks",
    "section": "10.7 Identical",
    "text": "10.7 Identical\n\n\n\n\n\n\n\n\n\nI touched on the identical() function above to compare the two resulting data frames. identical() will compare two objects and if the objects are exactly identical it will print TRUE. If they are not exactly identical it will print FALSE. The function can be given scalars, vectors, data frames etc. Below are some examples\n\nidentical(1,1)\nidentical(1,2)\nidentical(\"word\",\"word\")\nidentical(\"word\",\"orb\")\nidentical(1,\"1\")\nidentical(\"one\",1)\nidentical(1:5,1:5)\nidentical(1:5,6:9)\nidentical(1:5,1:6)\nidentical(c(\"a\",\"b\"),c(\"a\",\"b\"))\nidentical(c(\"a\",\"b\"),c(\"c\",\"b\"))\nidentical(c(\"a\",\"b\"),c(\"b\",\"a\"))\nidentical(english_df,english_df)\nidentical(english_df,tea_df)"
  },
  {
    "objectID": "10-Handy_tips_and_tricks.html#shortcuts",
    "href": "10-Handy_tips_and_tricks.html#shortcuts",
    "title": "10  Handy tips & tricks",
    "section": "10.8 Shortcuts",
    "text": "10.8 Shortcuts\n\n\n\n\n\n\n\n\n\nRStudio has many keyboard shortcuts for the Script editor. Some of these are common shortcuts used for other software and some are unique to RStudio.\nBelow are a few:\n\n“Ctrl + a” : This will highlight all text in a Script editor that your cursor is in. This is useful to run all your code by highlighting it all and then pressing “Ctrl + enter”. Be careful though as if you starting typing when all the text is highlighted it will delete it all.\n“Ctrl + z” : This will undo your last typing action. You can undo your actions till the last time you saved your script. Very useful if you accidentally delete some text.\n“Ctrl + c” : Copy highlighted text.\n“Ctrl + p” : Paste text.\n“Ctrl + shift + c” : This will put a # at the start of each highlighted line. This is useful to annotate multiple lines at once. To unannotate the lines, highlight them again and use the shortcut.\n“Ctrl + f” : This will bring the search and replace menu at the top of the Script editor.\n\nThere are a lot more shortcuts. If you want to see the full list go to “Tools” on the RStudio toolbar and then select “Keyboard Shortcuts Help”\nNow time for exercises!"
  },
  {
    "objectID": "11-Tips_exercises.html#tea-exercise",
    "href": "11-Tips_exercises.html#tea-exercise",
    "title": "11  Handy exercises",
    "section": "11.1 Tea exercise",
    "text": "11.1 Tea exercise\n\n\n\n\n\n\n\n\n\nThe first task you will carry out is printing out information from “tea_df”. Below is an example statement for the country Turkey:\n“Turkey is the number 1 consumer of tea. It consumes 5.8kg of tea annually per capita.”\nPrint out this statement for the countries Ireland, United Kingdom, France, and Australia with their relevant information. Make sure the kilogram value only has one decimal place.\nTip: You will require the functions paste() and round() from day 1."
  },
  {
    "objectID": "11-Tips_exercises.html#english-speakers-across-the-world-exercise",
    "href": "11-Tips_exercises.html#english-speakers-across-the-world-exercise",
    "title": "11  Handy exercises",
    "section": "11.2 English speakers across the world exercise",
    "text": "11.2 English speakers across the world exercise\n\n\n\n\n\n\n\n\n\nThe last exercise is to create the following table as a data frame called “english_100mil_df”. Use the “english_complete_datasets_df” data frame as a start.\n\n\n\n\n\n\n\nEligible population\nTotal English speakers\nAs first language\nAs an additional language\nFraction of population that are English speakers\n\n\n\n\nUnited States\n296603003\n283160411\n234171556\n48988855\n0.9546782\n\n\nNigeria\n156493000\n79000000\n0\n79000000\n0.5048149\n\n\nPhilippines\n110000000\n64025890\n36935\n63988955\n0.5820535\n\n\nBangladesh\n163323100\n30108031\n709873\n29398158\n0.1843464\n\n\nChina\n1210000000\n10000000\n0\n10000000\n0.0082645\n\n\nBrazil\n205000000\n10542000\n292000\n10250000\n0.0514244\n\n\nMexico\n120664000\n15686262\n0\n15686262\n0.1299995\n\n\nMean\n323154729\n70360371\n33601481\n36758890\n0.3450831\n\n\nTotal\n2262083103\n492522594\n235210364\n257312230\n0.2177297\n\n\n\n\n\n\n\nThe data frame only contains countries that have an eligible population that is greater than 100 million (100000000). Ensure the “Total” row was not calculated using the “Mean row”.\nWhen you have created yours check it with the above one. Is your value for the “Total” “Fraction of population that are English speakers” correct?.\nOnce you have created the data frame write it out as a comma separated file with the function write.table() called “English_top_7_populated_countries.csv”. Have the row and column names surrounded by quotes in your file. Make sure there is an empty value above your row names."
  },
  {
    "objectID": "11-Tips_exercises.html#extra-exercise",
    "href": "11-Tips_exercises.html#extra-exercise",
    "title": "11  Handy exercises",
    "section": "11.3 Extra exercise",
    "text": "11.3 Extra exercise\n\n\n\n\n\n\n\n\n\nIf you still have time this session and you do not have any questions please attempt the following task:\nCreate a multiplication table like the one in the practice from today. However have the row and column names equal one to twelve.\nThen write the data frame to a file. The name and format of the file is up to you.\nThere is no solution to this in the next section."
  },
  {
    "objectID": "12-Tips_solutions.html#tea-solution",
    "href": "12-Tips_solutions.html#tea-solution",
    "title": "12  Handy Solutions",
    "section": "12.1 Tea solution",
    "text": "12.1 Tea solution\n\n\n\n\n\n\n\n\n\nFirst ensure you have the “tea_df” loaded (remember your working directory will need to be in the correct location first). Also it needs to be preprocessed with the gsub() function.\n\ntea_df &lt;- read.csv(\"Chapter_10-11/tea_consumption.csv\", check.names=FALSE)\ntea_df$lb &lt;- tea_df$KG_LB_annual_per_capita\ntea_df$lb &lt;- gsub(pattern = \".*_\", replacement = \"\", tea_df$lb)\ncolnames(tea_df)[3] &lt;- \"kg\"\ntea_df$kg &lt;- gsub(pattern = \"_.*\", replacement = \"\", tea_df$kg)\ntea_df$kg &lt;- as.numeric(tea_df$kg)\ntea_df$lb &lt;- as.numeric(tea_df$lb)\n\nRemember there are many ways to carry this out but here is one.\nFirst create a vector with the names of the countries we want:\n\ncountries &lt;- c(\"Ireland\", \"United Kingdom\", \"France\", \"Australia\")\n\nSet the row names to the countries for easy indexing:\nNote: Row name must be unique which is the case here.\n\nrow.names(tea_df) &lt;- tea_df$Country\n\nCreate a data frame that only contains our countries of interest. We use the vector as an index for the rows.\n\ntea_df_subset &lt;- tea_df[countries,]\n\nHere because we are working with a temporary variable we will overwrite the kg column so the values only contain one decimal place\n\ntea_df_subset$kg &lt;- round(x = tea_df_subset$kg, digits = 1)\n\nLast step is to print out the statement. We will use paste0() which is exactly like paste() but the sep = option is set to \"\".\n\npaste0(tea_df_subset$Country, \" is the number \", tea_df_subset$Rank,\n       \" consumer of tea. It consumes \", tea_df_subset$kg, \"kg of tea annually per capita.\")"
  },
  {
    "objectID": "12-Tips_solutions.html#english-speakers-across-the-world-solution",
    "href": "12-Tips_solutions.html#english-speakers-across-the-world-solution",
    "title": "12  Handy Solutions",
    "section": "12.2 English speakers across the world solution",
    "text": "12.2 English speakers across the world solution\n\n\n\n\n\n\n\n\n\nFirst make sure the data frame is created. Remember to set your working directory to where the file is.\n\nenglish_df &lt;- read.csv(\"Chapter_10-11/english_speaking_population_of_countries.tsv\", \n                   sep = \"\\t\", \n                   row.names = 1,\n                   check.names = FALSE)\nenglish_df[is.na(english_df)] &lt;- 0\nenglish_complete_datasets_df &lt;- \n  english_df[\n    (english_df$`As first language` + english_df$`As an additional language`) ==\n      english_df$`Total English speakers`,\n    ]\n\nCreate new data frame only containing countries with an eligible population of &gt; 100 million.\n\nenglish_100mil_df &lt;- english_complete_datasets_df[\n  english_complete_datasets_df$`Eligible population` &gt; 100000000,\n  ]\n\nCreate column with fraction of total english speakers against population\n\nenglish_100mil_df$`Fraction of population that are English speakers` &lt;- \n  english_100mil_df$`Total English speakers` /\n  english_100mil_df$`Eligible population`\n\nCreate row with mean values\n\nenglish_100mil_df[\"Mean\",] &lt;- colMeans(english_100mil_df)\n\nCreate row with totals\n\nenglish_100mil_df[\"Total\",1:4] &lt;- colSums(english_100mil_df[1:7,1:4])\n\nCreate the total fraction of english speakers\n\nenglish_100mil_df[\"Total\",\"Fraction of population that are English speakers\"] &lt;- \n  english_100mil_df[\"Total\",\"Total English speakers\"] /\n  english_100mil_df[\"Total\",\"Eligible population\"]\n\nWrite the data as a file\n\nwrite.table(x = english_100mil_df, \n            file = \"Chapter_10-11/English_top_7_populated_countries.csv\", \n            col.names=NA,\n            quote = TRUE, \n            sep = \",\")"
  },
  {
    "objectID": "13-Plots_line_graphs_and_histograms.html#histogram",
    "href": "13-Plots_line_graphs_and_histograms.html#histogram",
    "title": "13  Histograms and Line graphs",
    "section": "13.1 Histogram",
    "text": "13.1 Histogram\n\n\n\n\n\n\n\n\n\nA histogram consists of bars showing the frequency of variables present in numbered ranges (bins). This allows you to see an approximate distribution of numerical data.\nWe are starting with histograms as the function hist(), which creates a histogram, only requires one vector.\nThe following code creates a numerical vector and then produces a histogram. When you run the hist() command a plot should appear in your “Plots” pane of the MISC window.\n\nnumeric_vec &lt;- 1:40\nhist(numeric_vec)\n\nYou will notice that the histogram is not very interesting. There are 8 bars all of equal size. This is because we plotted the numbers from 1-40 so numbers 1-5 are counted in the first bar/bin, 6-10 in the second bar/bin and so forth. To get a more interesting histogram we will create a more interesting vector.\nHistograms are good to see the numerical distribution of data. In this case we are going to look at the number of cities (with greater than 300,000 population) in EU countries (https://en.Wikipedia.org/wiki/List_of_cities_in_the_European_Union_by_population_within_city_limits).\nThe first step is to create a vector with the numbers of cities in EU countries, however we won’t know what countries these correspond to yet. Then we will create a histogram and set the colour of the bars with the option col =.\n\neu_cities &lt;- c(1, 1, 3, 1, 2,\n               2, 1, 1, 6, 22,\n               2, 1, 1, 10, 1,\n               1, 4, 9, 1, 7,\n               1, 12, 3)\nhist(eu_cities, col = \"orange\")\n\nWith that histogram we can see that most EU countries have 1-5 cities with a few having a much larger amount. As most of the time you will not be working with just vectors let us make a data frame containing the number of EU cities and the population of the EU countries.\nThe population numbers will be in millions to the closest 1 decimal place and consist of the 2020 Eurostat figures from: https://en.Wikipedia.org/wiki/List_of_European_Union_member_states_by_population\n\neu_country_names &lt;- c(\"Austria\", \"Belgium\", \"Bulgaria\", \"Croatia\", \"Czech Republic\", \n                      \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Germany\", \n                      \"Greece\", \"Hungary\", \"Ireland\", \"Italy\", \"Latvia\", \n                      \"Lithuania\", \"Netherlands\", \"Poland\", \"Portugal\", \"Romania\", \n                      \"Slovakia\", \"Spain\", \"Sweden\")\neu_pop &lt;- c(8.9, 11.5, 7.0, 4.1, 10.7,\n            5.8, 1.3, 5.5, 67.1, 83.2,\n            10.7, 9.8, 5.0, 60.2, 1.9,\n            2.8, 17.4, 38.0, 10.3, 19.3,\n            5.5, 47.3, 10.3)\neu_df &lt;- data.frame(eu_cities,eu_pop,\n                    row.names = eu_country_names)\n\nWe will quickly create a histogram for the population numbers. We’ll make the bar colours purple and we’ll make the x axis label “2020 Eurostat population number in millions” with the xlab = option.\n\nhist(eu_df$eu_pop, col = \"purple\",\n     xlab = \"2020 Eurostat population number in millions\")\n\nWe have a similar pattern as with the number of cities (most have low numbers, some high numbers).\nWe can quickly check if the countries with the high number of cities also have the high populations by creating a new column equal to population / number of cities. This will give us nice ratios. We can plot the distribution of these ratios in a histogram.\nFor this histogram we will also add a title to the plot with the option main =. Additionally we will choose a different colour. Having different colours and main titles makes it easier for you to instantly know which plot you are looking at.\n\n#Create ratio column\neu_df$pop_cities_ratio &lt;- eu_df$eu_pop / eu_df$eu_cities\n#Histogram of ratio distribution\nhist(eu_df$pop_cities_ratio, col = \"blue\",\n     xlab = \"Ratio of population (millions) to numer of cities\",\n     main = \"EU countries ratio of population to cities\")\n\nLooking at the plot most countries seem to have a ratio of 2-6 million citizens to every city. However, it is still not a perfect match with some lower and some higher ratios. Of course a result is a result and we have hopefully found out something new.\nBefore we go onto line graphs I’ll show you how to look at your previous plots. In the Plots pane of the MISC window there are two arrows on the top left. You can use these to go backwards and forwards between the plots you have created since you opened RStudio. Give it a go!"
  },
  {
    "objectID": "13-Plots_line_graphs_and_histograms.html#line-graphs",
    "href": "13-Plots_line_graphs_and_histograms.html#line-graphs",
    "title": "13  Histograms and Line graphs",
    "section": "13.2 Line graphs",
    "text": "13.2 Line graphs\n\n\n\n\n\n\n\n\n\nLine graphs are perfect for showing change over time. Knowing this we’ll go back to a data set we have touched before, the file “UK_retail.tsv” from Chapter 8. This file showed the success of four different retail sectors in the UK from September 2017 to September 2020.\n\n13.2.1 Read in data\nFirst step is to read in the data from the “Chapter_8_files” directory. Once the data frame is created we will remove all non 2020 information.\nNote: The ../ below represents going up one directory. I.e. going up from your current working directory (“Chapter_13-16”) to the main directory so it can be directed to “Chapter_8_files”.\n\nretail_df &lt;- read.csv(\"../Chapter_8_files/UK_retail.tsv\", \n                      sep = \"\\t\", row.names = 1, \n                      check.names = FALSE)\nretail_df &lt;- retail_df[29:37,]\n\nBefore we continue have a look at the data frame and make sure you are comfortable with what it contains.\n\n\n13.2.2 Plotting a line graph\nWe are going to plot the entire information for the Food sector. We will use the function plot() with the option type = \"l\". This will produce a plot of type “line” (\"l\").\nThis requires we provide a numeric vector for the x axis (option x =) and the y axis (option y =). Currently our month and year information is in the row names as strings.\nTherefore before we plot the information we will create a new column called “time_point” with the numbers 1 to the number of rows. We will carry this out with the function nrow() which produces one number equal to the number of rows in the specified data frame.\nWe won’t use it here but the function ncol() is similar to nrow() but for the number of columns.\n\n#Produce time_point column\nretail_df$time_point &lt;- 1:(nrow(retail_df))\n#Produce line plot of the food sector over time point.\nplot(y = retail_df$Food, retail_df$time_point, type = \"l\")\n\n\n\n13.2.3 Adding lines to a plot\nThis is looking decent but you normally want more than one line in a line graph. Thankfully we can do this with the function lines(). We can add the other three sectors to the line graph like below:\nTip: Remember to use tab completion to auto fill function, variable, and column names as well as for function options.\n\nlines(y = retail_df$`Non-food`, x = retail_df$time_point)\nlines(y = retail_df$`Non-store`, x = retail_df$time_point)\nlines(y = retail_df$Fuel, x = retail_df$time_point)\n\nWe have created the line graph with all the sectors. However all the data is not visible.\n\n\n13.2.4 Axis limits\nTo fix this we need to make sure all the data is within the graph. When the plot() function was run it created the y limits based on the Food sector which has a minimum and maximum value of 101.5 and 111.3. Unfortunately the other sectors barely fit in this range.\nTo prevent this issue we can use the plot() option of ylim =. This option is provided with a vector of 2 numbers. The first number is where the y axis will start. The second number is where the y axis will end.\nTo find out where the y axis will end we will use the max() function. This will give one number which is equal to the highest number found in a numeric object. This object can be a scalar, vector, or a data frame.\nWe will use the function min() just like max() to find where the y axis should start.\nLet us therefore recreate the plot with an appropriate y axis range.\nNote: Some times it is more appropriate to set values for the y limits (i.e. starting the y axis at 0). In this case 100 is the baseline value so it would be inappropriate to start at 0.\nTip: Copying your past code in the script editor and editing it will make the following examples a lot quicker to carry out.\n\n#Minimum and maximum for y axis\n#Provide the function a subset of the retail_df\n#so it is not using the time_point column\nmin_y &lt;- min(retail_df[,1:4])\nmax_y &lt;- max(retail_df[,-5])\n#Produce line plot of the food sector over time point.\n#Set y limits (min,max)\nplot(y = retail_df$Food, retail_df$time_point, type = \"l\",\n     ylim = c(min_y,max_y))\n#Add lines\nlines(y = retail_df$`Non-food`, x = retail_df$time_point)\nlines(y = retail_df$`Non-store`, x = retail_df$time_point)\nlines(y = retail_df$Fuel, x = retail_df$time_point)\n\nGreat! That is much better. We can now see that two lines fall after time_point 2 whilst one increases.\n\n\n13.2.5 Axis labels\nNumbers on the x axis are not ideal in this case. We will therefore use the axis() function to set our own x axis labels. We will use the following options for this:\n\n1: The first option to axis() indicates the location of the axis labels. 1 indicates they will be located on the x axis (below).\nat = retail_df$time_point: This indicates where the points tic marks will be drawn.\nlabels = row.names(retail_df): A character vector for the labels to be placed at the tick marks.\n\nFor more info for axis() run the command ?axis to see its help page.\nTo use the axis() function correctly we need to make sure there are no preexisting labels and tick marks on the x axis or else the new labels will go on top of the old. To do this we provide the plot() function with the option xaxt ='n', i.e. no x axis ticks.\n\n#Produce line plot of the food sector over time point.\n#Ensure x axis ticks and labels are not displayed\nplot(y = retail_df$Food, retail_df$time_point, type = \"l\",\n     ylim = c(min_y,max_y), xaxt = 'n')\n#Add row names (month and date strings) as x axix labels\naxis(1, at = retail_df$time_point, labels = row.names(retail_df))\n#Add lines\nlines(y = retail_df$`Non-food`, x = retail_df$time_point)\nlines(y = retail_df$`Non-store`, x = retail_df$time_point)\nlines(y = retail_df$Fuel, x = retail_df$time_point)\n\nWhen the plot is generated there may be only some labels showing for the x axis. If you would like to show them all increase the size of the MISC window.\n\n\n13.2.6 Plot titles\nBefore we colour the lines different colours, let us add a main title and provide the x and y axis with better titles.\n\n#Produce line plot of the food sector over time point.\n#Add main, x, and y titles\nplot(y = retail_df$Food, retail_df$time_point, type = \"l\",\n     ylim = c(min_y,max_y), xaxt = 'n',\n     main = \"Performance of UK retail sectors over 2020\",\n     ylab = \"Seasonally adjusted volume sales\",\n     xlab = \"Month and Year\")\n#Add row names (month and date strings) as x axix labels\naxis(1, at = retail_df$time_point, labels = row.names(retail_df))\n#Add lines\nlines(y = retail_df$`Non-food`, x = retail_df$time_point)\nlines(y = retail_df$`Non-store`, x = retail_df$time_point)\nlines(y = retail_df$Fuel, x = retail_df$time_point)\n\n\n\n13.2.7 Line colours\nNext we will colour the lines differently to differentiate the retail sectors. We carry this out with the col = options for plot() and lines().\n\n#Produce line plot of the food sector over time point.\n#Include the colour red for the bars\nplot(y = retail_df$Food, retail_df$time_point, type = \"l\",\n     ylim = c(min_y,max_y), xaxt = 'n',\n     main = \"Performance of UK retail sectors over 2020\",\n     ylab = \"Seasonally adjusted volume sales\",\n     xlab = \"Month and Year\",\n     col = \"red\")\n#Add row names (month and date strings) as x axix labels\naxis(1, at = retail_df$time_point, labels = row.names(retail_df))\n#Add lines with different colours\nlines(y = retail_df$`Non-food`, x = retail_df$time_point, col = \"blue\")\nlines(y = retail_df$`Non-store`, x = retail_df$time_point, col = \"green\")\nlines(y = retail_df$Fuel, x = retail_df$time_point, col = \"purple\")\n\n\n\n13.2.8 Plot legend\nWe are almost there! The one thing we are missing now is a legend so we can quickly see what colour represents what sector.\nThis can be carried out by using the function legend() after the plot is created. In this case the function is run with the following options:\n\nx = \"topleft\": The legend will be placed in the top left of the plot.\nlegend = colnames(retail_df[,1:4]): This dictates the labels that will be in the legend.\ncol = c(\"red\",\"blue\",\"green\",\"purple\"): This indicates the matching colours for the labels.\nlty = 1: This indicates that the colours will be presented as lines of type 1.\n\n\nlegend(x = \"topleft\",\n       legend = colnames(retail_df[,1:4]),\n       col = c(\"red\",\"blue\",\"green\",\"purple\"),\n       lty = 1)\n\nThat is a good amount to go through. The next chapter will go into scatter plots and box plots. If you have time read through the above again and possibly try to create a histogram or line plot with one of the data sets from previous chapters."
  },
  {
    "objectID": "14-Plots_scatterplot_and_box_plots.html#scatter-plot",
    "href": "14-Plots_scatterplot_and_box_plots.html#scatter-plot",
    "title": "14  Scatter plots and Box plot",
    "section": "14.1 Scatter plot",
    "text": "14.1 Scatter plot\n\n\n\n\n\n\n\n\n\nScatter plots are a great way to compare two matching variables. To make a scatter plot we use the plot() function again. This means a lot of what we went through the last chapter will be helpful for this chapter\n\n14.1.1 Basic examples\nFirst we’ll create a simple scatter plot plotting the numbers 1:20 against the same range of numbers times by 2. For this we provide the option type = \"p\" to indicate we want the data plotted as points.\n\nplot(x = 1:20, y = (1:20)*2, type = \"p\")\n\nThat was a nice linear plot. We’ll make a curve this time.\nIn the command we will not include the option type = \"p\" as this is the default for plot().\nAdditionally we will not provide the option names x = and y =. Functions have an order to their options so if you leave out the option names but provide options (in this case vectors) it will use the options in the order. In the case of plot() it will take the first option as x = and the second option as y =. It is common for plotting functions to take x first then y.\n\nplot(1:20, (1:20)*(1:20))\n\n\n\n14.1.2 Animal sizes\n\n\n\n\n\n\n\n\n\nFor our scatter plot from real data we will look at the sizes of the largest animals in the world. This data is from: https://en.Wikipedia.org/wiki/Largest_organisms\nThe data we will be using will contain the following information:\n\nAnimal names\nAverage mass in tonnes\nMaximum mass in tonnes\nAverage total length in metres\nGroup, In this case are they Mammals or Reptiles\nBiom, are they aquatic, semiaquatic, or terrestrial\n\nFirst download the file into your “Chapter_13-16” directory.\n\n\n\n Download animal_sizes.csv\n\n\n\n\nNext, read the data into R. We have included a new option: stringsAsFactors = TRUE. This is important for plotting and will be explained more later.\n\nanimal_df &lt;- read.csv(\"animal_sizes.csv\", \n                      row.names = 1, check.names = FALSE,\n                      stringsAsFactors = TRUE\n                      )\n\nCheck the column names with the function colnames(). With these column names we can create some quick plots.\nWe’ll compare the average and maximum weight\n\nplot(x = animal_df$`Average mass (tonnes)`,\n     y = animal_df$`Maximum mass (tonnes)`)\n\nAverage and maximum weight appear to correlate as expected.\nSometimes a quick and easy plot is all you want. If you’re not going to present a plot then it doesn’t need to be pretty. As long as it is functional it is useful.\nNow let’s compare the average weight and length\n\nplot(x = animal_df$`Average mass (tonnes)`,\n     y = animal_df$`Average total length (m)`)\n\nWith that we can see the following:\n\nAt lower weights (&lt; 20 tonnes) a longer length does not necessarily mean a higher mass\nAt higher weights (&gt;20 tonnes) there appears to be an overall trend of longer lengths equaling higher masses with the animal with the highest mass having the longest length\n\nHowever it is quite hard to see the overall trend in the lower mass animals as they are squashed in a small part of the plot. We can zoom into this part in two different ways\n\n#First method is to set the x and y limits manually \n#This allows us to choose the specific part to zoom into\nplot(x = animal_df$`Average mass (tonnes)`,\n     y = animal_df$`Average total length (m)`,\n     xlim = c(0,10), ylim = c(0,10))\n#The other method is to subset the data\n#so we only plot the data we want\nplot(x = animal_df[animal_df$`Average mass (tonnes)` &lt; 10,\n                   \"Average mass (tonnes)\"],\n     y = animal_df[animal_df$`Average total length (m)` &lt; 10,\n                   \"Average total length (m)\"])\n#I personally prefer the x and y limit approach\n\nWe can also include the Biom metadata as an aesthetic in the plot\n\n#Plot\nplot(x = animal_df$`Average mass (tonnes)`,\n     y = animal_df$`Average total length (m)`, \n     col = as.numeric(animal_df$Biom),\n     pch = 1\n     )\n#Legend\nlegend(x = \"bottomright\", col = 1:nlevels(animal_df$Biom), \n       legend = levels(animal_df$Biom), pch = 1)"
  },
  {
    "objectID": "14-Plots_scatterplot_and_box_plots.html#factors",
    "href": "14-Plots_scatterplot_and_box_plots.html#factors",
    "title": "14  Scatter plots and Box plot",
    "section": "14.2 Factors",
    "text": "14.2 Factors\nThe last command used a lot of factors.\nFactors are a new class! They are a combination of String and Numeric. They are useful for categorical data where the same values will appear multiple times.\nView the data frame and then check its structure with str(). You should notice that the columns Group and Biom are Factors with different amounts of levels.\nThe Group column has 2 levels. Confirm this with the function levels() which returns the levels and nlevels() which returns the number of levels.\n\nlevels(animal_df$Group)\nnlevels(animal_df$Group)\n\nWhat are levels?\nLevels are the unique values in a factor. Levels also store a matching number. This number determines the order of the levels. In the case of Group “Mammal” is assigned the number 1 and “Reptile” is assigned the number 2. This is because numbers are assigned to Levels in alphabetical order by default.\nThe other part of a factor is the elements. The elements are the part of a vector we are familiar with. Let us look at the factor vector\n\nanimal_df$Group\n\nIt looks just like a character vector except there are no double quotes and the levels are at the bottom.\nHowever, the elements are actually numbers! Each number is assigned a string by the level. This means:\n\nThe factor only needs to store a number for each element and then it stores each unique level only once. This will take up less memory than storing a string multiple times.\nA factor can be used as a numeric or a string. This is very useful for plotting.\n\nIf you don’t understand factors from that explanation that is fine. I find it is a hard concept to explain or understand.\nAn analogy would be a map key. You could just write “town”, “Mountain”, “railroad”, “Lake” over a map to say where everything is like below:\n\n\n\n\n\n\n\n\n\nCompare this to our map with symbols and a key:\n\n\n\n\n\n\n\n\n\nThe key represents the levels with our unique strings corresponding to symbols (numbers). Instead of each string being stored on the map multiple times only the symbols (numbers) are.\nTime for a more practical example with code. We will first create a character vector then create a factor from it with the function factor(). We’ll then see what we can do with a factor.\n\n#Create a character vector\nchar_vec &lt;- c(\"a\",\"b\",\"a\",\"a\",\"b\",\"d\",\"d\",\"c\")\n#Attempt to convert it to a numeric\nas.numeric(char_vec)\n#As expected this does not work and will give NAs\n\n#Create a factor vector from our previous character vector\nfactor_vec &lt;- factor(char_vec)\n#Look at the factor\n#You will notice that even though d is present in an earlier element\n#c is the 3rd level whilst d is the 4th level\n#This is because levels are ordered alphabetically\nfactor_vec\n#Convert to string\nas.character(factor_vec)\n#Convert to numeric\nas.numeric(factor_vec)\n\nWe will get back to plotting soon but first I want to show you how to specify the order of levels. This is important as a lot of the time alphabetically is not wanted. One example is with months.\n\n#Create a factor vector of months\n#We'll only include the 1st 3 months for brevity\nmonths_factor_vec &lt;- factor(c(\"jan\",\"jan\",\"feb\",\"jan\",\"feb\",\n                     \"feb\",\"mar\",\"jan\",\"feb\",\"mar\"))\n#Check the vector and you will notice feb is before jan in the levels\nmonths_factor_vec\nlevels(months_factor_vec)\n#Before reordering our factor we will create a vector string\n#This will contain our levels in the order we want\n#They must contain the same spelling as the existing levels\nmonths_order_vec &lt;- c(\"jan\",\"feb\",\"mar\")\n#We use the factor function on our factor\n#But we include the option levels providing the ordered character vector\nmonths_factor_vec &lt;-factor(months_factor_vec, \n                           levels = months_order_vec)\n#Check the factor now\nmonths_factor_vec\nlevels(months_factor_vec)\n\nNow let us make a nice scatter plot of the animal data with points coloured by Biom and shaped (pch =) by Group.\n\n#Plot\nplot(x = animal_df$`Average mass (tonnes)`,\n     y = animal_df$`Average total length (m)`, \n     col = as.numeric(animal_df$Biom),\n     pch = as.numeric(animal_df$Group),\n     xlab = \"Average mass in tonnes\",\n     ylab = \"Average total length in metres\",\n     main = \"The mass and length of the largest animals\"\n     )\n#Legend for biom colours\nlegend(x = \"bottomright\", col = 1:nlevels(animal_df$Biom), \n       legend = levels(animal_df$Biom), pch = 1)\n#Legend for group shapes\nlegend(x = \"bottom\", col = \"black\", \n       legend = levels(animal_df$Group), \n       pch = 1:nlevels(animal_df$Group))\n\nQuite a complicated plot but now we can see:\n\nMammals are larger than Reptiles\nSemiaquatic reptiles are larger than Aquatic and Terrestrial reptiles\n\nWhy do you think the above 2 points are true? Check out what specific animals are in the data frame animal_df to confirm your thoughts or help to figure it out.\nHopefully that has helped you figure out what a factor is. If not give it a break and let us do some more plots. Hopefully it will click a bit more over time.\nIf not some more tutorials are: https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors/index.html https://www.tutorialspoint.com/r/r_factors.htm\nWorking with factors resource: https://departmentfortransport.github.io/R-cookbook/factors.html"
  },
  {
    "objectID": "14-Plots_scatterplot_and_box_plots.html#box-plot",
    "href": "14-Plots_scatterplot_and_box_plots.html#box-plot",
    "title": "14  Scatter plots and Box plot",
    "section": "14.3 Box plot",
    "text": "14.3 Box plot\n\n\n\n\n\n\n\n\n\nNext we are going to make a box plot with some Penguin data from: https://allisonhorst.github.io/palmerpenguins/\nThis data contains information on individual penguins that were gathered from Palmer Station LTER.\nFirst download the file into your “Chapter_13-16” directory.\n\n\n\n Download penguin.tsv\n\n\n\n\nAs you expect the next step is to read in the file. This time the file is a tsv (tab separated file) with no row names. We will ensure that columns containing strings are converted to factors.\n\npenguin_df &lt;- read.csv(\"penguin.tsv\", \n                      check.names = FALSE,\n                      stringsAsFactors = TRUE,\n                      sep = \"\\t\"\n                      )\n\nEach row is a measurement of a penguin. The columns for this data frame are:\n\nspecies: Species of Penguin\nisland: Island the Penguin was found on\nbill_length_mm: The bill length of the Penguin in millimetres\nbill_depth_mm: The bill depth of the Penguin in millimetres\nflipper_length_mm: The flipper length of the Penguin in millimetres\nbody_mass_g: Weight of Penguin in grams\nsex: female or male\nyear: Year the measurement was carried out in\n\nWith all that information we’ll make a nice boxplot to show the body mass against the species.\nThe function boxplot() can be used with this. This function is different than the others where the first option is yaxis_column_name~xaxis_column_name. This is followed by the option data = where you provide the data frame.\nBelow is the command for this:\n\nboxplot(body_mass_g~species, data = penguin_df)\n\nWhat if we want to split the 3 box plots into sex?\nWe can do that like below:\n\nboxplot(body_mass_g~species*sex, data = penguin_df,\n        col = c(\"yellow\",\"green\"))\n\nI will show you some more examples followed by a final nice plot.\nx axis = island, y axis = flipper length\n\nboxplot(flipper_length_mm~island, data = penguin_df)\n\nx axis = island, y axis = bill depth\n\nboxplot(bill_depth_mm~island, data = penguin_df)\n\nx axis = bill length, y axis = species and sex\n\nboxplot(bill_length_mm~species*sex, data = penguin_df)\n\nWhat happens if we try to plot a factor on the y axis?\n\nboxplot(island~species*sex, data = penguin_df)\n\nIt does not work as an object with class factor can not be added to the x axis object.\nWhat about a numeric to the x axis?\n\nboxplot(flipper_length_mm~year, data = penguin_df)\n\nThat works and looks good because it is a discrete set of numbers. In fact you can have a factor where the levels are numerics. If you do this make sure it is a discrete set of numbers.\nWhat if we use a continuous set of numbers?\n\nboxplot(body_mass_g~bill_length_mm , data = penguin_df)\n\nThis does work! However, a scatter plot would most likely be a lot more suited to plotting this data.\nWe will now make one final plot for this section. I will not explain what the code is doing. Instead read and run the code to figure it out.\n\nboxplot(body_mass_g~species*year , \n        data = penguin_df, \n        col = c(\"white\",\"grey\",\"orange\"),\n        main = \"Mass of different Penguin species for 2007 - 2009\",\n        xlab = \"Species and year\",\n        ylab = \"Body mass in grams\")"
  },
  {
    "objectID": "14-Plots_scatterplot_and_box_plots.html#saving-a-plot-to-a-file",
    "href": "14-Plots_scatterplot_and_box_plots.html#saving-a-plot-to-a-file",
    "title": "14  Scatter plots and Box plot",
    "section": "14.4 Saving a plot to a file",
    "text": "14.4 Saving a plot to a file\n\n\n\n\n\n\n\n\n\nTo save a plot to a file you can use the functions png() and dev.off().\nThe function png() goes before all the plotting commands. It has various options but the ones we will use are:\n\nfilename =: Provide this with a string that will be the filename of the resulting file.\nunits =: The units the width and height will be in. the default is “px” for pixels but I like to go for “mm” for millimetres.\nwidth =: The width of the plot in the file.\nheight =: The height of the plot in the file.\nres =: Resolution of the plot. Usually a number between 50 and 300 with 300 being better quality. This number refers to dpi (dots per inch).\n\nAfter the png() and plotting functions you use the function dev.off(). This lets R know you are finished plotting and so the file from png() will be created.\nYou can then look at the plot. If it is not how you would like you can edit the script and rerun from png() to dev.off(). Through trial and error you can make the plot look how you like.\nLet us save the last plot as a png file:\n\npng(filename = \"penguin_species_and_year_against_mass.png\",\n    units = \"mm\", width = 50, height = 50, res = 150)\nboxplot(body_mass_g~species*year , \n        data = penguin_df, \n        col = c(\"white\",\"grey\",\"orange\"),\n        main = \"Mass of different Penguin species for 2007 - 2009\",\n        xlab = \"Species and year\",\n        ylab = \"Body mass in grams\")\ndev.off()\n\nLooking at the plot we made the width and height way too small. Therefore let us edit the width and height and then run it again.\nNote: You will need to close and open the file after running the command to see the new plot.\n\npng(filename = \"penguin_species_and_year_against_mass.png\",\n    units = \"mm\", width = 250, height = 250, res = 150)\nboxplot(body_mass_g~species*year , \n        data = penguin_df, \n        col = c(\"white\",\"grey\",\"orange\"),\n        main = \"Mass of different Penguin species for 2007 - 2009\",\n        xlab = \"Species and year\",\n        ylab = \"Body mass in grams\")\ndev.off()\n\nThat overall is much better. But we cannot see all the labels on the x axis. Therefore let us make it wider.\n\npng(filename = \"penguin_species_and_year_against_mass.png\",\n    units = \"mm\", width = 400, height = 250, res = 150)\nboxplot(body_mass_g~species*year , \n        data = penguin_df, \n        col = c(\"white\",\"grey\",\"orange\"),\n        main = \"Mass of different Penguin species for 2007 - 2009\",\n        xlab = \"Species and year\",\n        ylab = \"Body mass in grams\")\ndev.off()\n\nSuper! You can save plots in other file formats and there are more options. Check them out with ?png.\nI hope you are ready to make more plots with the Penguin data because it is time for some exercises."
  },
  {
    "objectID": "15-Plots_exercises.html#line-graph",
    "href": "15-Plots_exercises.html#line-graph",
    "title": "15  Plots exercises",
    "section": "15.1 Line graph",
    "text": "15.1 Line graph\nFirst we will ignore “penguin_df”.\nCreate the below plot. You will need to create the vectors yourself.\n\n\n\n\n\nTip: The x and y labels may help you figure out the commands to create the vectors."
  },
  {
    "objectID": "15-Plots_exercises.html#histogram",
    "href": "15-Plots_exercises.html#histogram",
    "title": "15  Plots exercises",
    "section": "15.2 Histogram",
    "text": "15.2 Histogram\nFrom the “penguin_df” create the below plot:\nNote: The colour of the bars are “blue”."
  },
  {
    "objectID": "15-Plots_exercises.html#scatterplot",
    "href": "15-Plots_exercises.html#scatterplot",
    "title": "15  Plots exercises",
    "section": "15.3 Scatterplot",
    "text": "15.3 Scatterplot\nFrom the “penguin_df” create the below plot:\nNote: You can check what numbers refer to what shape for pch = at: http://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r\n\n\n\n\n\nBefore you continue save this plot. Details below:\n\nSave the file as a png called “Penguins_2009_bill_depth_vs_length_scatterplot.png”\nSave the plot with a width and height of 250 and resolution of 150"
  },
  {
    "objectID": "15-Plots_exercises.html#boxplot",
    "href": "15-Plots_exercises.html#boxplot",
    "title": "15  Plots exercises",
    "section": "15.4 Boxplot",
    "text": "15.4 Boxplot\nFrom the “penguin_df” create the below plot:\nNote: Make sure the x axis is in the same order as below.\n\n\n\n\n\nFor the last task, save this plot. Details below:\n\nSave the file as a jpg called “Penguins_species_and_flipper_length_boxplot.jpg” in “Chapter_13-16”.\nSave the plot with a width of 300, height of 250, and resolution of 150"
  },
  {
    "objectID": "16-Plots_solutions.html#line-graph-solution",
    "href": "16-Plots_solutions.html#line-graph-solution",
    "title": "16  Plots solutions",
    "section": "16.1 Line graph solution",
    "text": "16.1 Line graph solution\nBelow is the code and the plot:\n\n#Produce the plot with vectors created inside the function\nplot(x = rep(1:10, 2), \n     y = seq(from = 0.5, to = 10, by = 0.5),\n     col = \"red\",\n     main = 'A line graph with \"red\" as the colour',\n     type = \"l\")"
  },
  {
    "objectID": "16-Plots_solutions.html#histogram-solution",
    "href": "16-Plots_solutions.html#histogram-solution",
    "title": "16  Plots solutions",
    "section": "16.2 Histogram solution",
    "text": "16.2 Histogram solution\nBelow is the code and the plot:\n\n#Create data frame with only the Penguins from Torgersen\npenguins_torgensen_df &lt;- penguin_df[penguin_df$island == \"Torgersen\",]\n#Create a column with body mass in kilograms\npenguins_torgensen_df$body_mass_kg &lt;- \n  penguins_torgensen_df$body_mass_g / 1000\n#Plot the histogram\nhist(penguins_torgensen_df$body_mass_kg,\n     main = \"Histogram of the body mass of Penguins from Torgersen Island\",\n     xlab = \"Body mass in kilograms\",\n     ylab = \"frequency\",\n     col = \"blue\")"
  },
  {
    "objectID": "16-Plots_solutions.html#scatterplot-solution",
    "href": "16-Plots_solutions.html#scatterplot-solution",
    "title": "16  Plots solutions",
    "section": "16.3 Scatterplot solution",
    "text": "16.3 Scatterplot solution\nBelow is the code and the plot:\n\n#Create data frame with only the Penguins from 2009\npenguin_2009_df &lt;- penguin_df[penguin_df$year == \"2009\",]\n#Produce plot\nplot(x = penguin_2009_df$bill_length_mm,\n     y = penguin_2009_df$bill_depth_mm,\n     col = as.numeric(penguin_2009_df$species),\n     main = \"Penguin bills vs depth in 2009\",\n     xlab = \"Bill length (mm)\",\n     ylab = \"Bill depth (mm)\",\n     pch = 15)\n#Create legend\nlegend(x = \"bottomleft\", \n       col = 1:nlevels(penguin_2009_df$species),\n       legend = levels(penguin_2009_df$species),\n       pch = 15)\n\n\n\n\nTo save the plot the code is:\n\n#Create data frame with only the Penguins from 2009\npenguin_2009_df &lt;- penguin_df[penguin_df$year == \"2009\",]\n#Start png function\npng(filename = \"Chapter_13-16/Penguins_2009_bill_depth_vs_length_scatterplot.png\",\n    units = \"mm\", height = 250, width = 250, res = 150 )\n#Produce plot\nplot(x = penguin_2009_df$bill_length_mm,\n     y = penguin_2009_df$bill_depth_mm,\n     col = as.numeric(penguin_2009_df$species),\n     main = \"Penguin bills vs depth in 2009\",\n     xlab = \"Bill length (mm)\",\n     ylab = \"Bill depth (mm)\",\n     pch = 15)\n#Create legend\nlegend(x = \"bottomleft\", \n       col = 1:nlevels(penguin_2009_df$species),\n       legend = levels(penguin_2009_df$species),\n       pch = 15)\n#Save file\ndev.off()"
  },
  {
    "objectID": "16-Plots_solutions.html#boxplot-solutions",
    "href": "16-Plots_solutions.html#boxplot-solutions",
    "title": "16  Plots solutions",
    "section": "16.4 Boxplot solutions",
    "text": "16.4 Boxplot solutions\nBelow is the code and the plot:\n\n#Produce boxplot\nboxplot(flipper_length_mm~sex*species,\n        data = penguin_df,\n        col = c(\"yellow\",\"green\"),\n        main = \"Flipper length of different species\",\n        xlab = \"Species and sex of Penguin\",\n        ylab = \"Flipper length (mm)\"\n)\n\n\n\n\nTo save the plot the code is:\n\n#Start png function\njpeg(filename = \"Chapter_13-16/Penguins_species_and_flipper_length_boxplot.jpg\",\n    units = \"mm\", height = 250, width = 300, res = 150 )\n#Produce boxplot\nboxplot(flipper_length_mm~sex*species,\n        data = penguin_df,\n        col = c(\"yellow\",\"green\"),\n        main = \"Flipper length of different species\",\n        xlab = \"Species and sex of Penguin\",\n        ylab = \"Flipper length (mm)\"\n)\n#Save file\ndev.off()"
  },
  {
    "objectID": "17-Basic_stats.html#linear-regression",
    "href": "17-Basic_stats.html#linear-regression",
    "title": "17  Basic stats",
    "section": "17.1 Linear regression",
    "text": "17.1 Linear regression\n\n\n\n\n\n\n\n\n\nLinear regression is a method to model the relationship between two numeric vectors. Ultimately we want to produce the predictive equation:\n\\[\ny = mx + c\n\\]\nWhere m is equal to the gradient and c is equal to the intercept. With this we can predict the value of y if we know the value of x and vice versa.\n\n17.1.1 Fish market dataset\n\n\n\n\n\n\n\n\n\nBefore getting to the analysis we need to read in the data. For this chapter we will be looking at the file Fish.csv which contains information of 7 common fish species sold in Fish markets (Source: https://www.kaggle.com/aungpyaeap/fish-market).\nDownload the file into your “Chapter_17-18” directory.\n\n\n\n Download Fish.csv\n\n\n\nThe columns for the data are:\n\nSpecies: Species of fish (“Bream”, “Roach”, “Whitefish”, “Parkki”, “Perch”, “Pike”, and “Smelt”).\nWeight: Weight of the fish in grams.\nLength1: Vertical length of the fish in centimetres.\nLength2: Diagonal length of the fish in centimetres.\nLength3: Cross length of the fish in centimetres.\nHeight: Height of the fish in centimetres.\nWidth: Diagonal width of the fish in centimetres.\n\nThe dataset is primarily interested in predicting the weight of a fish based on its length, height, or width.\nFirst step is to read in the data:\n\nfish_df &lt;- read.csv(\"Fish.csv\", check.names = FALSE)\n\nHave a look at the data frame and you’ll see it looks pretty good with no NA values.\nFor now we only want to look at the information for the species Bream. Let’s create a “bream_df”:\n\n#Create the data frame\nbream_df &lt;- fish_df[fish_df$Species == \"Bream\",]\n#Check how many rows it has\nnrow(bream_df)\n\nWe are left with 35 data points which should be plenty for our linear regression.\n\n\n17.1.2 Scatterplot\n\n\n\n\n\n\n\n\n\nBefore we carry out the linear regression we’ll create a scatterplot of the two vectors we want to compare. For the first instance we will compare Height to Length1 (vertical length).\nIn fact before we do, let’s change the column name “Length1” to “v_length” so it is a bit more intuitive for us. Whilst we are at it we’ll change the other length column names.\n\ncolnames(bream_df)[3:5] &lt;- c(\"v_length\", \"d_length\", \"c_length\")\n\nTime to quickly plot “v_length” (x) against “Weight” (y):\n\nplot(x = bream_df$v_length, y = bream_df$Weight)\n\nSuper! That looks like a decently linear plot with a positive trend. We will therefore fit the linear model.\n\n\n17.1.3 Linear model\n\n\n\n\n\n\n\n\n\nWe can fit a linear model with the function lm(). We simply provide the column names as a formula ( y_column_name ~ x_column_name ) similar to the boxplot() function.\n\nfit &lt;- lm(Weight~v_length, data=bream_df)\n\nWe can now add the linear model as a line to our plot with the function abline()\n\nabline(fit)\n\nWith the line added we also want to add the linear equation to the plot. To do this we need to check the contents of the “fit” variable first so we know what to add.\n\nfit\n\nYou’ll see the following two sections:\n\nCall: Shows the function with options you ran to create “fit”\nCoefficients:: This contains 2 parts\n\n(Intercept): This is the intercept value of the linear model (c)\nv_length: This is the gradient values (m)\n\n\nOur next step is to create a string scalar containing the linear equation. To do this we can extract the coefficients from the “fit” object like below:\n\nm &lt;- fit$coefficients[2]\nc &lt;- fit$coefficients[1]\n\nIf you print out “m” and “c” to the console you’ll notice they have a different number of decimal places than when displayed through printing “fit”. We will therefore change these to 2 decimal places with the round() function:\n\nm &lt;- round(m, digits = 2)\nc &lt;- round(c, digits = 2)\n\nNow to use the paste0() function to create our linear equation as a string scalar:\n\nlinear_equation &lt;- paste0(\"y = \", m , \"x + \", c)\n\nFinally we will recreate our plot, add the abline, and then add the linear equation. We will add the linear equation with the function text():\n\nplot(x = bream_df$v_length, y = bream_df$Weight)\nabline(fit)\ntext(x = 30, y = 800, labels = linear_equation)\n\nThe text() options x = and y = normally require a bit of trial and error to set it in a nice location. This can be a bit fiddly but is made much easier by making the label smaller (e.g. making the numbers have a smaller amount of decimal places)."
  },
  {
    "objectID": "17-Basic_stats.html#t-test",
    "href": "17-Basic_stats.html#t-test",
    "title": "17  Basic stats",
    "section": "17.2 t-test",
    "text": "17.2 t-test\n\n\n\n\n\n\n\n\n\nA t-test can be used to determine if there is a significant difference between the means of two groups.\nIn this example we will compare the weights of the fish Bream, Parkki, and Roach. Therefore let’s subset our data frame so we have three data frames, one for each species.\nWe already have a “bream_df” so we only need to make one for Parkki and one for Roach. Before we do we’ll change the column names for “fish_df” like we did for “bream_df”\n\ncolnames(fish_df)[3:5] &lt;- c(\"v_length\", \"d_length\", \"c_length\")\nparkki_df &lt;- fish_df[fish_df$Species == \"Parkki\",]\nroach_df &lt;- fish_df[fish_df$Species == \"Roach\",]\n\n\n17.2.1 Boxplot\n\n\n\n\n\n\n\n\n\nBefore carrying out a t-test it can be useful to visualise the difference between groups with a boxplot.\nBefore we do this we need to combine the three data frames into one. This can be done by binding the rows with rbind(). This will combine two provided data frames which contain the same number of columns with the same column names.\n\n#Combine bream_df and parkki_df\nfish_subset_df &lt;- rbind(bream_df, parkki_df)\n#Now rbind roach_df to our new df\nfish_subset_df &lt;- rbind(fish_subset_df, roach_df)\n\nThere is also cbind to combine data frames by columns. In this case the data frames need to have the same number of rows with the same order and names.\nTime for a boxplot!\n\nboxplot(Weight~Species, data = fish_subset_df)\n\nWe can clearly see that the weights of Parkki and Roach are very similar to each other but very different to Bream’s weight.\n\n\n17.2.2 t-test comparison\n\n\n\n\n\n\n\n\n\nLet us see if what we see visually is also visible statistically.\nWe can carry out a t-test with the function t.test(). Simply provide the function with the two numerical vectors you would like to compare.\n\nbream_parkki_ttest &lt;- t.test(bream_df$Weight, parkki_df$Weight)\nbream_roach_ttest &lt;- t.test(bream_df$Weight, roach_df$Weight)\nparkki_roach_ttest &lt;- t.test(parkki_df$Weight, roach_df$Weight)\n\nPrint the resulting variables to the console and you will see a lot of information. I am sure all these values can say a lot about the data but we are only interested in the p-values.\nIn this case we can say the means between the two groups tested are significantly different if the p-value is less than 0.05 (1 in 20).\nIt can be a bit annoying to have to look through the t.test() output for each result so we’ll create a vector to contain the p-values for comparisons against Bream.\n\nfish_species_weight_ttests &lt;- c(\n  bream_parkki_ttest$p.value,\n  bream_roach_ttest$p.value\n)\n\nThis is pretty useful but we can’t immediately see which comparison each t-test is equal to. Thankfully just like data frames have row and column names, vectors can have names for each element.\n\n#Add the vector names\nnames(fish_species_weight_ttests) &lt;- \n  c(\"bream_vs_parkki\",\"bream_vs_roach\")\n#Look at the vector with the added names\nfish_species_weight_ttests\n\nWe can then index the vector through the names.\n\n#Access the p-value of Bream against Roach\nfish_species_weight_ttests[\"bream_vs_roach\"]\n#Add the p-value of Parkki against Roach\nfish_species_weight_ttests[\"parkki_vs_roach\"] &lt;- \n  parkki_roach_ttest$p.value\n\nWith our nice vector of p-values we can quickly see where the p-value is less than 0.05 (i.e. the means are significantly different) and where it is higher (i.e. the means aren’t significantly different).\n\nfish_species_weight_ttests &lt; 0.05\n\nDo these p-values match what you saw in the boxplot?"
  },
  {
    "objectID": "17-Basic_stats.html#some-more-useful-functions",
    "href": "17-Basic_stats.html#some-more-useful-functions",
    "title": "17  Basic stats",
    "section": "17.3 Some more useful functions",
    "text": "17.3 Some more useful functions\n\n\n\n\n\n\n\n\n\n\n17.3.1 Summary\nThe function summary() can give you some quick summary information for each column of a data frame.\n\nsummary(fish_df)\n\nThis gives you some nice information for your numerical columns:\n\nMin.: The minimum number\n1st Qu.: The 25th quartile\nMedian: The median (Middle sorted number)\nMean: The average\n3rd Qu.: The 75th quartile\nMax.: The maximum number\n\nYou will notice the information given for the “Species” column is not very informative as it is a character column. However, this would be a lot more descriptive if it was a factor.\nTherefore we’ll change the “Species” column to a factor and run summary() again.\n\nfish_df$Species &lt;- as.factor(fish_df$Species)\nsummary(fish_df)\n\nNow summary() shows how many instances of each species is present in the data frame.\nFor future cases it may better to use stringsAsFactors = TRUE with the read.csv() function when we first read in the file.\n\n\n17.3.2 Table\n\n\n\n\n\n\n\n\n\nThe table() function will provide a vector containing the number of instances for each level in a factor. This is pretty much what summary() did to a factor.\nHowever, unlike summary() it will also do this for characters and numerics.\nNote: Remember to use the “Help” pane if you are not sure what a function does.\n\n#Table command for columns from fish_df\ntable(fish_df$Species)\ntable(as.character(fish_df$Species))\ntable(fish_df$Height)\ntable(floor(fish_df$Height))\ntable(as.integer(fish_df$Height))\n#Run table on various numeric vectors\ntable(1:10)\ntable(1:100 * 0)\ntable(1:100 %% 2)\ntable(seq(from = 0, to = 50, by = 0.5) %% 7.5)\ntable(c(1:9,1:8,1:7,1:6,1:5,1:4,1:3,1:2,1))\n#Table will run on logicals too\ntable(1:100 &gt; 50)\ntable(c(\"a\",\"a\",\"b\",\"c\") == \"a\")\n#Create a vector of 20 random numbers between 0 and 10\nrandom_num_vec &lt;- sample(0:10, size = 20, replace = TRUE )\n#table\ntable(random_num_vec)\n#Create a character vector randomly containing 1-10 of the strings\n#\"Book\", \"TV\", and \"Film\" each\nrandom_char_vec &lt;- c(\n  rep(\"Book\", sample(1:10, size = 1)),\n  rep(\"TV\", sample(1:10, size = 1)),\n  rep(\"Film\", sample(1:10, size = 1))\n)\n#Now for table()\ntable(random_char_vec)\n#Can create a quick bar plot with the output from table()\nbarplot(table(random_char_vec))\n\nA few more functions were introduced above. I will let you explore them yourself or you can ask me verbally."
  },
  {
    "objectID": "17-Basic_stats.html#further-resources",
    "href": "17-Basic_stats.html#further-resources",
    "title": "17  Basic stats",
    "section": "17.4 Further resources",
    "text": "17.4 Further resources\n\n\n\n\n\n\n\n\n\nBelow are some further resources you can check that will help if you want to do some other plots and figures.\nQuick-R: https://www.statmethods.net/index.html\nR Cookbook: https://rc2e.com/"
  },
  {
    "objectID": "18-Stats_exercises.html#world-happiness-report",
    "href": "18-Stats_exercises.html#world-happiness-report",
    "title": "18  Stats exercises",
    "section": "18.1 World happiness report",
    "text": "18.1 World happiness report\n\n\n\n\n\n\n\n\n\n\n18.1.1 Data\nFor this exercise we will be looking at the World Happiness Report for 2016. This report is a survey of the state of global happiness.\nDownload __world_happiness_report_2016.csv__to the directory “Chapter_17-18”.\n\n\n\n Download world_happiness_report_2016.csv\n\n\n\n\nSource: https://www.kaggle.com/unsdsn/world-happiness?select=2016.csv\nThe columns for the data are:\n\nCountry: Name of the country.\nRegion: Region the country belongs to.\nHappiness Rank: Rank of the country based on the Happiness Score.\nHappiness Score: A metric measured in 2016 by asking the sampled people the question: “How would you rate your happiness on a scale of 0 to 10 where 10 is the happiest”.\nLower Confidence Interval: Lower Confidence Interval of the Happiness Score.\nUpper Confidence Interval: Upper Confidence Interval of the Happiness Score.\nEconomy (GDP per Capita): The extent to which GDP contributes to the calculation of the Happiness Score.\nFamily: The extent to which Family contributes to the calculation of the Happiness Score.\nHealth (Life Expectancy): The extent to which Life expectancy contributed to the calculation of the Happiness Score.\nFreedom: The extent to which Freedom contributed to the calculation of the Happiness Score.\nTrust (Government Corruption): The extent to which Perception of Corruption contributes to Happiness Score.\nGenerosity: The extent to which Generosity contributed to the calculation of the Happiness Score.\nDystopia Residual: The extent to which Dystopia Residual contributed to the calculation of the Happiness Score. More info in the “What is Dystopia?” section at https://worldhappiness.report/faq/.\n\n\n\n18.1.2 Tasks & questions\nWith that information carry out the following tasks and answer the questions:\n\nRead in the file “world_happiness_report_2016” as data frame called “happy_df”. Ensure strings are read in as factors and that none of the columns are read in as row names.\nAnswer the following questions using the output from one function:\n\nHow many countries are in the region “Western Europe”?\nWhat is the maximum number in the “Happiness Score” column?\nFrom the columns “Economy (GDP per Capital)” to “Dystopia Residual”, which has the highest mean and which has the lowest?\n\nCreate the below plot.\n\nThe equation does not have to be in exactly the same position as the below. Just make sure it is all clearly visible, it contains the same text, and it is not on top of any points.\nThe colour for the line is “mediumslateblue”\nNote you can put “\\n” into a label/title to make a new line.\ne.g “This is the first line \\n and this is the second line”\n\n\n\n\n\n\n\n\nIt may be a bit awkward to get the right size for the plot in the “Plots” pane. Therefore save it as a png file with the following options:\n\nFile name of “Economy_vs_family.png”\nDimensions of file is 8 inches for height and width\nResolution of 200\n\nAnswer the following questions using information on the line graph and the linear model.\n\nDoes the linear model have a positive or negative gradient?\nWhich variable (Economy or Family) has higher values?\nIf the value of Economy was 2.1 what would be the predictive value of Family according to the linear model equation?\nWhich region appears to have the highest values for Economy and for Family?\n\nCreate the following boxplot.\n\nYou can change the the levels with the following code\n\n\n\nshort_region_names &lt;- \n  c(\"OZ_n_NZ\", \"C_n_E_Europe\", \"E_Asia\", \"L_America_n_Caribbean\",\n    \"Middle_E_n_N_Africa\", \"N_America\", \"SE_Asia\", \"S_Asia\",\n    \"Sub_Saharan\", \"W_Europe\")\nlevels(happy_df$Region) &lt;- short_region_names\n\n\n\n\n\n\n\nSave the above as a jpeg called “Region_happiness_boxplots.jpg” with a width of 1500 pixels and a height of 750 pixels.\nLast task! Carry out t-tests on the following comparisons for Happiness Score and determine if the means are significantly different.\n\nWest Europe and North America\nWest Europe and South Asia\nSouth Asia and South Eastern Asia"
  },
  {
    "objectID": "19-Stats_solutions.html#world-happiness-report-solutions",
    "href": "19-Stats_solutions.html#world-happiness-report-solutions",
    "title": "19  Stats solutions",
    "section": "19.1 World happiness report solutions",
    "text": "19.1 World happiness report solutions\n\n\n\n\n\n\n\n\n\n\nRead in the file\n\n\nhappy_df &lt;- read.csv(\"Chapter_17-18/world_happiness_report_2016.csv\", \n                      check.names = FALSE,\n                      stringsAsFactors = TRUE,\n                      sep = \",\"\n                      )\n\n\nAnswer the following questions using the output from one function:\n\n\nsummary(happy_df)\n\n        Country                                Region   Happiness Rank  \n Afghanistan:  1   Sub-Saharan Africa             :38   Min.   :  1.00  \n Albania    :  1   Central and Eastern Europe     :29   1st Qu.: 40.00  \n Algeria    :  1   Latin America and Caribbean    :24   Median : 79.00  \n Angola     :  1   Western Europe                 :21   Mean   : 78.98  \n Argentina  :  1   Middle East and Northern Africa:19   3rd Qu.:118.00  \n Armenia    :  1   Southeastern Asia              : 9   Max.   :157.00  \n (Other)    :151   (Other)                        :17                   \n Happiness Score Lower Confidence Interval Upper Confidence Interval\n Min.   :2.905   Min.   :2.732             Min.   :3.078            \n 1st Qu.:4.404   1st Qu.:4.327             1st Qu.:4.465            \n Median :5.314   Median :5.237             Median :5.419            \n Mean   :5.382   Mean   :5.282             Mean   :5.482            \n 3rd Qu.:6.269   3rd Qu.:6.154             3rd Qu.:6.434            \n Max.   :7.526   Max.   :7.460             Max.   :7.669            \n                                                                    \n Economy (GDP per Capita)     Family       Health (Life Expectancy)\n Min.   :0.0000           Min.   :0.0000   Min.   :0.0000          \n 1st Qu.:0.6702           1st Qu.:0.6418   1st Qu.:0.3829          \n Median :1.0278           Median :0.8414   Median :0.5966          \n Mean   :0.9539           Mean   :0.7936   Mean   :0.5576          \n 3rd Qu.:1.2796           3rd Qu.:1.0215   3rd Qu.:0.7299          \n Max.   :1.8243           Max.   :1.1833   Max.   :0.9528          \n                                                                   \n    Freedom       Trust (Government Corruption)   Generosity    \n Min.   :0.0000   Min.   :0.00000               Min.   :0.0000  \n 1st Qu.:0.2575   1st Qu.:0.06126               1st Qu.:0.1546  \n Median :0.3975   Median :0.10547               Median :0.2225  \n Mean   :0.3710   Mean   :0.13762               Mean   :0.2426  \n 3rd Qu.:0.4845   3rd Qu.:0.17554               3rd Qu.:0.3119  \n Max.   :0.6085   Max.   :0.50521               Max.   :0.8197  \n                                                                \n Dystopia Residual\n Min.   :0.8179   \n 1st Qu.:2.0317   \n Median :2.2907   \n Mean   :2.3258   \n 3rd Qu.:2.6646   \n Max.   :3.8377   \n                  \n\n\n\nHow many countries are in the region “Western Europe”?\n\n21\n\nWhat is the maximum number in the “Happiness Score” column?\n\n7.526\n\nFrom the columns “Economy (GDP per Capital)” to “Dystopia Residual”, which has the highest mean and which has the lowest?\n\nHighest: “Dystopia Residual” with 2.3258\nLowest: “Family” with 0.13762\n\n\n3.Produce the plot\n\n#Fit linear model of Economy (x) against Family (y)\nfit_economy_family &lt;- \n  lm(Family~`Economy (GDP per Capita)`, data = happy_df)\n#Create string for linear equation\nc &lt;- round(fit_economy_family$coefficients[1], digits = 4)\nm &lt;- round(fit_economy_family$coefficients[2], digits = 4)\nlm_equation &lt;- paste0(\"y = \", m , \"x + \", c)\n#Produce plot\nplot(x = happy_df$`Economy (GDP per Capita)`,\n     y = happy_df$Family,\n     main = \"Comparison of the effect of \\n Economy and Family on happiness\",\n     xlab = \"Economy (GDP per Capita)\",\n     ylab = \"Family\",\n     pch = as.numeric(happy_df$Region),\n     xlim = c(0,2), ylim = c(0,1.5),\n     col = 1)\n#Add abline\nabline(fit_economy_family, col = \"mediumslateblue\")\n#Add equation to top right\ntext(x = 0.4, y = 1.1, labels = lm_equation)\n#Add the legend\nlegend(x = \"bottomright\",\n       pch = 1:nlevels(happy_df$Region),\n       legend = levels(happy_df$Region))\n\n\n\n\n\nSave plot as png file\n\n\n#PNG command\npng(filename = \"Chapter_17-18/Economy_vs_family.png\", \n    units = \"in\", height = 8, width = 8, res = 200)\n#Produce plot\nplot(x = happy_df$`Economy (GDP per Capita)`,\n     y = happy_df$Family,\n     main = \"Comparison of the effect of \\n Economy and Family on happiness\",\n     xlab = \"Economy (GDP per Capita)\",\n     ylab = \"Family\",\n     pch = as.numeric(happy_df$Region),\n     xlim = c(0,2), ylim = c(0,1.5),\n     col = 1)\n#Add abline\nabline(fit_economy_family, col = \"mediumslateblue\")\n#Add equation to top right\ntext(x = 0.4, y = 1.1, labels = lm_equation)\n#Add the legend\nlegend(x = \"bottomright\",\n       pch = 1:nlevels(happy_df$Region),\n       legend = levels(happy_df$Region))\n#dev.off\ndev.off()\n\n\nAnswers for the following questions:\n\n\nDoes the linear model have a positive or negative gradient?\n\nPositive (m = 0.4328)6\n\nWhich variable (Economy or Family) has higher values?\n\nEconomy\n\nIf the value of Economy was 2.1 what would be the predictive value of Family according to the linear model equation?\n\n__(0.4328*2.1) + 0.3808 = 1.28968__\n\nWhich region appears to have the highest values for Economy and for Family?\n\nWestern Europe\n\n\n\nProduce boxplot\n\n\n#Change level names\nshort_region_names &lt;- \n  c(\"OZ_n_NZ\", \"C_n_E_Europe\", \"E_Asia\", \"Latin_A_n_Carib\",\n    \"ME_n_N_Africa\", \"N_America\", \"SE_Asia\", \"S_Asia\",\n    \"Sub_Saharan\", \"W_Europe\")\nlevels(happy_df$Region) &lt;- short_region_names\n#Create boxplot\nboxplot(`Happiness Score`~Region, data = happy_df, \n        ylim = c(0,10),\n        col = 1:nlevels(happy_df$Region),\n        main = \"Happiness scores across regions\"\n)\n\n\n\n\n\nSave as jpeg\n\n\n#jpeg\njpeg(filename = \"Chapter_17-18/Region_happiness_boxplots.jpg\", units = \"px\",\n     width = 1500, height = 750 )\n#Create boxplot\nboxplot(`Happiness Score`~Region, data = happy_df, \n        ylim = c(0,10),\n        col = 1:nlevels(happy_df$Region),\n        main = \"Happiness scores across regions\"\n)\n#dev.off\ndev.off()\n\n\nT-tests\n\n\n#Subset the data frames to get vectors of our regions of interest\nWE_happiness &lt;- happy_df[happy_df$Region == \"W_Europe\",\"Happiness Score\"]\nNA_happiness &lt;- happy_df[happy_df$Region == \"N_America\",\"Happiness Score\"] \nSA_happiness &lt;- happy_df[happy_df$Region == \"S_Asia\",\"Happiness Score\"] \nSEA_happiness &lt;- happy_df[happy_df$Region == \"SE_Asia\",\"Happiness Score\"]\n#Carry out t-tests\nWE_NA_ttest &lt;- t.test(WE_happiness, NA_happiness)\nWE_SA_ttest &lt;- t.test(WE_happiness, SA_happiness)\nSA_SEA_ttest &lt;- t.test(SA_happiness, SEA_happiness)\n#Extract p values into a new vector with element names\nregion_happiness_pvalues &lt;- c(WE_NA = WE_NA_ttest$p.value,\n                              WE_SA = WE_SA_ttest$p.value,\n                              SA_SEA = SA_SEA_ttest$p.value)\n#Logical to determine if the p-value is less than 0.05\n#I.e. the means are significantly different\nregion_happiness_pvalues &lt; 0.05\n\n WE_NA  WE_SA SA_SEA \n FALSE   TRUE  FALSE"
  },
  {
    "objectID": "20-Basic_programming.html#recycle-rule",
    "href": "20-Basic_programming.html#recycle-rule",
    "title": "20  Basic programming",
    "section": "20.1 Recycle rule",
    "text": "20.1 Recycle rule\n\n\n\n\n\n\n\n\n\nWhen two objects of different lengths act upon each other the smaller object will be recycled so each element in the larger object is acted upon.\nWe will demonstrate this with the below example. Run the command below and then read the explanation.\n\nsmall_vec &lt;- 1:3\nlarge_vec &lt;- rep(1,9) \nsmall_vec * large_vec\n\n\nsmall_vec is a vector with 3 elements, the numbers 1 to 3.\nlarge_vec is a vector with 9 elements, this is the number 1 repeated 9 times.\nAs small_vec is 3 times smaller than large_vec each element in small_vec is recycled 2 times on top of the first usage.\n\nThe first small_vec element is used to multiply the 1st, 4th, and 7th positions of large_vec.\nThe second small_vec element is used to multiply the 2nd, 5th, and 8th positions of large_vec.\nThe last/third small_vec element is used to multiply the 3rd, 6th, and 9th positions of large_vec.\n\n\nBelow is an example with a visualisation. large_vec is the numbers 1 to 9 this time:\n\nsmall_vec &lt;- 1:3\nlarge_vec &lt;- 1:9 \nsmall_vec * large_vec\n\n\n\n\n\n\n\n\n\n\nDepending on the length of the large vector the elements of the smaller vector may be recycled an uneven amount of times. For example:\n\nThe smaller vector has 3 elements.\nThe larger vector has 4 elements.\nThe 1st element of the smaller vector would be used twice (recycled once).\nThe 2nd & 3rd elements of the smaller vector would be used once (not recycled).\n\nBelow is a quick example of this. You should notice a warning is printed out as the length of the objects are not multiples of each other. However, above the warning is the correct output.\n\n1:3 * rep(1,4)\n\nWarnings usually mean the code will run fine but R thinks you may have done something wrong which you should check. Errors on the other hand mean the R code did not work.\nBelow are a few more examples of using the recycle rule:\n\n#When you multiply one number (scalar) by a numeric vector\n#You are recycling the one number (scalar)\n2 * 1:6\n#Some numeric recycling\n1:2 * 1:10\n1:4 + 1:8\n8:1 - 1:4\n2:1 / 1:4\n(1:2 + 3:6) * seq(10, 120, 10)\n#Strings can be recycled with the paste() function\n#You'll notice that no warnings appear this time\n#even though the lengths of the variables are not multiples\nrecyclable_materials &lt;- c(\"A:aluminium\",\"B:glass\",\"C:paper\")\nrecycle_centres &lt;- rep(\n  c(\"1:old swan\",\"2:otterspool\",\"3:south sefton\",\"4:Huyton\",\"5:Kirkby\"),\n  2\n)\npaste0(recyclable_materials, \" can be recycled at \", recycle_centres)"
  },
  {
    "objectID": "20-Basic_programming.html#loops",
    "href": "20-Basic_programming.html#loops",
    "title": "20  Basic programming",
    "section": "20.2 Loops",
    "text": "20.2 Loops\n\n\n\n\n\n\n\n\n\nWith loops we can carry out the same commands and functions on multiple elements within a 1 dimensional object (vector or list) without having to type it out multiple times.\nThere are 2 main types of loops: for loops and while loops.\n\n20.2.1 For loops\nFor loops will run through a set of variables. Each variable will be run through the set of commands once.\nThe basic format of a for loop is (don’t run the below):\n\nfor (variable in vector/list) {\n  command/s\n}\n\nWe will run a simple example below. We need the print() function so the results are print to the console. If this was not done nothing would be print out as it is a loop:\n\nfor (i in 1:5) {\n  print(i * 10)\n}\n\nIn essence the below was carried out:\n\nloop_vec &lt;- 1:5\ni &lt;- loop_vec[1]\nprint(i * 10)\ni &lt;- loop_vec[2]\nprint(i * 10)\ni &lt;- loop_vec[3]\nprint(i * 10)\ni &lt;- loop_vec[4]\nprint(i * 10)\ni &lt;- loop_vec[5]\nprint(i * 10)\n\nExcept instead of many lines we were able to carry it out in one command rather than many.\nAnalogy:\n\nThe loop is a circular assembly line.\nMachines carry out the commands on the provided variables.\nA worker will put the first element of the provided vector/list on the assembly, therefore setting it as i.\nThe machines will carry out the commands on i.\nOnce the worker gets the 1st set of results they will put the 2nd element on the assembly line, setting it as i.\nThis will repeat till the results from all the elements are returned.\n\nA few more examples:\n\nfor (i in c(3,6,9)) {\n  print(i / 3)\n  print(i / 2)\n}\nfor (i in c(3,6,9)) {\n  print(i %% 3)\n  print(i %% 2)\n}\n#You can have loops in a loop\nfor (y in 1:5) {\n  for (x in 1:6) {\n    print(paste0(y, \" + \", x, \" = \", y+x))\n  }\n}\n\n#Let us make the fibonacci sequence (first 10 numbers) as a vector\n#First we create a vector that contains the number 1 twice\nfibo_vec &lt;- c(1,1)\n#In a loop we can use the loop variable (i) to index objects\n#We can use this for assignment and subsetting\nfor (i in 3:10) {\n  fibo_vec[i] &lt;- fibo_vec[i-1] + fibo_vec[i-2]\n}\n#Check out the vector\nfibo_vec\n\nA lot of what we have been doing we could do without loops. Where I find for loops handy is when I want to carry out a task on multiple columns or rows.\nWe can use for loops to quickly create a multiplication table in a matrix.\n\n#First we create a matrix with NA values\n#Make sure it contains the number of rows and columns we want\nmultiplication_mat &lt;- matrix(data = NA, nrow = 10, ncol = 10)\n#Next we create a vector to loop over\nloop_vec &lt;-  1:10\n#Now to loop through the loop_vec for the columns\nfor (c in loop_vec) {\n  #Next we loop through the loop_vec for the rows\n  for (r in loop_vec){\n    #Calculate the multiplication\n    multiply_number &lt;- c * r\n    #Assign the relevant position in the matrix to the multiplication\n    multiplication_mat[r,c] &lt;- multiply_number\n  }\n}\n#Check the matrix\nmultiplication_mat\n\nWe can then use for loops to carry out specific commands to each column or each row.\n\n#First thing we are going to do is divide each number in the matrix\n#By the column total of its column\n#We'll save the results in a new matrix called mult_prop_col_mat\n#Create the new matrix\nmult_prop_col_mat &lt;- multiplication_mat\n#Loop through the columns\nfor (c in 1:ncol(mult_prop_col_mat)) {\n  #Calculate column total\n  column_total &lt;- sum(mult_prop_col_mat[,c])\n  #Assign calculated proportion vector to the column\n  mult_prop_col_mat[,c] &lt;- mult_prop_col_mat[,c] / column_total\n}\n#check new matrix\nmult_prop_col_mat\n\n#We'll do the same again but for each row\n#This time with no annotation\nmult_prop_row_mat &lt;- multiplication_mat\nfor (r in 1:nrow(mult_prop_row_mat)) {\n  mult_prop_row_mat[r,] &lt;- \n    mult_prop_row_mat[r,] / \n    sum(mult_prop_row_mat[r,])\n}\nmult_prop_row_mat\n\nHopefully this is clear how for loops can be used. Further down we’ll work with a real dataset to show some real world applications. However, for now we will go onto while loops.\n\n\n20.2.2 While loops\nI do not use while loops often so we will only briefly go over them. A while loop will loop over a series of commands until a condition is no longer met. Conditions will either be TRUE or FALSE (logical)\nThe format of a while loop:\n\nwhile (condition) {\n  command/s\n}\n\nBelow is an example:\n\ni &lt;- 1\nwhile (i &lt; 10) {\n  print(paste0(\n    \"At the start of loop number:\", i, \", the variable i is \", i))\n  i &lt;- i + 1\n  print(paste0(\"-----\"))\n}\ni\n\nIn this case 1 is being added to i in each loop. The loop keeps going till i is no longer less than 10. Therefore, at the end of the while loop i is equal to 10.\nOne final point on while loops. You can make a while loop so the condition will always be met. If this is the case the while loop will never finish and you’ll need to use “ESC” in the console to stop the while loop. An example is below which you should not run:\n\ni &lt;- 1\nwhile (i &gt; 0) {\n  print(paste0(\n    \"At the start of loop number:\", i, \", the variable i is \", i))\n  i &lt;- i + 1\n  print(paste0(\"-----\"))\n}\ni"
  },
  {
    "objectID": "20-Basic_programming.html#if-statements",
    "href": "20-Basic_programming.html#if-statements",
    "title": "20  Basic programming",
    "section": "20.3 If statements",
    "text": "20.3 If statements\n\n\n\n\n\n\n\n\n\nIf statements allow for different commands to be carried out depending on if a condition is met.\nThis can be thought of like a flow chart where you go one way if you answer yes and another if you answer no. Example:\n\nAre you thirsty?\nIf yes, have something to drink.\nIf no, do not have something to drink.\n\nBasic format of an if equation:\n\nif (condition) {\n  command/s if condition true\n} else {\n  command/s if condition false\n}\n\nI’ll show you a coding example using the modulus (%%) operator.\n\n#Create a scalar\ni &lt;- 3\n#If statement determing if the remainder of i/2 is 1\nif (( i %% 2) == 1) {\n  paste0(i, \" is odd\")\n} else {\n  paste0(i, \" is even\")\n}\n\nYou can have an if statement within a loop.\nReminder: We need to use print() within loops to print results to the console.\n\nfor (i in 0:9) {\n  #If statement determining if the remainder of i/2 is 1\n  if (( i %% 2) == 1) {\n    print(paste0(i, \" is odd\"))\n  } else {\n    print(paste0(i, \" is even\"))\n  }\n}"
  },
  {
    "objectID": "20-Basic_programming.html#functions",
    "href": "20-Basic_programming.html#functions",
    "title": "20  Basic programming",
    "section": "20.4 Functions",
    "text": "20.4 Functions\n\n\n\n\n\n\n\n\n\nThroughout this course we have used many functions. However, you may want a function that does not exist. In this case you can create your own.\nThe format to create your own function is:\n\nfunction_name &lt;- function(inputs_and_option_names){\n  command/s\n  return(new_variable)\n}\n\nThere are 2 new functions above:\n\nfunction(): This function creates the new function.\nreturn(): This specifies what will be returned when we run our new function.\n\nA quick example to add VAT to each number in a vector:\n\n#Create the function\nadd_vat &lt;- function(input_num_vec) {\n  vat_vec &lt;- input_num_vec * 1.2\n  return(round(vat_vec, digits = 2))\n}\n#Example running the new function\nadd_vat(0.99)\nadd_vat(c(9.99, 8.78, 2.45))\n\nIn the below example we will create a function that will return all numbers that are multiples of 5 from the input vector.\n\n#Create the function\nall_mult_5_func &lt;- function(input_num_vec){\n  #Create an empty vector prior to loop to contain multiples of 5\n  out_vec &lt;- vector(mode=\"numeric\", length=0)\n  #Loop to add multiples of 5 to out_vec\n  for (i in input_num_vec){\n    #If statement so only multiples of 5 are added to the out_vec\n    #In this case no else part is required\n    if ((i %% 5) == 0 ){\n      out_vec &lt;- c(out_vec, i)\n    }\n  }\n  #Have the return function at the very end\n  return(out_vec)\n}\n#Try out the function with some vectors\nall_mult_5_func(1:20)\nall_mult_5_func(seq(from = 0, to = 100, by = 8))\nall_mult_5_func(1:10 * 5)\n\nLike with normal functions a custom one can be given multiple arguments if built that way. Knowing this we will alter the above function so it can return all numbers that are multiples of a chosen number.\n\n#When creating the function add in another input/option name\nall_mult_x_func &lt;- function(input_num_vec, multiple){\n  #Create an empty vector prior to loop to contain the multiples\n  out_vec &lt;- vector(mode=\"numeric\", length=0)\n  #Loop to add the multiples to out_vec\n  for (i in input_num_vec){\n    #If statement so only multiples of the chosen number are added to the out_vec\n    #In this case no else part is required\n    if ((i %% multiple) == 0 ){\n      out_vec &lt;- c(out_vec, i)\n    }\n  }\n  #Have the return function at the very end\n  return(out_vec)\n}\n#Try out the function with some vectors\nall_mult_x_func(input_num_vec = 1:20, multiple = 2)\nall_mult_x_func(seq(from = 0, to = 100, by = 8), 4)\nall_mult_x_func(1:10 * 5, 10)\n#As always we can assign the output of a function to a new variable\nmultiples_of_6_btwn_1_100 &lt;- all_mult_x_func(1:100, 6)\n\nWith all that we are now going to a real dataset in the next session to show the use and applications of these new techniques."
  },
  {
    "objectID": "21-Student_grades_example.html#the-student-grades-data",
    "href": "21-Student_grades_example.html#the-student-grades-data",
    "title": "21  Student grades example",
    "section": "21.1 The student grades data",
    "text": "21.1 The student grades data\n\n\n\n\n\n\n\n\n\nDownload the five following files into your directory “Chapter_20-21”.\n\n\n\n Download student_grades_group_A.tsv\n\n\n\n\n\n\n\n Download student_grades_group_B.tsv\n\n\n\n\n\n\n\n Download student_grades_group_C.tsv\n\n\n\n\n\n\n\n Download student_grades_group_D.tsv\n\n\n\n\n\n\n\n Download student_grades_group_E.tsv\n\n\n\n\nThese files contain the marks secured by USA students in various subjects. The files are separated by anonymised race/ethnicity (groups A-E).\nThe files each contain the columns:\n\ngender: female or male.\nparental level of education: some high school, high school, associate’s degree, some college, bachelor’s degree, or master’s degree.\nlunch: Whether the student ate free/reduced lunches or standard lunches.\ntest preparation course: Whether the student completed a test prep course (completed) or not (none).\nmath score: The student’s math score.\nreading score: The student’s reading score.\nwriting score: The student’s writing score.\n\nSource of data: https://www.kaggle.com/spscientist/students-performance-in-exams"
  },
  {
    "objectID": "21-Student_grades_example.html#analysis-script",
    "href": "21-Student_grades_example.html#analysis-script",
    "title": "21  Student grades example",
    "section": "21.2 Analysis script",
    "text": "21.2 Analysis script\n\n\n\n\n\n\n\n\n\nBefore carrying on I would suggest to set your working directory into the directory “Chapter_20-21”.\nNow create a new R Script and save it as “student_grades.R” in the “Chapter_20-21” directory. It is useful to have your scripts close to their relevant data.\nEnsure you use annotations and code sections to keep your script organised and tidy.\nOne extra tip: I normally like to keep a setwd() command at the top of my R Scripts so the script will set itself to the correct working directory. I just copy the relevant command from the console."
  },
  {
    "objectID": "21-Student_grades_example.html#reading-in-and-preprocessing-the-data",
    "href": "21-Student_grades_example.html#reading-in-and-preprocessing-the-data",
    "title": "21  Student grades example",
    "section": "21.3 Reading in and preprocessing the data",
    "text": "21.3 Reading in and preprocessing the data\n\n\n\n\n\n\n\n\n\nWe are going to first read in the data and carry out some changes to it. First we’ll carry this out on just the group A data.\nRead in the group A TSV (tab separated value) file:\n\ngroup_a_df &lt;- read.csv(\"student_grades_group_A.tsv\",\n                       sep = \"\\t\",\n                       stringsAsFactors = TRUE,\n                       check.names = FALSE)\n\nWhen you first read in a file it is always good practice to check the resulting data frame’s contents:\n\n#Check the top 5 rows\nhead(group_a_df)\n#View the data frame\nView(group_a_df)\n#Summary of each of its columns\nsummary(group_a_df)\n\nThere are three main things we want to do with this data frame:\n\nChange the column names so spaces are underscores. We can carry this out with gsub().\nChange the order of the levels for the column “parental level of education” so they are in order from least to most education. We can do this with the factor() function.\nAdd a group column which will contain the information on what race/ethnicity group each student belongs to. This will contain all the same info for this data frame but it will be useful later on. We are happy for it to be a character column for now.\n\nLet us carry out these tasks:\n\n#Change spaces to _ in column names\ncolnames(group_a_df) &lt;- gsub(pattern = \" \", \n                             replacement = \"_\",\n                             x = colnames(group_a_df))\n#check our change\ncolnames(group_a_df)\n\n#Change the order of the parental level of education levels\nedu_level_order &lt;- c(\"some high school\",\"high school\",\n                     \"associate's degree\",\"some college\",\n                     \"bachelor's degree\",\"master's degree\")         \ngroup_a_df$parental_level_of_education &lt;- factor(\n  group_a_df$parental_level_of_education,\n  levels = edu_level_order\n)\n#check our change\nlevels(group_a_df$parental_level_of_education)\n\n#Add group column using the recycle rule\ngroup_a_df[,\"group\"] &lt;- \"group_A\"\n#check the new column\ngroup_a_df$group\n\nGreat we have created code to read in our file and preprocess the data frame. We have checked the output and know it produces the data frame in the format we want.\nWe could copy and paste the code four times and change the relevant variable names to read in groups B-E. This would be pretty annoying and time consuming though.\nInstead let us create a function to do this for us. This will mostly use the same code above with variable names changed. There are a few changes though especially for the “group_name”” column creation.\nNote: The variable names used within the function should not be the same as any you are using outside the function.\n\n#Function name: \"read_and_preprocess\"\n#Input: file_name\nread_and_preprocess &lt;- function(file_name){\n  #read in the file\n  df &lt;- read.csv(file_name, sep = \"\\t\",\n                 stringsAsFactors = TRUE, check.names = FALSE)\n  #column name change\n  colnames(df) &lt;- gsub(pattern = \" \", replacement = \"_\", x = colnames(df))\n  #Parental level of education order\n  edu_level_order &lt;- c(\"some high school\",\"high school\",\n                       \"associate's degree\",\"some college\",\n                       \"bachelor's degree\",\"master's degree\")         \n  df$parental_level_of_education &lt;- \n    factor(df$parental_level_of_education, levels = edu_level_order)\n  #extract the group name from the file name\n  group_name &lt;- gsub(\".*_group\",\"group\", file_name)\n  group_name &lt;- gsub(\".tsv\",\"\", group_name)\n  #Add group column\n  df$group &lt;- group_name\n  #Return df\n  return(df)\n}\n\nWe have created the _function. Now to run it with all our files:\n\n#We can specify the option name\n#This is useful when we have lots of options\ngroup_a_df &lt;- read_and_preprocess(file_name = \"student_grades_group_A.tsv\")\n#But we don't need to, which is useful with less options\ngroup_b_df &lt;- read_and_preprocess(\"student_grades_group_B.tsv\")\ngroup_c_df &lt;- read_and_preprocess(\"student_grades_group_C.tsv\")\ngroup_d_df &lt;- read_and_preprocess(\"student_grades_group_D.tsv\")\ngroup_e_df &lt;- read_and_preprocess(\"student_grades_group_E.tsv\")"
  },
  {
    "objectID": "21-Student_grades_example.html#combining-the-data-frames",
    "href": "21-Student_grades_example.html#combining-the-data-frames",
    "title": "21  Student grades example",
    "section": "21.4 Combining the data frames",
    "text": "21.4 Combining the data frames\n\n\n\n\n\n\n\n\n\nA lot of the time we have multiple files but we want all the data to be in one data frame.\nThe first step is to create a list containing our data frames. A list is just like a vector except it can hold heterogeneous data (multiple classes) whilst a vector can only contain homogeneous data (one class).\nWe will use this so we can loop over our data frames. There is more to lists, if you would like to see more check out: https://rc2e.com/datastructures#intro-DataStructures\nWe’ll start with creating our list then using a for loop to print out the first 3 rows of each data frame. To create a list of data frames we use the function list() just like we would with c().\n\n#Create list\ndf_lst &lt;- list(group_a_df, group_b_df, group_c_df, group_d_df, group_e_df)\n#Loop through list\nfor (df in df_lst) {\n  #Print the first element of the group name column\n  print(df$group[1])\n  #Print the first 3 rows\n  print(head(x = df, n = 3))\n}\n\nWith our list we can combine the data frames into one data frame with a for loop and rbind().\nIt would be very simple but rbind() will not function if one of the data frames provided does not exist. We will therefore use an if statement to create a data frame for our combined data in the first loop.\nWe will use a new function, exists(). It will return TRUE if the provided variable exists and FALSE if it does not. The provided variable name needs to be a character (a string in quotes in this case).\n\n#First ensure the variable we want to create does not exist\nrm(student_grades_df)\n#Now to loop through our list\nfor (df in df_lst) {\n  #If statment using the exists() function\n  #If the variable student_grades_df exists\n  if (exists(\"student_grades_df\")) {\n    #Combine student_grades_df with df by rows\n    student_grades_df &lt;- rbind(student_grades_df, df)\n  } else {\n    #else if it doesn't exist assign df as student_grades_df\n    student_grades_df &lt;- df\n  }\n}\n\n#whilst we are here let us change the group column to a factor now\n#No need to change the order as we are happy with it being alphabetical\nstudent_grades_df$group &lt;- factor(student_grades_df$group)"
  },
  {
    "objectID": "21-Student_grades_example.html#saving-the-data-frame",
    "href": "21-Student_grades_example.html#saving-the-data-frame",
    "title": "21  Student grades example",
    "section": "21.5 Saving the data frame",
    "text": "21.5 Saving the data frame\n\n\n\n\n\n\n\n\n\nYou can write the new data frame to a text file. This is good if you want to use the file outside of R.\nWhat if you want to save a R object so you can use it later without having to run all the script you used to create it or reading in a file you created?\nYou can use the save() function:\n\nsave(student_grades_df, file = \"student_grades_df\")\n\nThe above created a file called “students_grades_df” that is not human-readable. It contains the data frame student_grades_df. The name of the file and variable do not have to match but I find it easier if they do.\nYou can then load in the file which will load the variable with its variable name. Before we load the data we will remove our current student_grades_df object:\n\n#Remove the data frame\nrm(student_grades_df)\n#Load in the data frame\nload(\"student_grades_df\")\n\nSaving your R objects acts as very good checkpoints after code that takes a long time to run."
  },
  {
    "objectID": "21-Student_grades_example.html#scaling-grading",
    "href": "21-Student_grades_example.html#scaling-grading",
    "title": "21  Student grades example",
    "section": "21.6 Scaling & Grading",
    "text": "21.6 Scaling & Grading\n\n\n\n\n\n\n\n\n\nWe currently have the base scores (%) for the students but not their letter grade (A,B,C, or F in this case).\nBefore we provide the grades we are go to scale each student’s results. There are complicated ways to do this but we will get the mean score for each topic (math, writing, and reading). For each score below the mean we will minus 5 and for each score above will will add 5. Scores equal to the mean will not be affected.\n\n#Create function to scale score vector\nscale_score &lt;- function(score_vec){\n  #Get mean score which we will round to 0 decimal places\n  mean_score &lt;- round(mean(score_vec), digits = 0)\n  #Create an empty scale_score_vec to add to\n  scale_score_vec &lt;- c()\n  #Loop through scores to scale them\n  for (i in 1:length(score_vec)) {\n    score &lt;- score_vec[i]\n    #if to add 5 if larger than mean\n    if (score &gt; mean_score) { score &lt;- score + 5 }\n    #if to minus 5 if lower than mean\n    if (score &lt; mean_score) { score &lt;- score - 5 }\n    #We don't add or minus anything if the score is equal to the mean\n    #Add the scaled score to the scale_score_vec\n    scale_score_vec &lt;- c(scale_score_vec, score)\n  }\n  #Return the created vector\n  return(scale_score_vec)\n}\n\n#Run the function on the topics to create new scaled score topics\nstudent_grades_df$math_scaled_score &lt;- \n  scale_score(student_grades_df$math_score)\nstudent_grades_df$reading_scaled_score &lt;- \n  scale_score(student_grades_df$reading_score)\nstudent_grades_df$writing_scaled_score &lt;- \n  scale_score(student_grades_df$writing_score)\n\nNow we have scaled the scores. Some students now have more than 100% and some have less than 0% but that is fine. It doesn’t matter for their final grade.\nWe will give out grades based on the scaled scores like so:\n\nA: &gt;=95%\nB: &gt;=80% and &lt;95%\nC: &gt;=60% and &lt;80%\nF: &lt;60%\n\nWe can carry this out with the below code. To create it I copied the last code block and altered it. This time we use else if so the subsequent ifs only work if all the previous ifs were FALSE.\n\n#Create function to grade a vector\ngrade_score &lt;- function(score_vec){\n  #Create empty grade_vec to add to\n  grade_vec &lt;- c()\n  #Loop through scores to scale them\n  for (i in 1:length(score_vec)) {\n    #get current score\n    score &lt;- score_vec[i]\n    #if statements with else ifs\n    if (score &gt;= 95) {\n      grade_vec[i] &lt;- \"A\"\n    } else if (score &gt;= 80) {\n      grade_vec[i] &lt;- \"B\"\n    } else if (score &gt;= 60) {\n      grade_vec[i] &lt;- \"C\"\n    } else {\n      grade_vec[i] &lt;- \"F\"\n    }\n  }\n  #Return the created vector as a factor\n  return(factor(grade_vec))\n}\n#Run the function on the topics to create the grade columns\nstudent_grades_df$math_grade &lt;- \n  grade_score(student_grades_df$math_scaled_score)\nstudent_grades_df$reading_grade &lt;- \n  grade_score(student_grades_df$reading_scaled_score)\nstudent_grades_df$writing_grade &lt;- \n  grade_score(student_grades_df$writing_scaled_score)\n\nThat is he last edit we will do to our data frame so lets save it.\n\nsave(student_grades_df, file = \"student_grades_df\")"
  },
  {
    "objectID": "21-Student_grades_example.html#some-quick-plots",
    "href": "21-Student_grades_example.html#some-quick-plots",
    "title": "21  Student grades example",
    "section": "21.7 Some quick plots",
    "text": "21.7 Some quick plots\n\n\n\n\n\n\n\n\n\nBelow are some quick plots with their code.\nFirst let us see the distribution of grades for the three topics:\n\n#Math\n#With plot()\nplot(table(student_grades_df$math_grade))\n\n\n\n\n\n#With barplot()\nbarplot(table(student_grades_df$math_grade))\n\n\n\n\n\n#Reading\n#With barplot()\nbarplot(table(student_grades_df$reading_grade))\n\n\n\n\n\n#Writing\n#With barplot()\nbarplot(table(student_grades_df$writing_grade))\n\n\n\n\nIt seems the grades are pretty low. Maybe that is to do with our scaling and harsh grading.\nQuickly we’ll check the histogram of all the scores and all the scaled scores.\n\n#scores\nhist(\n  c(student_grades_df$math_score, \n    student_grades_df$reading_score,\n    student_grades_df$writing_score\n  )\n)\n\n\n\n\n\n#scaled scores\nhist(\n  c(student_grades_df$math_scaled_score, \n    student_grades_df$reading_scaled_score,\n      student_grades_df$writing_scaled_score\n  )\n)\n\n\n\n\nWe can see a big dip in the middle of the scaled scores but not in the non-scaled scores. Seems scaling just increased the distance between people who did better than others.\nLast thing is we’ll create a boxplot of math scores separating the x axis by some metadata.\n\nboxplot(\n  math_score~test_preparation_course+lunch,\n  data = student_grades_df)\n\n\n\n\nI think that is plenty of coding for today and for this course. Thank you very much!"
  },
  {
    "objectID": "21-Student_grades_example.html#tips-for-creating-your-own-loops-and-functions",
    "href": "21-Student_grades_example.html#tips-for-creating-your-own-loops-and-functions",
    "title": "21  Student grades example",
    "section": "21.8 Tips for creating your own loops and functions",
    "text": "21.8 Tips for creating your own loops and functions\n\n\n\n\n\n\n\n\n\nBefore you go here are some quick tips.\n\nCreate the code outside the loop/function to begin with.\nTest with a small object to start (e.g. a part of a data frame).\nKeep backups of code.\nIf you encounter errors try running your code step by step to determine where the error is.\nIt can useful to run the code inside your loop/function by setting the loop/function variable (e.g. i &lt;- 1)"
  },
  {
    "objectID": "22-Further_resources.html#r-user-groups-and-forums",
    "href": "22-Further_resources.html#r-user-groups-and-forums",
    "title": "Appendix A — Further resources",
    "section": "A.1 R user groups and forums",
    "text": "A.1 R user groups and forums\n\n\n\n\n\n\n\n\n\n\nhttps://jumpingrivers.github.io/meetingsR/r-user-groups.html#europe\nhttps://www.r-consortium.org/blog/2019/09/09/r-community-explorer-r-user-groups\nhttps://r-dir.com/community/forums.html\n\n##Workshop files {#workshopfiles}\n\nA.1.1 Chapter 7 files\n\n\n\n Download Liverpool beaches csv file\n\n\n\n\n\n\n\n Download Clothing_stores.tsv\n\n\n\n\n\n\n\n Download Census_2011_L_postcodes_counts.csv\n\n\n\n\n\nA.1.2 Chapter 8 files\n\n\n\n Download bat_roosts.csv\n\n\n\n\n\n\n\n Download UK_retail.tsv\n\n\n\n\n\n\nA.1.3 Chapter 10-11 files\n\n\n\n Download tea_consumption.csv\n\n\n\n\n\n\n\n Download english_speaking_population_of_countries.tsv\n\n\n\n\n\n\nA.1.4 Chapter 13-16 files\n\n\n\n Download animal_sizes.csv\n\n\n\n\n\n\n\n Download penguin.tsv\n\n\n\n\n\n\nA.1.5 Chapter 17-19\n\n\n\n Download Fish.csv\n\n\n\n\n\n\n\n Download world_happiness_report_2016.csv\n\n\n\n\n\n\nA.1.6 Chapter 20-21\n\n\n\n Download student_grades_group_A.tsv\n\n\n\n\n\n\n\n Download student_grades_group_B.tsv\n\n\n\n\n\n\n\n Download student_grades_group_C.tsv\n\n\n\n\n\n\n\n Download student_grades_group_D.tsv\n\n\n\n\n\n\n\n Download student_grades_group_E.tsv"
  },
  {
    "objectID": "22-Further_resources.html#base-r-books-and-links",
    "href": "22-Further_resources.html#base-r-books-and-links",
    "title": "Appendix A — Further resources",
    "section": "A.2 Base R books and links",
    "text": "A.2 Base R books and links\nQuick-R: https://www.statmethods.net/index.html\nR Cookbook: https://rc2e.com/"
  },
  {
    "objectID": "22-Further_resources.html#r-cheat-sheets",
    "href": "22-Further_resources.html#r-cheat-sheets",
    "title": "Appendix A — Further resources",
    "section": "A.3 R cheat sheets",
    "text": "A.3 R cheat sheets\nhttps://rstudio.com/resources/cheatsheets/"
  },
  {
    "objectID": "22-Further_resources.html#advanced-r-topics",
    "href": "22-Further_resources.html#advanced-r-topics",
    "title": "Appendix A — Further resources",
    "section": "A.4 Advanced R topics",
    "text": "A.4 Advanced R topics\nR packages: https://r-pkgs.org/\nEfficient R Programming: https://csgillespie.github.io/efficientR/\nR for Data Science: https://r4ds.had.co.nz/\nR Graphics Cookbook: https://r-graphics.org/\nFundamentals of Data Visualization: https://clauswilke.com/dataviz/\nR BOOKDOWN (used to make this book): https://bookdown.org/\nHands-On Programming with R: https://rstudio-education.github.io/hopr/\nEfficient R programming: https://csgillespie.github.io/efficientR/"
  },
  {
    "objectID": "22-Further_resources.html#datasets",
    "href": "22-Further_resources.html#datasets",
    "title": "Appendix A — Further resources",
    "section": "A.5 Datasets",
    "text": "A.5 Datasets\nI got a lot of my datasets from Kaggle"
  }
]